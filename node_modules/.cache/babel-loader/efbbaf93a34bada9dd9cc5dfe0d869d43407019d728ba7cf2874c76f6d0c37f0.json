{"ast":null,"code":"import { h, defineComponent, computed, ref, toRef, inject, provide } from 'vue';\nimport { useMergedState } from 'vooks';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { formatLength, call, warn, useReactivated } from '../../_utils';\nimport { NScrollbar } from '../../_internal';\nimport { layoutLight } from '../styles';\nimport style from './styles/layout-sider.cssr';\nimport ToggleButton from './ToggleButton';\nimport ToggleBar from './ToggleBar';\nimport { layoutSiderInjectionKey, positionProp } from './interface';\nimport { layoutInjectionKey } from './Layout';\nexport const layoutSiderProps = {\n  position: positionProp,\n  bordered: Boolean,\n  collapsedWidth: {\n    type: Number,\n    default: 48\n  },\n  width: {\n    type: [Number, String],\n    default: 272\n  },\n  contentStyle: {\n    type: [String, Object],\n    default: ''\n  },\n  collapseMode: {\n    type: String,\n    default: 'transform'\n  },\n  collapsed: {\n    type: Boolean,\n    default: undefined\n  },\n  defaultCollapsed: Boolean,\n  showCollapsedContent: {\n    type: Boolean,\n    default: true\n  },\n  showTrigger: {\n    type: [Boolean, String],\n    default: false\n  },\n  nativeScrollbar: {\n    type: Boolean,\n    default: true\n  },\n  inverted: Boolean,\n  scrollbarProps: Object,\n  triggerStyle: [String, Object],\n  collapsedTriggerStyle: [String, Object],\n  'onUpdate:collapsed': [Function, Array],\n  onUpdateCollapsed: [Function, Array],\n  onAfterEnter: Function,\n  onAfterLeave: Function,\n  // deprecated\n  onExpand: [Function, Array],\n  onCollapse: [Function, Array],\n  onScroll: Function\n};\nexport default defineComponent({\n  name: 'LayoutSider',\n  props: Object.assign(Object.assign({}, useTheme.props), layoutSiderProps),\n  setup(props) {\n    const layoutProps = inject(layoutInjectionKey);\n    if (process.env.NODE_ENV !== 'production') {\n      if (!layoutProps) {\n        warn('layout-sider', 'Layout sider is not allowed to be put outside layout.');\n      } else {\n        if (!layoutProps.hasSider) {\n          warn('layout-sider', \"You are putting `n-layout-sider` in a `n-layout` but haven't set `has-sider` on the `n-layout`.\");\n        }\n      }\n    }\n    const scrollableElRef = ref(null);\n    const scrollbarInstRef = ref(null);\n    const styleMaxWidthRef = computed(() => {\n      return formatLength(mergedCollapsedRef.value ? props.collapsedWidth : props.width);\n    });\n    const scrollContainerStyleRef = computed(() => {\n      if (props.collapseMode !== 'transform') return {};\n      return {\n        minWidth: formatLength(props.width)\n      };\n    });\n    const siderPlacementRef = computed(() => {\n      return layoutProps ? layoutProps.siderPlacement : 'left';\n    });\n    const uncontrolledCollapsedRef = ref(props.defaultCollapsed);\n    const mergedCollapsedRef = useMergedState(toRef(props, 'collapsed'), uncontrolledCollapsedRef);\n    function scrollTo(options, y) {\n      if (props.nativeScrollbar) {\n        const {\n          value: scrollableEl\n        } = scrollableElRef;\n        if (scrollableEl) {\n          if (y === undefined) {\n            scrollableEl.scrollTo(options);\n          } else {\n            scrollableEl.scrollTo(options, y);\n          }\n        }\n      } else {\n        const {\n          value: scrollbarInst\n        } = scrollbarInstRef;\n        if (scrollbarInst) {\n          scrollbarInst.scrollTo(options, y);\n        }\n      }\n    }\n    function handleTriggerClick() {\n      const {\n        'onUpdate:collapsed': _onUpdateCollapsed,\n        onUpdateCollapsed,\n        // deprecated\n        onExpand,\n        onCollapse\n      } = props;\n      const {\n        value: collapsed\n      } = mergedCollapsedRef;\n      if (onUpdateCollapsed) {\n        call(onUpdateCollapsed, !collapsed);\n      }\n      if (_onUpdateCollapsed) {\n        call(_onUpdateCollapsed, !collapsed);\n      }\n      uncontrolledCollapsedRef.value = !collapsed;\n      if (collapsed) {\n        if (onExpand) call(onExpand);\n      } else {\n        if (onCollapse) call(onCollapse);\n      }\n    }\n    let scrollX = 0;\n    let scrollY = 0;\n    const handleNativeElScroll = e => {\n      var _a;\n      const target = e.target;\n      scrollX = target.scrollLeft;\n      scrollY = target.scrollTop;\n      (_a = props.onScroll) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    };\n    useReactivated(() => {\n      if (props.nativeScrollbar) {\n        const el = scrollableElRef.value;\n        if (el) {\n          el.scrollTop = scrollY;\n          el.scrollLeft = scrollX;\n        }\n      }\n    });\n    provide(layoutSiderInjectionKey, {\n      collapsedRef: mergedCollapsedRef,\n      collapseModeRef: toRef(props, 'collapseMode')\n    });\n    const {\n      mergedClsPrefixRef,\n      inlineThemeDisabled\n    } = useConfig(props);\n    const themeRef = useTheme('Layout', '-layout-sider', style, layoutLight, props, mergedClsPrefixRef);\n    function handleTransitionend(e) {\n      var _a, _b;\n      if (e.propertyName === 'max-width') {\n        if (mergedCollapsedRef.value) {\n          (_a = props.onAfterLeave) === null || _a === void 0 ? void 0 : _a.call(props);\n        } else {\n          (_b = props.onAfterEnter) === null || _b === void 0 ? void 0 : _b.call(props);\n        }\n      }\n    }\n    const exposedMethods = {\n      scrollTo\n    };\n    const cssVarsRef = computed(() => {\n      const {\n        common: {\n          cubicBezierEaseInOut\n        },\n        self\n      } = themeRef.value;\n      const {\n        siderToggleButtonColor,\n        siderToggleButtonBorder,\n        siderToggleBarColor,\n        siderToggleBarColorHover\n      } = self;\n      const vars = {\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-toggle-button-color': siderToggleButtonColor,\n        '--n-toggle-button-border': siderToggleButtonBorder,\n        '--n-toggle-bar-color': siderToggleBarColor,\n        '--n-toggle-bar-color-hover': siderToggleBarColorHover\n      };\n      if (props.inverted) {\n        vars['--n-color'] = self.siderColorInverted;\n        vars['--n-text-color'] = self.textColorInverted;\n        vars['--n-border-color'] = self.siderBorderColorInverted;\n        vars['--n-toggle-button-icon-color'] = self.siderToggleButtonIconColorInverted;\n        vars.__invertScrollbar = self.__invertScrollbar;\n      } else {\n        vars['--n-color'] = self.siderColor;\n        vars['--n-text-color'] = self.textColor;\n        vars['--n-border-color'] = self.siderBorderColor;\n        vars['--n-toggle-button-icon-color'] = self.siderToggleButtonIconColor;\n      }\n      return vars;\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('layout-sider', computed(() => props.inverted ? 'a' : 'b'), cssVarsRef, props) : undefined;\n    return Object.assign({\n      scrollableElRef,\n      scrollbarInstRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedTheme: themeRef,\n      styleMaxWidth: styleMaxWidthRef,\n      mergedCollapsed: mergedCollapsedRef,\n      scrollContainerStyle: scrollContainerStyleRef,\n      siderPlacement: siderPlacementRef,\n      handleNativeElScroll,\n      handleTransitionend,\n      handleTriggerClick,\n      inlineThemeDisabled,\n      cssVars: cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    }, exposedMethods);\n  },\n  render() {\n    var _a;\n    const {\n      mergedClsPrefix,\n      mergedCollapsed,\n      showTrigger\n    } = this;\n    (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n    return h(\"aside\", {\n      class: [`${mergedClsPrefix}-layout-sider`, this.themeClass, `${mergedClsPrefix}-layout-sider--${this.position}-positioned`, `${mergedClsPrefix}-layout-sider--${this.siderPlacement}-placement`, this.bordered && `${mergedClsPrefix}-layout-sider--bordered`, mergedCollapsed && `${mergedClsPrefix}-layout-sider--collapsed`, (!mergedCollapsed || this.showCollapsedContent) && `${mergedClsPrefix}-layout-sider--show-content`],\n      onTransitionend: this.handleTransitionend,\n      style: [this.inlineThemeDisabled ? undefined : this.cssVars, {\n        maxWidth: this.styleMaxWidth,\n        width: formatLength(this.width)\n      }]\n    }, !this.nativeScrollbar ? h(NScrollbar, Object.assign({}, this.scrollbarProps, {\n      onScroll: this.onScroll,\n      ref: \"scrollbarInstRef\",\n      style: this.scrollContainerStyle,\n      contentStyle: this.contentStyle,\n      theme: this.mergedTheme.peers.Scrollbar,\n      themeOverrides: this.mergedTheme.peerOverrides.Scrollbar,\n      // here is a hack, since in light theme the scrollbar color is dark,\n      // we need to invert it in light color...\n      builtinThemeOverrides: this.inverted && this.cssVars.__invertScrollbar === 'true' ? {\n        colorHover: 'rgba(255, 255, 255, .4)',\n        color: 'rgba(255, 255, 255, .3)'\n      } : undefined\n    }), this.$slots) : h(\"div\", {\n      class: `${mergedClsPrefix}-layout-sider-scroll-container`,\n      onScroll: this.handleNativeElScroll,\n      style: [this.scrollContainerStyle, {\n        overflow: 'auto'\n      }, this.contentStyle],\n      ref: \"scrollableElRef\"\n    }, this.$slots), showTrigger ? showTrigger === 'bar' ? h(ToggleBar, {\n      clsPrefix: mergedClsPrefix,\n      style: mergedCollapsed ? this.collapsedTriggerStyle : this.triggerStyle,\n      onClick: this.handleTriggerClick\n    }) : h(ToggleButton, {\n      clsPrefix: mergedClsPrefix,\n      style: mergedCollapsed ? this.collapsedTriggerStyle : this.triggerStyle,\n      onClick: this.handleTriggerClick\n    }) : null, this.bordered ? h(\"div\", {\n      class: `${mergedClsPrefix}-layout-sider__border`\n    }) : null);\n  }\n});","map":{"version":3,"names":["h","defineComponent","computed","ref","toRef","inject","provide","useMergedState","useConfig","useTheme","useThemeClass","formatLength","call","warn","useReactivated","NScrollbar","layoutLight","style","ToggleButton","ToggleBar","layoutSiderInjectionKey","positionProp","layoutInjectionKey","layoutSiderProps","position","bordered","Boolean","collapsedWidth","type","Number","default","width","String","contentStyle","Object","collapseMode","collapsed","undefined","defaultCollapsed","showCollapsedContent","showTrigger","nativeScrollbar","inverted","scrollbarProps","triggerStyle","collapsedTriggerStyle","Function","Array","onUpdateCollapsed","onAfterEnter","onAfterLeave","onExpand","onCollapse","onScroll","name","props","assign","setup","layoutProps","process","env","NODE_ENV","hasSider","scrollableElRef","scrollbarInstRef","styleMaxWidthRef","mergedCollapsedRef","value","scrollContainerStyleRef","minWidth","siderPlacementRef","siderPlacement","uncontrolledCollapsedRef","scrollTo","options","y","scrollableEl","scrollbarInst","handleTriggerClick","_onUpdateCollapsed","scrollX","scrollY","handleNativeElScroll","e","_a","target","scrollLeft","scrollTop","el","collapsedRef","collapseModeRef","mergedClsPrefixRef","inlineThemeDisabled","themeRef","handleTransitionend","_b","propertyName","exposedMethods","cssVarsRef","common","cubicBezierEaseInOut","self","siderToggleButtonColor","siderToggleButtonBorder","siderToggleBarColor","siderToggleBarColorHover","vars","siderColorInverted","textColorInverted","siderBorderColorInverted","siderToggleButtonIconColorInverted","__invertScrollbar","siderColor","textColor","siderBorderColor","siderToggleButtonIconColor","themeClassHandle","mergedClsPrefix","mergedTheme","styleMaxWidth","mergedCollapsed","scrollContainerStyle","cssVars","themeClass","onRender","render","class","onTransitionend","maxWidth","theme","peers","Scrollbar","themeOverrides","peerOverrides","builtinThemeOverrides","colorHover","color","$slots","overflow","clsPrefix","onClick"],"sources":["/Users/elmo/Documents/GitHub/meetings_vue3/node_modules/naive-ui/es/layout/src/LayoutSider.js"],"sourcesContent":["import { h, defineComponent, computed, ref, toRef, inject, provide } from 'vue';\nimport { useMergedState } from 'vooks';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { formatLength, call, warn, useReactivated } from '../../_utils';\nimport { NScrollbar } from '../../_internal';\nimport { layoutLight } from '../styles';\nimport style from './styles/layout-sider.cssr';\nimport ToggleButton from './ToggleButton';\nimport ToggleBar from './ToggleBar';\nimport { layoutSiderInjectionKey, positionProp } from './interface';\nimport { layoutInjectionKey } from './Layout';\nexport const layoutSiderProps = {\n    position: positionProp,\n    bordered: Boolean,\n    collapsedWidth: {\n        type: Number,\n        default: 48\n    },\n    width: {\n        type: [Number, String],\n        default: 272\n    },\n    contentStyle: {\n        type: [String, Object],\n        default: ''\n    },\n    collapseMode: {\n        type: String,\n        default: 'transform'\n    },\n    collapsed: {\n        type: Boolean,\n        default: undefined\n    },\n    defaultCollapsed: Boolean,\n    showCollapsedContent: {\n        type: Boolean,\n        default: true\n    },\n    showTrigger: {\n        type: [Boolean, String],\n        default: false\n    },\n    nativeScrollbar: {\n        type: Boolean,\n        default: true\n    },\n    inverted: Boolean,\n    scrollbarProps: Object,\n    triggerStyle: [String, Object],\n    collapsedTriggerStyle: [String, Object],\n    'onUpdate:collapsed': [Function, Array],\n    onUpdateCollapsed: [Function, Array],\n    onAfterEnter: Function,\n    onAfterLeave: Function,\n    // deprecated\n    onExpand: [Function, Array],\n    onCollapse: [Function, Array],\n    onScroll: Function\n};\nexport default defineComponent({\n    name: 'LayoutSider',\n    props: Object.assign(Object.assign({}, useTheme.props), layoutSiderProps),\n    setup(props) {\n        const layoutProps = inject(layoutInjectionKey);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!layoutProps) {\n                warn('layout-sider', 'Layout sider is not allowed to be put outside layout.');\n            }\n            else {\n                if (!layoutProps.hasSider) {\n                    warn('layout-sider', \"You are putting `n-layout-sider` in a `n-layout` but haven't set `has-sider` on the `n-layout`.\");\n                }\n            }\n        }\n        const scrollableElRef = ref(null);\n        const scrollbarInstRef = ref(null);\n        const styleMaxWidthRef = computed(() => {\n            return formatLength(mergedCollapsedRef.value ? props.collapsedWidth : props.width);\n        });\n        const scrollContainerStyleRef = computed(() => {\n            if (props.collapseMode !== 'transform')\n                return {};\n            return {\n                minWidth: formatLength(props.width)\n            };\n        });\n        const siderPlacementRef = computed(() => {\n            return layoutProps ? layoutProps.siderPlacement : 'left';\n        });\n        const uncontrolledCollapsedRef = ref(props.defaultCollapsed);\n        const mergedCollapsedRef = useMergedState(toRef(props, 'collapsed'), uncontrolledCollapsedRef);\n        function scrollTo(options, y) {\n            if (props.nativeScrollbar) {\n                const { value: scrollableEl } = scrollableElRef;\n                if (scrollableEl) {\n                    if (y === undefined) {\n                        scrollableEl.scrollTo(options);\n                    }\n                    else {\n                        scrollableEl.scrollTo(options, y);\n                    }\n                }\n            }\n            else {\n                const { value: scrollbarInst } = scrollbarInstRef;\n                if (scrollbarInst) {\n                    scrollbarInst.scrollTo(options, y);\n                }\n            }\n        }\n        function handleTriggerClick() {\n            const { 'onUpdate:collapsed': _onUpdateCollapsed, onUpdateCollapsed, \n            // deprecated\n            onExpand, onCollapse } = props;\n            const { value: collapsed } = mergedCollapsedRef;\n            if (onUpdateCollapsed) {\n                call(onUpdateCollapsed, !collapsed);\n            }\n            if (_onUpdateCollapsed) {\n                call(_onUpdateCollapsed, !collapsed);\n            }\n            uncontrolledCollapsedRef.value = !collapsed;\n            if (collapsed) {\n                if (onExpand)\n                    call(onExpand);\n            }\n            else {\n                if (onCollapse)\n                    call(onCollapse);\n            }\n        }\n        let scrollX = 0;\n        let scrollY = 0;\n        const handleNativeElScroll = (e) => {\n            var _a;\n            const target = e.target;\n            scrollX = target.scrollLeft;\n            scrollY = target.scrollTop;\n            (_a = props.onScroll) === null || _a === void 0 ? void 0 : _a.call(props, e);\n        };\n        useReactivated(() => {\n            if (props.nativeScrollbar) {\n                const el = scrollableElRef.value;\n                if (el) {\n                    el.scrollTop = scrollY;\n                    el.scrollLeft = scrollX;\n                }\n            }\n        });\n        provide(layoutSiderInjectionKey, {\n            collapsedRef: mergedCollapsedRef,\n            collapseModeRef: toRef(props, 'collapseMode')\n        });\n        const { mergedClsPrefixRef, inlineThemeDisabled } = useConfig(props);\n        const themeRef = useTheme('Layout', '-layout-sider', style, layoutLight, props, mergedClsPrefixRef);\n        function handleTransitionend(e) {\n            var _a, _b;\n            if (e.propertyName === 'max-width') {\n                if (mergedCollapsedRef.value) {\n                    (_a = props.onAfterLeave) === null || _a === void 0 ? void 0 : _a.call(props);\n                }\n                else {\n                    (_b = props.onAfterEnter) === null || _b === void 0 ? void 0 : _b.call(props);\n                }\n            }\n        }\n        const exposedMethods = {\n            scrollTo\n        };\n        const cssVarsRef = computed(() => {\n            const { common: { cubicBezierEaseInOut }, self } = themeRef.value;\n            const { siderToggleButtonColor, siderToggleButtonBorder, siderToggleBarColor, siderToggleBarColorHover } = self;\n            const vars = {\n                '--n-bezier': cubicBezierEaseInOut,\n                '--n-toggle-button-color': siderToggleButtonColor,\n                '--n-toggle-button-border': siderToggleButtonBorder,\n                '--n-toggle-bar-color': siderToggleBarColor,\n                '--n-toggle-bar-color-hover': siderToggleBarColorHover\n            };\n            if (props.inverted) {\n                vars['--n-color'] = self.siderColorInverted;\n                vars['--n-text-color'] = self.textColorInverted;\n                vars['--n-border-color'] = self.siderBorderColorInverted;\n                vars['--n-toggle-button-icon-color'] =\n                    self.siderToggleButtonIconColorInverted;\n                vars.__invertScrollbar = self.__invertScrollbar;\n            }\n            else {\n                vars['--n-color'] = self.siderColor;\n                vars['--n-text-color'] = self.textColor;\n                vars['--n-border-color'] = self.siderBorderColor;\n                vars['--n-toggle-button-icon-color'] = self.siderToggleButtonIconColor;\n            }\n            return vars;\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('layout-sider', computed(() => (props.inverted ? 'a' : 'b')), cssVarsRef, props)\n            : undefined;\n        return Object.assign({ scrollableElRef,\n            scrollbarInstRef, mergedClsPrefix: mergedClsPrefixRef, mergedTheme: themeRef, styleMaxWidth: styleMaxWidthRef, mergedCollapsed: mergedCollapsedRef, scrollContainerStyle: scrollContainerStyleRef, siderPlacement: siderPlacementRef, handleNativeElScroll,\n            handleTransitionend,\n            handleTriggerClick,\n            inlineThemeDisabled, cssVars: cssVarsRef, themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass, onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender }, exposedMethods);\n    },\n    render() {\n        var _a;\n        const { mergedClsPrefix, mergedCollapsed, showTrigger } = this;\n        (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n        return (h(\"aside\", { class: [\n                `${mergedClsPrefix}-layout-sider`,\n                this.themeClass,\n                `${mergedClsPrefix}-layout-sider--${this.position}-positioned`,\n                `${mergedClsPrefix}-layout-sider--${this.siderPlacement}-placement`,\n                this.bordered && `${mergedClsPrefix}-layout-sider--bordered`,\n                mergedCollapsed && `${mergedClsPrefix}-layout-sider--collapsed`,\n                (!mergedCollapsed || this.showCollapsedContent) &&\n                    `${mergedClsPrefix}-layout-sider--show-content`\n            ], onTransitionend: this.handleTransitionend, style: [\n                this.inlineThemeDisabled ? undefined : this.cssVars,\n                {\n                    maxWidth: this.styleMaxWidth,\n                    width: formatLength(this.width)\n                }\n            ] },\n            !this.nativeScrollbar ? (h(NScrollbar, Object.assign({}, this.scrollbarProps, { onScroll: this.onScroll, ref: \"scrollbarInstRef\", style: this.scrollContainerStyle, contentStyle: this.contentStyle, theme: this.mergedTheme.peers.Scrollbar, themeOverrides: this.mergedTheme.peerOverrides.Scrollbar, \n                // here is a hack, since in light theme the scrollbar color is dark,\n                // we need to invert it in light color...\n                builtinThemeOverrides: this.inverted && this.cssVars.__invertScrollbar === 'true'\n                    ? {\n                        colorHover: 'rgba(255, 255, 255, .4)',\n                        color: 'rgba(255, 255, 255, .3)'\n                    }\n                    : undefined }), this.$slots)) : (h(\"div\", { class: `${mergedClsPrefix}-layout-sider-scroll-container`, onScroll: this.handleNativeElScroll, style: [\n                    this.scrollContainerStyle,\n                    {\n                        overflow: 'auto'\n                    },\n                    this.contentStyle\n                ], ref: \"scrollableElRef\" }, this.$slots)),\n            showTrigger ? (showTrigger === 'bar' ? (h(ToggleBar, { clsPrefix: mergedClsPrefix, style: mergedCollapsed ? this.collapsedTriggerStyle : this.triggerStyle, onClick: this.handleTriggerClick })) : (h(ToggleButton, { clsPrefix: mergedClsPrefix, style: mergedCollapsed ? this.collapsedTriggerStyle : this.triggerStyle, onClick: this.handleTriggerClick }))) : null,\n            this.bordered ? (h(\"div\", { class: `${mergedClsPrefix}-layout-sider__border` })) : null));\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}