{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { computed } from 'vue';\nimport { formatLength } from '../../_utils';\nimport { getColKey, createCustomWidthStyle } from './utils';\nfunction getRowsAndCols(columns, getResizableWidth) {\n  const rows = [];\n  const cols = [];\n  const dataRelatedCols = [];\n  const rowItemMap = new WeakMap();\n  let maxDepth = -1;\n  let totalRowSpan = 0;\n  let hasEllipsis = false;\n  function ensureMaxDepth(columns, currentDepth) {\n    if (currentDepth > maxDepth) {\n      rows[currentDepth] = [];\n      maxDepth = currentDepth;\n    }\n    for (const column of columns) {\n      if ('children' in column) {\n        ensureMaxDepth(column.children, currentDepth + 1);\n      } else {\n        const key = 'key' in column ? column.key : undefined;\n        cols.push({\n          key: getColKey(column),\n          style: createCustomWidthStyle(column, key !== undefined ? formatLength(getResizableWidth(key)) : undefined),\n          column\n        });\n        totalRowSpan += 1;\n        if (!hasEllipsis) {\n          hasEllipsis = !!column.ellipsis;\n        }\n        dataRelatedCols.push(column);\n      }\n    }\n  }\n  ensureMaxDepth(columns, 0);\n  let currentLeafIndex = 0;\n  function ensureColLayout(columns, currentDepth) {\n    let hideUntilIndex = 0;\n    columns.forEach((column, index) => {\n      var _a;\n      if ('children' in column) {\n        // do not allow colSpan > 1 for non-leaf th\n        // we will execute the calculation logic\n        const cachedCurrentLeafIndex = currentLeafIndex;\n        const rowItem = {\n          column,\n          colSpan: 0,\n          rowSpan: 1,\n          isLast: false\n        };\n        ensureColLayout(column.children, currentDepth + 1);\n        column.children.forEach(childColumn => {\n          var _a, _b;\n          rowItem.colSpan += (_b = (_a = rowItemMap.get(childColumn)) === null || _a === void 0 ? void 0 : _a.colSpan) !== null && _b !== void 0 ? _b : 0;\n        });\n        if (cachedCurrentLeafIndex + rowItem.colSpan === totalRowSpan) {\n          rowItem.isLast = true;\n        }\n        rowItemMap.set(column, rowItem);\n        rows[currentDepth].push(rowItem);\n      } else {\n        if (currentLeafIndex < hideUntilIndex) {\n          currentLeafIndex += 1;\n          return;\n        }\n        let colSpan = 1;\n        if ('titleColSpan' in column) {\n          colSpan = (_a = column.titleColSpan) !== null && _a !== void 0 ? _a : 1;\n        }\n        if (colSpan > 1) {\n          hideUntilIndex = currentLeafIndex + colSpan;\n        }\n        const isLast = currentLeafIndex + colSpan === totalRowSpan;\n        const rowItem = {\n          column,\n          colSpan,\n          rowSpan: maxDepth - currentDepth + 1,\n          isLast\n        };\n        rowItemMap.set(column, rowItem);\n        rows[currentDepth].push(rowItem);\n        currentLeafIndex += 1;\n      }\n    });\n  }\n  ensureColLayout(columns, 0);\n  return {\n    hasEllipsis,\n    rows,\n    cols,\n    dataRelatedCols\n  };\n}\nexport function useGroupHeader(props, getResizableWidth) {\n  const rowsAndCols = computed(() => getRowsAndCols(props.columns, getResizableWidth));\n  return {\n    rowsRef: computed(() => rowsAndCols.value.rows),\n    colsRef: computed(() => rowsAndCols.value.cols),\n    hasEllipsisRef: computed(() => rowsAndCols.value.hasEllipsis),\n    dataRelatedColsRef: computed(() => rowsAndCols.value.dataRelatedCols)\n  };\n}","map":{"version":3,"names":["computed","formatLength","getColKey","createCustomWidthStyle","getRowsAndCols","columns","getResizableWidth","rows","cols","dataRelatedCols","rowItemMap","WeakMap","maxDepth","totalRowSpan","hasEllipsis","ensureMaxDepth","currentDepth","column","children","key","undefined","push","style","ellipsis","currentLeafIndex","ensureColLayout","hideUntilIndex","forEach","index","_a","cachedCurrentLeafIndex","rowItem","colSpan","rowSpan","isLast","childColumn","_b","get","set","titleColSpan","useGroupHeader","props","rowsAndCols","rowsRef","value","colsRef","hasEllipsisRef","dataRelatedColsRef"],"sources":["/Users/elmo/Documents/GitHub/meetings_vue3/node_modules/naive-ui/es/data-table/src/use-group-header.js"],"sourcesContent":["import { computed } from 'vue';\nimport { formatLength } from '../../_utils';\nimport { getColKey, createCustomWidthStyle } from './utils';\nfunction getRowsAndCols(columns, getResizableWidth) {\n    const rows = [];\n    const cols = [];\n    const dataRelatedCols = [];\n    const rowItemMap = new WeakMap();\n    let maxDepth = -1;\n    let totalRowSpan = 0;\n    let hasEllipsis = false;\n    function ensureMaxDepth(columns, currentDepth) {\n        if (currentDepth > maxDepth) {\n            rows[currentDepth] = [];\n            maxDepth = currentDepth;\n        }\n        for (const column of columns) {\n            if ('children' in column) {\n                ensureMaxDepth(column.children, currentDepth + 1);\n            }\n            else {\n                const key = 'key' in column ? column.key : undefined;\n                cols.push({\n                    key: getColKey(column),\n                    style: createCustomWidthStyle(column, key !== undefined ? formatLength(getResizableWidth(key)) : undefined),\n                    column\n                });\n                totalRowSpan += 1;\n                if (!hasEllipsis) {\n                    hasEllipsis = !!column.ellipsis;\n                }\n                dataRelatedCols.push(column);\n            }\n        }\n    }\n    ensureMaxDepth(columns, 0);\n    let currentLeafIndex = 0;\n    function ensureColLayout(columns, currentDepth) {\n        let hideUntilIndex = 0;\n        columns.forEach((column, index) => {\n            var _a;\n            if ('children' in column) {\n                // do not allow colSpan > 1 for non-leaf th\n                // we will execute the calculation logic\n                const cachedCurrentLeafIndex = currentLeafIndex;\n                const rowItem = {\n                    column,\n                    colSpan: 0,\n                    rowSpan: 1,\n                    isLast: false\n                };\n                ensureColLayout(column.children, currentDepth + 1);\n                column.children.forEach((childColumn) => {\n                    var _a, _b;\n                    rowItem.colSpan += (_b = (_a = rowItemMap.get(childColumn)) === null || _a === void 0 ? void 0 : _a.colSpan) !== null && _b !== void 0 ? _b : 0;\n                });\n                if (cachedCurrentLeafIndex + rowItem.colSpan === totalRowSpan) {\n                    rowItem.isLast = true;\n                }\n                rowItemMap.set(column, rowItem);\n                rows[currentDepth].push(rowItem);\n            }\n            else {\n                if (currentLeafIndex < hideUntilIndex) {\n                    currentLeafIndex += 1;\n                    return;\n                }\n                let colSpan = 1;\n                if ('titleColSpan' in column) {\n                    colSpan = (_a = column.titleColSpan) !== null && _a !== void 0 ? _a : 1;\n                }\n                if (colSpan > 1) {\n                    hideUntilIndex = currentLeafIndex + colSpan;\n                }\n                const isLast = currentLeafIndex + colSpan === totalRowSpan;\n                const rowItem = {\n                    column,\n                    colSpan,\n                    rowSpan: maxDepth - currentDepth + 1,\n                    isLast\n                };\n                rowItemMap.set(column, rowItem);\n                rows[currentDepth].push(rowItem);\n                currentLeafIndex += 1;\n            }\n        });\n    }\n    ensureColLayout(columns, 0);\n    return {\n        hasEllipsis,\n        rows,\n        cols,\n        dataRelatedCols\n    };\n}\nexport function useGroupHeader(props, getResizableWidth) {\n    const rowsAndCols = computed(() => getRowsAndCols(props.columns, getResizableWidth));\n    return {\n        rowsRef: computed(() => rowsAndCols.value.rows),\n        colsRef: computed(() => rowsAndCols.value.cols),\n        hasEllipsisRef: computed(() => rowsAndCols.value.hasEllipsis),\n        dataRelatedColsRef: computed(() => rowsAndCols.value.dataRelatedCols)\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}