{"ast":null,"code":"import { toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock, withKeys as _withKeys, createVNode as _createVNode, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"flex space-x-2 px-4 py-2\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tag = _resolveComponent(\"el-tag\");\n  const _component_el_input = _resolveComponent(\"el-input\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createTextVNode(_toDisplayString($data.tags) + \" \", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.tags, tag => {\n    return _openBlock(), _createBlock(_component_el_tag, {\n      key: tag.name,\n      closable: \"\",\n      type: tag.type,\n      onClose: $event => $options.handleClose(tag)\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(tag.name), 1 /* TEXT */)]),\n\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"type\", \"onClose\"]);\n  }), 128 /* KEYED_FRAGMENT */)), _createVNode(_component_el_input, {\n    modelValue: $data.inputValue,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.inputValue = $event),\n    onKeyup: _withKeys($options.handleInputConfirm, [\"enter\"])\n  }, null, 8 /* PROPS */, [\"modelValue\", \"onKeyup\"])])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;EAEOA,KAAK,EAAC;AAA0B;;;;+FADlCC,UAAI,IAAG,GACV,qCAKM,OALNC,UAKM,sBAJJC,oBAESC,6BAFaH,UAAI,EAAXI,GAAG;yBAAlBC,aAESC;MAFoBC,GAAG,EAAEH,GAAG,CAACI,IAAI;MAAEC,QAAQ,EAAR,EAAQ;MAAEC,IAAI,EAAEN,GAAG,CAACM,IAAI;MAAGC,OAAK,YAAEC,oBAAW,CAACR,GAAG;;wBAC3F,MAAc,mCAAXA,GAAG,CAACI,IAAI;;;;kCAEbK,aAA4EC;gBAAzDd,gBAAU;+DAAVA,gBAAU;IAAGe,OAAK,YAAQH,2BAAkB","names":["class","$data","_hoisted_1","_createElementBlock","_Fragment","tag","_createBlock","_component_el_tag","key","name","closable","type","onClose","$options","_createVNode","_component_el_input","onKeyup"],"sourceRoot":"","sources":["/Users/elmo/Documents/GitHub/meetings_vue3/src/views/test.vue"],"sourcesContent":["<template>\n  {{ tags }}\n  <div class=\"flex space-x-2 px-4 py-2\">\n    <el-tag v-for=\"tag in tags\" :key=\"tag.name\" closable :type=\"tag.type\" @close=\"handleClose(tag)\">\n      {{ tag.name }}\n    </el-tag>\n    <el-input v-model=\"inputValue\" @keyup.enter=\"handleInputConfirm\"></el-input>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"testPage\",\n  data() {\n    return {\n      tags: [\n        {\n          name: \"123\",\n          id: 0,\n        },\n        {\n          id: 1,\n          name: \"222\",\n        },\n      ],\n      inputValue: \"\",\n    };\n  },\n  methods: {\n    handleClose(tag) {\n      this.tags.splice(this.tags.indexOf(tag), 1);\n    },\n    handleInputConfirm() {\n      let inputValue = this.inputValue;\n      if (inputValue) {\n        this.tags.push(inputValue);\n      }\n      this.inputValue = \"\";\n    },\n  },\n  mounted() {},\n};\n</script>\n\n<style scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}