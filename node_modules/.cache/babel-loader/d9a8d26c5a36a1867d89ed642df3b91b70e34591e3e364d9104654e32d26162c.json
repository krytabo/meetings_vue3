{"ast":null,"code":"import { h, ref, computed, inject, defineComponent, watchEffect } from 'vue';\nimport { useMemo } from 'vooks';\nimport { changeColor } from 'seemly';\nimport { createHoverColor, createPressedColor } from '../../_utils/color/index';\nimport { buttonGroupInjectionKey } from '../../button-group/src/context';\nimport { useRtl } from '../../_mixins/use-rtl';\nimport { isSafari } from '../../_utils/env/browser';\nimport { useConfig, useFormItem, useTheme, useThemeClass } from '../../_mixins';\nimport { NFadeInExpandTransition, NIconSwitchTransition, NBaseLoading, NBaseWave } from '../../_internal';\nimport { call, color2Class, createKey, isSlotEmpty, resolveWrappedSlot, warnOnce } from '../../_utils';\nimport { buttonLight } from '../styles';\nimport style from './styles/index.cssr';\nexport const buttonProps = Object.assign(Object.assign({}, useTheme.props), {\n  color: String,\n  textColor: String,\n  text: Boolean,\n  block: Boolean,\n  loading: Boolean,\n  disabled: Boolean,\n  circle: Boolean,\n  size: String,\n  ghost: Boolean,\n  round: Boolean,\n  secondary: Boolean,\n  tertiary: Boolean,\n  quaternary: Boolean,\n  strong: Boolean,\n  focusable: {\n    type: Boolean,\n    default: true\n  },\n  keyboard: {\n    type: Boolean,\n    default: true\n  },\n  tag: {\n    type: String,\n    default: 'button'\n  },\n  type: {\n    type: String,\n    default: 'default'\n  },\n  dashed: Boolean,\n  iconPlacement: {\n    type: String,\n    default: 'left'\n  },\n  attrType: {\n    type: String,\n    default: 'button'\n  },\n  bordered: {\n    type: Boolean,\n    default: true\n  },\n  onClick: [Function, Array],\n  nativeFocusBehavior: {\n    type: Boolean,\n    default: !isSafari\n  }\n});\nconst Button = defineComponent({\n  name: 'Button',\n  props: buttonProps,\n  setup(props) {\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(() => {\n        const {\n          dashed,\n          ghost,\n          text,\n          secondary,\n          tertiary,\n          quaternary\n        } = props;\n        if ((dashed || ghost || text) && (secondary || tertiary || quaternary)) {\n          warnOnce('button', \"`dashed`, `ghost` and `text` props can't be used along with `secondary`, `tertiary` and `quaterary` props.\");\n        }\n      });\n    }\n    const selfElRef = ref(null);\n    const waveElRef = ref(null);\n    const enterPressedRef = ref(false);\n    const showBorderRef = useMemo(() => {\n      return !props.quaternary && !props.tertiary && !props.secondary && !props.text && (!props.color || props.ghost || props.dashed) && props.bordered;\n    });\n    const NButtonGroup = inject(buttonGroupInjectionKey, {});\n    const {\n      mergedSizeRef\n    } = useFormItem({}, {\n      defaultSize: 'medium',\n      mergedSize: NFormItem => {\n        const {\n          size\n        } = props;\n        if (size) return size;\n        const {\n          size: buttonGroupSize\n        } = NButtonGroup;\n        if (buttonGroupSize) return buttonGroupSize;\n        const {\n          mergedSize: formItemSize\n        } = NFormItem || {};\n        if (formItemSize) {\n          return formItemSize.value;\n        }\n        return 'medium';\n      }\n    });\n    const mergedFocusableRef = computed(() => {\n      return props.focusable && !props.disabled;\n    });\n    const handleMousedown = e => {\n      var _a;\n      if (!mergedFocusableRef.value) {\n        e.preventDefault();\n      }\n      if (props.nativeFocusBehavior) {\n        return;\n      }\n      e.preventDefault();\n      // normally this won't be called if disabled (when tag is button)\n      // if not, we try to make it behave like a button\n      if (props.disabled) {\n        return;\n      }\n      if (mergedFocusableRef.value) {\n        (_a = selfElRef.value) === null || _a === void 0 ? void 0 : _a.focus({\n          preventScroll: true\n        });\n      }\n    };\n    const handleClick = e => {\n      var _a;\n      if (!props.disabled && !props.loading) {\n        const {\n          onClick\n        } = props;\n        if (onClick) call(onClick, e);\n        if (!props.text) {\n          (_a = waveElRef.value) === null || _a === void 0 ? void 0 : _a.play();\n        }\n      }\n    };\n    const handleKeyup = e => {\n      switch (e.key) {\n        case 'Enter':\n          if (!props.keyboard) {\n            return;\n          }\n          enterPressedRef.value = false;\n      }\n    };\n    const handleKeydown = e => {\n      switch (e.key) {\n        case 'Enter':\n          if (!props.keyboard || props.loading) {\n            e.preventDefault();\n            return;\n          }\n          enterPressedRef.value = true;\n      }\n    };\n    const handleBlur = () => {\n      enterPressedRef.value = false;\n    };\n    const {\n      inlineThemeDisabled,\n      mergedClsPrefixRef,\n      mergedRtlRef\n    } = useConfig(props);\n    const themeRef = useTheme('Button', '-button', style, buttonLight, props, mergedClsPrefixRef);\n    const rtlEnabledRef = useRtl('Button', mergedRtlRef, mergedClsPrefixRef);\n    const cssVarsRef = computed(() => {\n      const theme = themeRef.value;\n      const {\n        common: {\n          cubicBezierEaseInOut,\n          cubicBezierEaseOut\n        },\n        self\n      } = theme;\n      const {\n        rippleDuration,\n        opacityDisabled,\n        fontWeight,\n        fontWeightStrong\n      } = self;\n      const size = mergedSizeRef.value;\n      const {\n        dashed,\n        type,\n        ghost,\n        text,\n        color,\n        round,\n        circle,\n        textColor,\n        secondary,\n        tertiary,\n        quaternary,\n        strong\n      } = props;\n      // font\n      const fontProps = {\n        'font-weight': strong ? fontWeightStrong : fontWeight\n      };\n      // color\n      let colorProps = {\n        '--n-color': 'initial',\n        '--n-color-hover': 'initial',\n        '--n-color-pressed': 'initial',\n        '--n-color-focus': 'initial',\n        '--n-color-disabled': 'initial',\n        '--n-ripple-color': 'initial',\n        '--n-text-color': 'initial',\n        '--n-text-color-hover': 'initial',\n        '--n-text-color-pressed': 'initial',\n        '--n-text-color-focus': 'initial',\n        '--n-text-color-disabled': 'initial'\n      };\n      const typeIsTertiary = type === 'tertiary';\n      const typeIsDefault = type === 'default';\n      const mergedType = typeIsTertiary ? 'default' : type;\n      if (text) {\n        const propTextColor = textColor || color;\n        const mergedTextColor = propTextColor || self[createKey('textColorText', mergedType)];\n        colorProps = {\n          '--n-color': '#0000',\n          '--n-color-hover': '#0000',\n          '--n-color-pressed': '#0000',\n          '--n-color-focus': '#0000',\n          '--n-color-disabled': '#0000',\n          '--n-ripple-color': '#0000',\n          '--n-text-color': mergedTextColor,\n          '--n-text-color-hover': propTextColor ? createHoverColor(propTextColor) : self[createKey('textColorTextHover', mergedType)],\n          '--n-text-color-pressed': propTextColor ? createPressedColor(propTextColor) : self[createKey('textColorTextPressed', mergedType)],\n          '--n-text-color-focus': propTextColor ? createHoverColor(propTextColor) : self[createKey('textColorTextHover', mergedType)],\n          '--n-text-color-disabled': propTextColor || self[createKey('textColorTextDisabled', mergedType)]\n        };\n      } else if (ghost || dashed) {\n        const mergedTextColor = textColor || color;\n        colorProps = {\n          '--n-color': '#0000',\n          '--n-color-hover': '#0000',\n          '--n-color-pressed': '#0000',\n          '--n-color-focus': '#0000',\n          '--n-color-disabled': '#0000',\n          '--n-ripple-color': color || self[createKey('rippleColor', mergedType)],\n          '--n-text-color': mergedTextColor || self[createKey('textColorGhost', mergedType)],\n          '--n-text-color-hover': mergedTextColor ? createHoverColor(mergedTextColor) : self[createKey('textColorGhostHover', mergedType)],\n          '--n-text-color-pressed': mergedTextColor ? createPressedColor(mergedTextColor) : self[createKey('textColorGhostPressed', mergedType)],\n          '--n-text-color-focus': mergedTextColor ? createHoverColor(mergedTextColor) : self[createKey('textColorGhostHover', mergedType)],\n          '--n-text-color-disabled': mergedTextColor || self[createKey('textColorGhostDisabled', mergedType)]\n        };\n      } else if (secondary) {\n        const typeTextColor = typeIsDefault ? self.textColor : typeIsTertiary ? self.textColorTertiary : self[createKey('color', mergedType)];\n        const mergedTextColor = color || typeTextColor;\n        const isColoredType = type !== 'default' && type !== 'tertiary';\n        colorProps = {\n          '--n-color': isColoredType ? changeColor(mergedTextColor, {\n            alpha: Number(self.colorOpacitySecondary)\n          }) : self.colorSecondary,\n          '--n-color-hover': isColoredType ? changeColor(mergedTextColor, {\n            alpha: Number(self.colorOpacitySecondaryHover)\n          }) : self.colorSecondaryHover,\n          '--n-color-pressed': isColoredType ? changeColor(mergedTextColor, {\n            alpha: Number(self.colorOpacitySecondaryPressed)\n          }) : self.colorSecondaryPressed,\n          '--n-color-focus': isColoredType ? changeColor(mergedTextColor, {\n            alpha: Number(self.colorOpacitySecondaryHover)\n          }) : self.colorSecondaryHover,\n          '--n-color-disabled': self.colorSecondary,\n          '--n-ripple-color': '#0000',\n          '--n-text-color': mergedTextColor,\n          '--n-text-color-hover': mergedTextColor,\n          '--n-text-color-pressed': mergedTextColor,\n          '--n-text-color-focus': mergedTextColor,\n          '--n-text-color-disabled': mergedTextColor\n        };\n      } else if (tertiary || quaternary) {\n        const typeColor = typeIsDefault ? self.textColor : typeIsTertiary ? self.textColorTertiary : self[createKey('color', mergedType)];\n        const mergedColor = color || typeColor;\n        if (tertiary) {\n          colorProps['--n-color'] = self.colorTertiary;\n          colorProps['--n-color-hover'] = self.colorTertiaryHover;\n          colorProps['--n-color-pressed'] = self.colorTertiaryPressed;\n          colorProps['--n-color-focus'] = self.colorSecondaryHover;\n          colorProps['--n-color-disabled'] = self.colorTertiary;\n        } else {\n          colorProps['--n-color'] = self.colorQuaternary;\n          colorProps['--n-color-hover'] = self.colorQuaternaryHover;\n          colorProps['--n-color-pressed'] = self.colorQuaternaryPressed;\n          colorProps['--n-color-focus'] = self.colorQuaternaryHover;\n          colorProps['--n-color-disabled'] = self.colorQuaternary;\n        }\n        colorProps['--n-ripple-color'] = '#0000';\n        colorProps['--n-text-color'] = mergedColor;\n        colorProps['--n-text-color-hover'] = mergedColor;\n        colorProps['--n-text-color-pressed'] = mergedColor;\n        colorProps['--n-text-color-focus'] = mergedColor;\n        colorProps['--n-text-color-disabled'] = mergedColor;\n      } else {\n        colorProps = {\n          '--n-color': color || self[createKey('color', mergedType)],\n          '--n-color-hover': color ? createHoverColor(color) : self[createKey('colorHover', mergedType)],\n          '--n-color-pressed': color ? createPressedColor(color) : self[createKey('colorPressed', mergedType)],\n          '--n-color-focus': color ? createHoverColor(color) : self[createKey('colorFocus', mergedType)],\n          '--n-color-disabled': color || self[createKey('colorDisabled', mergedType)],\n          '--n-ripple-color': color || self[createKey('rippleColor', mergedType)],\n          '--n-text-color': textColor || (color ? self.textColorPrimary : typeIsTertiary ? self.textColorTertiary : self[createKey('textColor', mergedType)]),\n          '--n-text-color-hover': textColor || (color ? self.textColorHoverPrimary : self[createKey('textColorHover', mergedType)]),\n          '--n-text-color-pressed': textColor || (color ? self.textColorPressedPrimary : self[createKey('textColorPressed', mergedType)]),\n          '--n-text-color-focus': textColor || (color ? self.textColorFocusPrimary : self[createKey('textColorFocus', mergedType)]),\n          '--n-text-color-disabled': textColor || (color ? self.textColorDisabledPrimary : self[createKey('textColorDisabled', mergedType)])\n        };\n      }\n      // border\n      let borderProps = {\n        '--n-border': 'initial',\n        '--n-border-hover': 'initial',\n        '--n-border-pressed': 'initial',\n        '--n-border-focus': 'initial',\n        '--n-border-disabled': 'initial'\n      };\n      if (text) {\n        borderProps = {\n          '--n-border': 'none',\n          '--n-border-hover': 'none',\n          '--n-border-pressed': 'none',\n          '--n-border-focus': 'none',\n          '--n-border-disabled': 'none'\n        };\n      } else {\n        borderProps = {\n          '--n-border': self[createKey('border', mergedType)],\n          '--n-border-hover': self[createKey('borderHover', mergedType)],\n          '--n-border-pressed': self[createKey('borderPressed', mergedType)],\n          '--n-border-focus': self[createKey('borderFocus', mergedType)],\n          '--n-border-disabled': self[createKey('borderDisabled', mergedType)]\n        };\n      }\n      // size\n      const {\n        [createKey('height', size)]: height,\n        [createKey('fontSize', size)]: fontSize,\n        [createKey('padding', size)]: padding,\n        [createKey('paddingRound', size)]: paddingRound,\n        [createKey('iconSize', size)]: iconSize,\n        [createKey('borderRadius', size)]: borderRadius,\n        [createKey('iconMargin', size)]: iconMargin,\n        waveOpacity\n      } = self;\n      const sizeProps = {\n        '--n-width': circle && !text ? height : 'initial',\n        '--n-height': text ? 'initial' : height,\n        '--n-font-size': fontSize,\n        '--n-padding': circle ? 'initial' : text ? 'initial' : round ? paddingRound : padding,\n        '--n-icon-size': iconSize,\n        '--n-icon-margin': iconMargin,\n        '--n-border-radius': text ? 'initial' : circle || round ? height : borderRadius\n      };\n      return Object.assign(Object.assign(Object.assign(Object.assign({\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-bezier-ease-out': cubicBezierEaseOut,\n        '--n-ripple-duration': rippleDuration,\n        '--n-opacity-disabled': opacityDisabled,\n        '--n-wave-opacity': waveOpacity\n      }, fontProps), colorProps), borderProps), sizeProps);\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('button', computed(() => {\n      let hash = '';\n      const {\n        dashed,\n        type,\n        ghost,\n        text,\n        color,\n        round,\n        circle,\n        textColor,\n        secondary,\n        tertiary,\n        quaternary,\n        strong\n      } = props;\n      if (dashed) hash += 'a';\n      if (ghost) hash += 'b';\n      if (text) hash += 'c';\n      if (round) hash += 'd';\n      if (circle) hash += 'e';\n      if (secondary) hash += 'f';\n      if (tertiary) hash += 'g';\n      if (quaternary) hash += 'h';\n      if (strong) hash += 'i';\n      if (color) hash += 'j' + color2Class(color);\n      if (textColor) hash += 'k' + color2Class(textColor);\n      const {\n        value: size\n      } = mergedSizeRef;\n      hash += 'l' + size[0];\n      hash += 'm' + type[0];\n      return hash;\n    }), cssVarsRef, props) : undefined;\n    return {\n      selfElRef,\n      waveElRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedFocusable: mergedFocusableRef,\n      mergedSize: mergedSizeRef,\n      showBorder: showBorderRef,\n      enterPressed: enterPressedRef,\n      rtlEnabled: rtlEnabledRef,\n      handleMousedown,\n      handleKeydown,\n      handleBlur,\n      handleKeyup,\n      handleClick,\n      customColorCssVars: computed(() => {\n        const {\n          color\n        } = props;\n        if (!color) return null;\n        const hoverColor = createHoverColor(color);\n        return {\n          '--n-border-color': color,\n          '--n-border-color-hover': hoverColor,\n          '--n-border-color-pressed': createPressedColor(color),\n          '--n-border-color-focus': hoverColor,\n          '--n-border-color-disabled': color\n        };\n      }),\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    };\n  },\n  render() {\n    const {\n      mergedClsPrefix,\n      tag: Component,\n      onRender\n    } = this;\n    onRender === null || onRender === void 0 ? void 0 : onRender();\n    const children = resolveWrappedSlot(this.$slots.default, children => children && h(\"span\", {\n      class: `${mergedClsPrefix}-button__content`\n    }, children));\n    return h(Component, {\n      ref: \"selfElRef\",\n      class: [this.themeClass, `${mergedClsPrefix}-button`, `${mergedClsPrefix}-button--${this.type}-type`, `${mergedClsPrefix}-button--${this.mergedSize}-type`, this.rtlEnabled && `${mergedClsPrefix}-button--rtl`, this.disabled && `${mergedClsPrefix}-button--disabled`, this.block && `${mergedClsPrefix}-button--block`, this.enterPressed && `${mergedClsPrefix}-button--pressed`, !this.text && this.dashed && `${mergedClsPrefix}-button--dashed`, this.color && `${mergedClsPrefix}-button--color`, this.secondary && `${mergedClsPrefix}-button--secondary`, this.loading && `${mergedClsPrefix}-button--loading`, this.ghost && `${mergedClsPrefix}-button--ghost` // required for button group border collapse\n      ],\n      tabindex: this.mergedFocusable ? 0 : -1,\n      type: this.attrType,\n      style: this.cssVars,\n      disabled: this.disabled,\n      onClick: this.handleClick,\n      onBlur: this.handleBlur,\n      onMousedown: this.handleMousedown,\n      onKeyup: this.handleKeyup,\n      onKeydown: this.handleKeydown\n    }, this.iconPlacement === 'right' && children, h(NFadeInExpandTransition, {\n      width: true\n    }, {\n      default: () => resolveWrappedSlot(this.$slots.icon, children => (this.loading || children) && h(\"span\", {\n        class: `${mergedClsPrefix}-button__icon`,\n        style: {\n          margin: isSlotEmpty(this.$slots.default) ? '0' : ''\n        }\n      }, h(NIconSwitchTransition, null, {\n        default: () => this.loading ? h(NBaseLoading, {\n          clsPrefix: mergedClsPrefix,\n          key: \"loading\",\n          class: `${mergedClsPrefix}-icon-slot`,\n          strokeWidth: 20\n        }) : h(\"div\", {\n          key: \"icon\",\n          class: `${mergedClsPrefix}-icon-slot`,\n          role: \"none\"\n        }, children)\n      })))\n    }), this.iconPlacement === 'left' && children, !this.text ? h(NBaseWave, {\n      ref: \"waveElRef\",\n      clsPrefix: mergedClsPrefix\n    }) : null, this.showBorder ? h(\"div\", {\n      \"aria-hidden\": true,\n      class: `${mergedClsPrefix}-button__border`,\n      style: this.customColorCssVars\n    }) : null, this.showBorder ? h(\"div\", {\n      \"aria-hidden\": true,\n      class: `${mergedClsPrefix}-button__state-border`,\n      style: this.customColorCssVars\n    }) : null);\n  }\n});\nexport default Button;\n// XButton is for tsx type checking\n// It's not compitable with render function `h`\n// Currently we don't expose it as public\n// If there's any issue about this, we may expose it\n// Since most people use template, the type checking phase doesn't work as tsx\nexport const XButton = Button;\n// Also, we may make XButton a generic type which support `tag` prop\n// but currently vue doesn't export IntrinsicElementAttributes from runtime-dom\n// so we can't easily make an attr map by hand\n// just leave it for later","map":{"version":3,"names":["h","ref","computed","inject","defineComponent","watchEffect","useMemo","changeColor","createHoverColor","createPressedColor","buttonGroupInjectionKey","useRtl","isSafari","useConfig","useFormItem","useTheme","useThemeClass","NFadeInExpandTransition","NIconSwitchTransition","NBaseLoading","NBaseWave","call","color2Class","createKey","isSlotEmpty","resolveWrappedSlot","warnOnce","buttonLight","style","buttonProps","Object","assign","props","color","String","textColor","text","Boolean","block","loading","disabled","circle","size","ghost","round","secondary","tertiary","quaternary","strong","focusable","type","default","keyboard","tag","dashed","iconPlacement","attrType","bordered","onClick","Function","Array","nativeFocusBehavior","Button","name","setup","process","env","NODE_ENV","selfElRef","waveElRef","enterPressedRef","showBorderRef","NButtonGroup","mergedSizeRef","defaultSize","mergedSize","NFormItem","buttonGroupSize","formItemSize","value","mergedFocusableRef","handleMousedown","e","_a","preventDefault","focus","preventScroll","handleClick","play","handleKeyup","key","handleKeydown","handleBlur","inlineThemeDisabled","mergedClsPrefixRef","mergedRtlRef","themeRef","rtlEnabledRef","cssVarsRef","theme","common","cubicBezierEaseInOut","cubicBezierEaseOut","self","rippleDuration","opacityDisabled","fontWeight","fontWeightStrong","fontProps","colorProps","typeIsTertiary","typeIsDefault","mergedType","propTextColor","mergedTextColor","typeTextColor","textColorTertiary","isColoredType","alpha","Number","colorOpacitySecondary","colorSecondary","colorOpacitySecondaryHover","colorSecondaryHover","colorOpacitySecondaryPressed","colorSecondaryPressed","typeColor","mergedColor","colorTertiary","colorTertiaryHover","colorTertiaryPressed","colorQuaternary","colorQuaternaryHover","colorQuaternaryPressed","textColorPrimary","textColorHoverPrimary","textColorPressedPrimary","textColorFocusPrimary","textColorDisabledPrimary","borderProps","height","fontSize","padding","paddingRound","iconSize","borderRadius","iconMargin","waveOpacity","sizeProps","themeClassHandle","hash","undefined","mergedClsPrefix","mergedFocusable","showBorder","enterPressed","rtlEnabled","customColorCssVars","hoverColor","cssVars","themeClass","onRender","render","Component","children","$slots","class","tabindex","onBlur","onMousedown","onKeyup","onKeydown","width","icon","margin","clsPrefix","strokeWidth","role","XButton"],"sources":["/Users/krystal/Documents/GitHub/meetings_vue3/node_modules/naive-ui/es/button/src/Button.js"],"sourcesContent":["import { h, ref, computed, inject, defineComponent, watchEffect } from 'vue';\nimport { useMemo } from 'vooks';\nimport { changeColor } from 'seemly';\nimport { createHoverColor, createPressedColor } from '../../_utils/color/index';\nimport { buttonGroupInjectionKey } from '../../button-group/src/context';\nimport { useRtl } from '../../_mixins/use-rtl';\nimport { isSafari } from '../../_utils/env/browser';\nimport { useConfig, useFormItem, useTheme, useThemeClass } from '../../_mixins';\nimport { NFadeInExpandTransition, NIconSwitchTransition, NBaseLoading, NBaseWave } from '../../_internal';\nimport { call, color2Class, createKey, isSlotEmpty, resolveWrappedSlot, warnOnce } from '../../_utils';\nimport { buttonLight } from '../styles';\nimport style from './styles/index.cssr';\nexport const buttonProps = Object.assign(Object.assign({}, useTheme.props), { color: String, textColor: String, text: Boolean, block: Boolean, loading: Boolean, disabled: Boolean, circle: Boolean, size: String, ghost: Boolean, round: Boolean, secondary: Boolean, tertiary: Boolean, quaternary: Boolean, strong: Boolean, focusable: {\n        type: Boolean,\n        default: true\n    }, keyboard: {\n        type: Boolean,\n        default: true\n    }, tag: {\n        type: String,\n        default: 'button'\n    }, type: {\n        type: String,\n        default: 'default'\n    }, dashed: Boolean, iconPlacement: {\n        type: String,\n        default: 'left'\n    }, attrType: {\n        type: String,\n        default: 'button'\n    }, bordered: {\n        type: Boolean,\n        default: true\n    }, onClick: [Function, Array], nativeFocusBehavior: {\n        type: Boolean,\n        default: !isSafari\n    } });\nconst Button = defineComponent({\n    name: 'Button',\n    props: buttonProps,\n    setup(props) {\n        if (process.env.NODE_ENV !== 'production') {\n            watchEffect(() => {\n                const { dashed, ghost, text, secondary, tertiary, quaternary } = props;\n                if ((dashed || ghost || text) &&\n                    (secondary || tertiary || quaternary)) {\n                    warnOnce('button', \"`dashed`, `ghost` and `text` props can't be used along with `secondary`, `tertiary` and `quaterary` props.\");\n                }\n            });\n        }\n        const selfElRef = ref(null);\n        const waveElRef = ref(null);\n        const enterPressedRef = ref(false);\n        const showBorderRef = useMemo(() => {\n            return (!props.quaternary &&\n                !props.tertiary &&\n                !props.secondary &&\n                !props.text &&\n                (!props.color || props.ghost || props.dashed) &&\n                props.bordered);\n        });\n        const NButtonGroup = inject(buttonGroupInjectionKey, {});\n        const { mergedSizeRef } = useFormItem({}, {\n            defaultSize: 'medium',\n            mergedSize: (NFormItem) => {\n                const { size } = props;\n                if (size)\n                    return size;\n                const { size: buttonGroupSize } = NButtonGroup;\n                if (buttonGroupSize)\n                    return buttonGroupSize;\n                const { mergedSize: formItemSize } = NFormItem || {};\n                if (formItemSize) {\n                    return formItemSize.value;\n                }\n                return 'medium';\n            }\n        });\n        const mergedFocusableRef = computed(() => {\n            return props.focusable && !props.disabled;\n        });\n        const handleMousedown = (e) => {\n            var _a;\n            if (!mergedFocusableRef.value) {\n                e.preventDefault();\n            }\n            if (props.nativeFocusBehavior) {\n                return;\n            }\n            e.preventDefault();\n            // normally this won't be called if disabled (when tag is button)\n            // if not, we try to make it behave like a button\n            if (props.disabled) {\n                return;\n            }\n            if (mergedFocusableRef.value) {\n                (_a = selfElRef.value) === null || _a === void 0 ? void 0 : _a.focus({ preventScroll: true });\n            }\n        };\n        const handleClick = (e) => {\n            var _a;\n            if (!props.disabled && !props.loading) {\n                const { onClick } = props;\n                if (onClick)\n                    call(onClick, e);\n                if (!props.text) {\n                    (_a = waveElRef.value) === null || _a === void 0 ? void 0 : _a.play();\n                }\n            }\n        };\n        const handleKeyup = (e) => {\n            switch (e.key) {\n                case 'Enter':\n                    if (!props.keyboard) {\n                        return;\n                    }\n                    enterPressedRef.value = false;\n            }\n        };\n        const handleKeydown = (e) => {\n            switch (e.key) {\n                case 'Enter':\n                    if (!props.keyboard || props.loading) {\n                        e.preventDefault();\n                        return;\n                    }\n                    enterPressedRef.value = true;\n            }\n        };\n        const handleBlur = () => {\n            enterPressedRef.value = false;\n        };\n        const { inlineThemeDisabled, mergedClsPrefixRef, mergedRtlRef } = useConfig(props);\n        const themeRef = useTheme('Button', '-button', style, buttonLight, props, mergedClsPrefixRef);\n        const rtlEnabledRef = useRtl('Button', mergedRtlRef, mergedClsPrefixRef);\n        const cssVarsRef = computed(() => {\n            const theme = themeRef.value;\n            const { common: { cubicBezierEaseInOut, cubicBezierEaseOut }, self } = theme;\n            const { rippleDuration, opacityDisabled, fontWeight, fontWeightStrong } = self;\n            const size = mergedSizeRef.value;\n            const { dashed, type, ghost, text, color, round, circle, textColor, secondary, tertiary, quaternary, strong } = props;\n            // font\n            const fontProps = {\n                'font-weight': strong ? fontWeightStrong : fontWeight\n            };\n            // color\n            let colorProps = {\n                '--n-color': 'initial',\n                '--n-color-hover': 'initial',\n                '--n-color-pressed': 'initial',\n                '--n-color-focus': 'initial',\n                '--n-color-disabled': 'initial',\n                '--n-ripple-color': 'initial',\n                '--n-text-color': 'initial',\n                '--n-text-color-hover': 'initial',\n                '--n-text-color-pressed': 'initial',\n                '--n-text-color-focus': 'initial',\n                '--n-text-color-disabled': 'initial'\n            };\n            const typeIsTertiary = type === 'tertiary';\n            const typeIsDefault = type === 'default';\n            const mergedType = typeIsTertiary ? 'default' : type;\n            if (text) {\n                const propTextColor = textColor || color;\n                const mergedTextColor = propTextColor || self[createKey('textColorText', mergedType)];\n                colorProps = {\n                    '--n-color': '#0000',\n                    '--n-color-hover': '#0000',\n                    '--n-color-pressed': '#0000',\n                    '--n-color-focus': '#0000',\n                    '--n-color-disabled': '#0000',\n                    '--n-ripple-color': '#0000',\n                    '--n-text-color': mergedTextColor,\n                    '--n-text-color-hover': propTextColor\n                        ? createHoverColor(propTextColor)\n                        : self[createKey('textColorTextHover', mergedType)],\n                    '--n-text-color-pressed': propTextColor\n                        ? createPressedColor(propTextColor)\n                        : self[createKey('textColorTextPressed', mergedType)],\n                    '--n-text-color-focus': propTextColor\n                        ? createHoverColor(propTextColor)\n                        : self[createKey('textColorTextHover', mergedType)],\n                    '--n-text-color-disabled': propTextColor ||\n                        self[createKey('textColorTextDisabled', mergedType)]\n                };\n            }\n            else if (ghost || dashed) {\n                const mergedTextColor = textColor || color;\n                colorProps = {\n                    '--n-color': '#0000',\n                    '--n-color-hover': '#0000',\n                    '--n-color-pressed': '#0000',\n                    '--n-color-focus': '#0000',\n                    '--n-color-disabled': '#0000',\n                    '--n-ripple-color': color || self[createKey('rippleColor', mergedType)],\n                    '--n-text-color': mergedTextColor || self[createKey('textColorGhost', mergedType)],\n                    '--n-text-color-hover': mergedTextColor\n                        ? createHoverColor(mergedTextColor)\n                        : self[createKey('textColorGhostHover', mergedType)],\n                    '--n-text-color-pressed': mergedTextColor\n                        ? createPressedColor(mergedTextColor)\n                        : self[createKey('textColorGhostPressed', mergedType)],\n                    '--n-text-color-focus': mergedTextColor\n                        ? createHoverColor(mergedTextColor)\n                        : self[createKey('textColorGhostHover', mergedType)],\n                    '--n-text-color-disabled': mergedTextColor ||\n                        self[createKey('textColorGhostDisabled', mergedType)]\n                };\n            }\n            else if (secondary) {\n                const typeTextColor = typeIsDefault\n                    ? self.textColor\n                    : typeIsTertiary\n                        ? self.textColorTertiary\n                        : self[createKey('color', mergedType)];\n                const mergedTextColor = color || typeTextColor;\n                const isColoredType = type !== 'default' && type !== 'tertiary';\n                colorProps = {\n                    '--n-color': isColoredType\n                        ? changeColor(mergedTextColor, {\n                            alpha: Number(self.colorOpacitySecondary)\n                        })\n                        : self.colorSecondary,\n                    '--n-color-hover': isColoredType\n                        ? changeColor(mergedTextColor, {\n                            alpha: Number(self.colorOpacitySecondaryHover)\n                        })\n                        : self.colorSecondaryHover,\n                    '--n-color-pressed': isColoredType\n                        ? changeColor(mergedTextColor, {\n                            alpha: Number(self.colorOpacitySecondaryPressed)\n                        })\n                        : self.colorSecondaryPressed,\n                    '--n-color-focus': isColoredType\n                        ? changeColor(mergedTextColor, {\n                            alpha: Number(self.colorOpacitySecondaryHover)\n                        })\n                        : self.colorSecondaryHover,\n                    '--n-color-disabled': self.colorSecondary,\n                    '--n-ripple-color': '#0000',\n                    '--n-text-color': mergedTextColor,\n                    '--n-text-color-hover': mergedTextColor,\n                    '--n-text-color-pressed': mergedTextColor,\n                    '--n-text-color-focus': mergedTextColor,\n                    '--n-text-color-disabled': mergedTextColor\n                };\n            }\n            else if (tertiary || quaternary) {\n                const typeColor = typeIsDefault\n                    ? self.textColor\n                    : typeIsTertiary\n                        ? self.textColorTertiary\n                        : self[createKey('color', mergedType)];\n                const mergedColor = color || typeColor;\n                if (tertiary) {\n                    colorProps['--n-color'] = self.colorTertiary;\n                    colorProps['--n-color-hover'] = self.colorTertiaryHover;\n                    colorProps['--n-color-pressed'] = self.colorTertiaryPressed;\n                    colorProps['--n-color-focus'] = self.colorSecondaryHover;\n                    colorProps['--n-color-disabled'] = self.colorTertiary;\n                }\n                else {\n                    colorProps['--n-color'] = self.colorQuaternary;\n                    colorProps['--n-color-hover'] = self.colorQuaternaryHover;\n                    colorProps['--n-color-pressed'] = self.colorQuaternaryPressed;\n                    colorProps['--n-color-focus'] = self.colorQuaternaryHover;\n                    colorProps['--n-color-disabled'] = self.colorQuaternary;\n                }\n                colorProps['--n-ripple-color'] = '#0000';\n                colorProps['--n-text-color'] = mergedColor;\n                colorProps['--n-text-color-hover'] = mergedColor;\n                colorProps['--n-text-color-pressed'] = mergedColor;\n                colorProps['--n-text-color-focus'] = mergedColor;\n                colorProps['--n-text-color-disabled'] = mergedColor;\n            }\n            else {\n                colorProps = {\n                    '--n-color': color || self[createKey('color', mergedType)],\n                    '--n-color-hover': color\n                        ? createHoverColor(color)\n                        : self[createKey('colorHover', mergedType)],\n                    '--n-color-pressed': color\n                        ? createPressedColor(color)\n                        : self[createKey('colorPressed', mergedType)],\n                    '--n-color-focus': color\n                        ? createHoverColor(color)\n                        : self[createKey('colorFocus', mergedType)],\n                    '--n-color-disabled': color || self[createKey('colorDisabled', mergedType)],\n                    '--n-ripple-color': color || self[createKey('rippleColor', mergedType)],\n                    '--n-text-color': textColor ||\n                        (color\n                            ? self.textColorPrimary\n                            : typeIsTertiary\n                                ? self.textColorTertiary\n                                : self[createKey('textColor', mergedType)]),\n                    '--n-text-color-hover': textColor ||\n                        (color\n                            ? self.textColorHoverPrimary\n                            : self[createKey('textColorHover', mergedType)]),\n                    '--n-text-color-pressed': textColor ||\n                        (color\n                            ? self.textColorPressedPrimary\n                            : self[createKey('textColorPressed', mergedType)]),\n                    '--n-text-color-focus': textColor ||\n                        (color\n                            ? self.textColorFocusPrimary\n                            : self[createKey('textColorFocus', mergedType)]),\n                    '--n-text-color-disabled': textColor ||\n                        (color\n                            ? self.textColorDisabledPrimary\n                            : self[createKey('textColorDisabled', mergedType)])\n                };\n            }\n            // border\n            let borderProps = {\n                '--n-border': 'initial',\n                '--n-border-hover': 'initial',\n                '--n-border-pressed': 'initial',\n                '--n-border-focus': 'initial',\n                '--n-border-disabled': 'initial'\n            };\n            if (text) {\n                borderProps = {\n                    '--n-border': 'none',\n                    '--n-border-hover': 'none',\n                    '--n-border-pressed': 'none',\n                    '--n-border-focus': 'none',\n                    '--n-border-disabled': 'none'\n                };\n            }\n            else {\n                borderProps = {\n                    '--n-border': self[createKey('border', mergedType)],\n                    '--n-border-hover': self[createKey('borderHover', mergedType)],\n                    '--n-border-pressed': self[createKey('borderPressed', mergedType)],\n                    '--n-border-focus': self[createKey('borderFocus', mergedType)],\n                    '--n-border-disabled': self[createKey('borderDisabled', mergedType)]\n                };\n            }\n            // size\n            const { [createKey('height', size)]: height, [createKey('fontSize', size)]: fontSize, [createKey('padding', size)]: padding, [createKey('paddingRound', size)]: paddingRound, [createKey('iconSize', size)]: iconSize, [createKey('borderRadius', size)]: borderRadius, [createKey('iconMargin', size)]: iconMargin, waveOpacity } = self;\n            const sizeProps = {\n                '--n-width': circle && !text ? height : 'initial',\n                '--n-height': text ? 'initial' : height,\n                '--n-font-size': fontSize,\n                '--n-padding': circle\n                    ? 'initial'\n                    : text\n                        ? 'initial'\n                        : round\n                            ? paddingRound\n                            : padding,\n                '--n-icon-size': iconSize,\n                '--n-icon-margin': iconMargin,\n                '--n-border-radius': text\n                    ? 'initial'\n                    : circle || round\n                        ? height\n                        : borderRadius\n            };\n            return Object.assign(Object.assign(Object.assign(Object.assign({ '--n-bezier': cubicBezierEaseInOut, '--n-bezier-ease-out': cubicBezierEaseOut, '--n-ripple-duration': rippleDuration, '--n-opacity-disabled': opacityDisabled, '--n-wave-opacity': waveOpacity }, fontProps), colorProps), borderProps), sizeProps);\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('button', computed(() => {\n                let hash = '';\n                const { dashed, type, ghost, text, color, round, circle, textColor, secondary, tertiary, quaternary, strong } = props;\n                if (dashed)\n                    hash += 'a';\n                if (ghost)\n                    hash += 'b';\n                if (text)\n                    hash += 'c';\n                if (round)\n                    hash += 'd';\n                if (circle)\n                    hash += 'e';\n                if (secondary)\n                    hash += 'f';\n                if (tertiary)\n                    hash += 'g';\n                if (quaternary)\n                    hash += 'h';\n                if (strong)\n                    hash += 'i';\n                if (color)\n                    hash += 'j' + color2Class(color);\n                if (textColor)\n                    hash += 'k' + color2Class(textColor);\n                const { value: size } = mergedSizeRef;\n                hash += 'l' + size[0];\n                hash += 'm' + type[0];\n                return hash;\n            }), cssVarsRef, props)\n            : undefined;\n        return {\n            selfElRef,\n            waveElRef,\n            mergedClsPrefix: mergedClsPrefixRef,\n            mergedFocusable: mergedFocusableRef,\n            mergedSize: mergedSizeRef,\n            showBorder: showBorderRef,\n            enterPressed: enterPressedRef,\n            rtlEnabled: rtlEnabledRef,\n            handleMousedown,\n            handleKeydown,\n            handleBlur,\n            handleKeyup,\n            handleClick,\n            customColorCssVars: computed(() => {\n                const { color } = props;\n                if (!color)\n                    return null;\n                const hoverColor = createHoverColor(color);\n                return {\n                    '--n-border-color': color,\n                    '--n-border-color-hover': hoverColor,\n                    '--n-border-color-pressed': createPressedColor(color),\n                    '--n-border-color-focus': hoverColor,\n                    '--n-border-color-disabled': color\n                };\n            }),\n            cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n            themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n            onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n        };\n    },\n    render() {\n        const { mergedClsPrefix, tag: Component, onRender } = this;\n        onRender === null || onRender === void 0 ? void 0 : onRender();\n        const children = resolveWrappedSlot(this.$slots.default, (children) => children && (h(\"span\", { class: `${mergedClsPrefix}-button__content` }, children)));\n        return (h(Component, { ref: \"selfElRef\", class: [\n                this.themeClass,\n                `${mergedClsPrefix}-button`,\n                `${mergedClsPrefix}-button--${this.type}-type`,\n                `${mergedClsPrefix}-button--${this.mergedSize}-type`,\n                this.rtlEnabled && `${mergedClsPrefix}-button--rtl`,\n                this.disabled && `${mergedClsPrefix}-button--disabled`,\n                this.block && `${mergedClsPrefix}-button--block`,\n                this.enterPressed && `${mergedClsPrefix}-button--pressed`,\n                !this.text && this.dashed && `${mergedClsPrefix}-button--dashed`,\n                this.color && `${mergedClsPrefix}-button--color`,\n                this.secondary && `${mergedClsPrefix}-button--secondary`,\n                this.loading && `${mergedClsPrefix}-button--loading`,\n                this.ghost && `${mergedClsPrefix}-button--ghost` // required for button group border collapse\n            ], tabindex: this.mergedFocusable ? 0 : -1, type: this.attrType, style: this.cssVars, disabled: this.disabled, onClick: this.handleClick, onBlur: this.handleBlur, onMousedown: this.handleMousedown, onKeyup: this.handleKeyup, onKeydown: this.handleKeydown },\n            this.iconPlacement === 'right' && children,\n            h(NFadeInExpandTransition, { width: true }, {\n                default: () => resolveWrappedSlot(this.$slots.icon, (children) => (this.loading || children) && (h(\"span\", { class: `${mergedClsPrefix}-button__icon`, style: {\n                        margin: isSlotEmpty(this.$slots.default) ? '0' : ''\n                    } },\n                    h(NIconSwitchTransition, null, {\n                        default: () => this.loading ? (h(NBaseLoading, { clsPrefix: mergedClsPrefix, key: \"loading\", class: `${mergedClsPrefix}-icon-slot`, strokeWidth: 20 })) : (h(\"div\", { key: \"icon\", class: `${mergedClsPrefix}-icon-slot`, role: \"none\" }, children))\n                    }))))\n            }),\n            this.iconPlacement === 'left' && children,\n            !this.text ? (h(NBaseWave, { ref: \"waveElRef\", clsPrefix: mergedClsPrefix })) : null,\n            this.showBorder ? (h(\"div\", { \"aria-hidden\": true, class: `${mergedClsPrefix}-button__border`, style: this.customColorCssVars })) : null,\n            this.showBorder ? (h(\"div\", { \"aria-hidden\": true, class: `${mergedClsPrefix}-button__state-border`, style: this.customColorCssVars })) : null));\n    }\n});\nexport default Button;\n// XButton is for tsx type checking\n// It's not compitable with render function `h`\n// Currently we don't expose it as public\n// If there's any issue about this, we may expose it\n// Since most people use template, the type checking phase doesn't work as tsx\nexport const XButton = Button;\n// Also, we may make XButton a generic type which support `tag` prop\n// but currently vue doesn't export IntrinsicElementAttributes from runtime-dom\n// so we can't easily make an attr map by hand\n// just leave it for later\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}