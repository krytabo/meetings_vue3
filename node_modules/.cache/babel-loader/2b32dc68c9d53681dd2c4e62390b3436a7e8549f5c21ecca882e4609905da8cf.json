{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { h, ref, defineComponent, inject, watchEffect, onUnmounted, computed, Fragment } from 'vue';\nimport { pxfy, repeat } from 'seemly';\nimport { VirtualList, VResizeObserver } from 'vueuc';\nimport { useMemo } from 'vooks';\nimport { cssrAnchorMetaName } from '../../../_mixins/common';\nimport { c } from '../../../_utils/cssr';\nimport { NScrollbar } from '../../../_internal';\nimport { formatLength, resolveSlot, warn } from '../../../_utils';\nimport { NEmpty } from '../../../empty';\nimport { dataTableInjectionKey } from '../interface';\nimport { createRowClassName, getColKey, isColumnSorting } from '../utils';\nimport Cell from './Cell';\nimport ExpandTrigger from './ExpandTrigger';\nimport RenderSafeCheckbox from './BodyCheckbox';\nimport RenderSafeRadio from './BodyRadio';\nimport TableHeader from './Header';\nfunction flatten(rowInfos, expandedRowKeys) {\n  const fRows = [];\n  function traverse(rs, rootIndex) {\n    rs.forEach(r => {\n      if (r.children && expandedRowKeys.has(r.key)) {\n        fRows.push({\n          tmNode: r,\n          striped: false,\n          key: r.key,\n          index: rootIndex\n        });\n        traverse(r.children, rootIndex);\n      } else {\n        fRows.push({\n          key: r.key,\n          tmNode: r,\n          striped: false,\n          index: rootIndex\n        });\n      }\n    });\n  }\n  rowInfos.forEach(rowInfo => {\n    fRows.push(rowInfo);\n    const {\n      children\n    } = rowInfo.tmNode;\n    if (children && expandedRowKeys.has(rowInfo.key)) {\n      traverse(children, rowInfo.index);\n    }\n  });\n  return fRows;\n}\nconst VirtualListItemWrapper = defineComponent({\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    id: {\n      type: String,\n      required: true\n    },\n    cols: {\n      type: Array,\n      required: true\n    },\n    onMouseenter: Function,\n    onMouseleave: Function\n  },\n  render() {\n    const {\n      clsPrefix,\n      id,\n      cols,\n      onMouseenter,\n      onMouseleave\n    } = this;\n    return h(\"table\", {\n      style: {\n        tableLayout: 'fixed'\n      },\n      class: `${clsPrefix}-data-table-table`,\n      onMouseenter: onMouseenter,\n      onMouseleave: onMouseleave\n    }, h(\"colgroup\", null, cols.map(col => h(\"col\", {\n      key: col.key,\n      style: col.style\n    }))), h(\"tbody\", {\n      \"data-n-id\": id,\n      class: `${clsPrefix}-data-table-tbody`\n    }, this.$slots));\n  }\n});\nexport default defineComponent({\n  name: 'DataTableBody',\n  props: {\n    onResize: Function,\n    showHeader: Boolean,\n    flexHeight: Boolean,\n    bodyStyle: Object\n  },\n  setup(props) {\n    const {\n      slots: dataTableSlots,\n      bodyWidthRef,\n      mergedExpandedRowKeysRef,\n      mergedClsPrefixRef,\n      mergedThemeRef,\n      scrollXRef,\n      colsRef,\n      paginatedDataRef,\n      rawPaginatedDataRef,\n      fixedColumnLeftMapRef,\n      fixedColumnRightMapRef,\n      mergedCurrentPageRef,\n      rowClassNameRef,\n      leftActiveFixedColKeyRef,\n      leftActiveFixedChildrenColKeysRef,\n      rightActiveFixedColKeyRef,\n      rightActiveFixedChildrenColKeysRef,\n      renderExpandRef,\n      hoverKeyRef,\n      summaryRef,\n      mergedSortStateRef,\n      virtualScrollRef,\n      componentId,\n      scrollPartRef,\n      mergedTableLayoutRef,\n      childTriggerColIndexRef,\n      indentRef,\n      rowPropsRef,\n      maxHeightRef,\n      stripedRef,\n      loadingRef,\n      onLoadRef,\n      loadingKeySetRef,\n      expandableRef,\n      stickyExpandedRowsRef,\n      renderExpandIconRef,\n      summaryPlacementRef,\n      treeMateRef,\n      setHeaderScrollLeft,\n      doUpdateExpandedRowKeys,\n      handleTableBodyScroll,\n      doCheck,\n      doUncheck,\n      renderCell\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    } = inject(dataTableInjectionKey);\n    const scrollbarInstRef = ref(null);\n    const virtualListRef = ref(null);\n    const emptyElRef = ref(null);\n    const emptyRef = useMemo(() => paginatedDataRef.value.length === 0);\n    // If header is not inside & empty is displayed, no table part would be\n    // shown. So to collect a body width, we need to put a ref on empty element\n    const shouldDisplaySomeTablePartRef = useMemo(() => props.showHeader || !emptyRef.value);\n    // If no body is shown, we shouldn't show scrollbar\n    const bodyShowHeaderOnlyRef = useMemo(() => {\n      return props.showHeader || emptyRef.value;\n    });\n    let lastSelectedKey = '';\n    const mergedExpandedRowKeySetRef = computed(() => {\n      return new Set(mergedExpandedRowKeysRef.value);\n    });\n    function getRowInfo(key) {\n      var _a;\n      return (_a = treeMateRef.value.getNode(key)) === null || _a === void 0 ? void 0 : _a.rawNode;\n    }\n    function handleCheckboxUpdateChecked(tmNode, checked, shiftKey) {\n      const rowInfo = getRowInfo(tmNode.key);\n      if (!rowInfo) {\n        warn('data-table', `fail to get row data with key ${tmNode.key}`);\n        return;\n      }\n      if (shiftKey) {\n        const lastIndex = paginatedDataRef.value.findIndex(item => item.key === lastSelectedKey);\n        if (lastIndex !== -1) {\n          const currentIndex = paginatedDataRef.value.findIndex(item => item.key === tmNode.key);\n          const start = Math.min(lastIndex, currentIndex);\n          const end = Math.max(lastIndex, currentIndex);\n          const rowKeysToCheck = [];\n          paginatedDataRef.value.slice(start, end + 1).forEach(r => {\n            if (!r.disabled) {\n              rowKeysToCheck.push(r.key);\n            }\n          });\n          if (checked) {\n            doCheck(rowKeysToCheck, false, rowInfo);\n          } else {\n            doUncheck(rowKeysToCheck, rowInfo);\n          }\n          lastSelectedKey = tmNode.key;\n          return;\n        }\n      }\n      if (checked) {\n        doCheck(tmNode.key, false, rowInfo);\n      } else {\n        doUncheck(tmNode.key, rowInfo);\n      }\n      lastSelectedKey = tmNode.key;\n    }\n    function handleRadioUpdateChecked(tmNode) {\n      const rowInfo = getRowInfo(tmNode.key);\n      if (!rowInfo) {\n        warn('data-table', `fail to get row data with key ${tmNode.key}`);\n        return;\n      }\n      doCheck(tmNode.key, true, rowInfo);\n    }\n    function getScrollContainer() {\n      if (!shouldDisplaySomeTablePartRef.value) {\n        const {\n          value: emptyEl\n        } = emptyElRef;\n        if (emptyEl) {\n          return emptyEl;\n        } else {\n          return null;\n        }\n      }\n      if (virtualScrollRef.value) {\n        return virtualListContainer();\n      }\n      const {\n        value\n      } = scrollbarInstRef;\n      if (value) return value.containerRef;\n      return null;\n    }\n    // For table row with children, tmNode is non-nullable\n    // For table row is expandable but is not tree data, tmNode is null\n    function handleUpdateExpanded(key, tmNode) {\n      var _a;\n      if (loadingKeySetRef.value.has(key)) return;\n      const {\n        value: mergedExpandedRowKeys\n      } = mergedExpandedRowKeysRef;\n      const index = mergedExpandedRowKeys.indexOf(key);\n      const nextExpandedKeys = Array.from(mergedExpandedRowKeys);\n      if (~index) {\n        nextExpandedKeys.splice(index, 1);\n        doUpdateExpandedRowKeys(nextExpandedKeys);\n      } else {\n        if (tmNode && !tmNode.isLeaf && !tmNode.shallowLoaded) {\n          loadingKeySetRef.value.add(key);\n          void ((_a = onLoadRef.value) === null || _a === void 0 ? void 0 : _a.call(onLoadRef, tmNode.rawNode).then(() => {\n            const {\n              value: futureMergedExpandedRowKeys\n            } = mergedExpandedRowKeysRef;\n            const futureNextExpandedKeys = Array.from(futureMergedExpandedRowKeys);\n            const index = futureNextExpandedKeys.indexOf(key);\n            if (!~index) {\n              futureNextExpandedKeys.push(key);\n            }\n            doUpdateExpandedRowKeys(futureNextExpandedKeys);\n          }).finally(() => {\n            loadingKeySetRef.value.delete(key);\n          }));\n        } else {\n          nextExpandedKeys.push(key);\n          doUpdateExpandedRowKeys(nextExpandedKeys);\n        }\n      }\n    }\n    function handleMouseleaveTable() {\n      hoverKeyRef.value = null;\n    }\n    function handleMouseenterTable() {\n      scrollPartRef.value = 'body';\n    }\n    function virtualListContainer() {\n      const {\n        value\n      } = virtualListRef;\n      return value === null || value === void 0 ? void 0 : value.listElRef;\n    }\n    function virtualListContent() {\n      const {\n        value\n      } = virtualListRef;\n      return value === null || value === void 0 ? void 0 : value.itemsElRef;\n    }\n    function handleVirtualListScroll(e) {\n      var _a;\n      handleTableBodyScroll(e);\n      (_a = scrollbarInstRef.value) === null || _a === void 0 ? void 0 : _a.sync();\n    }\n    function handleVirtualListResize(e) {\n      var _a;\n      const {\n        onResize\n      } = props;\n      if (onResize) onResize(e);\n      (_a = scrollbarInstRef.value) === null || _a === void 0 ? void 0 : _a.sync();\n    }\n    const exposedMethods = {\n      getScrollContainer,\n      scrollTo(arg0, arg1) {\n        var _a, _b;\n        if (virtualScrollRef.value) {\n          (_a = virtualListRef.value) === null || _a === void 0 ? void 0 : _a.scrollTo(arg0, arg1);\n        } else {\n          (_b = scrollbarInstRef.value) === null || _b === void 0 ? void 0 : _b.scrollTo(arg0, arg1);\n        }\n      }\n    };\n    // manually control shadow style to avoid rerender\n    const style = c([({\n      props: cProps\n    }) => {\n      const createActiveLeftFixedStyle = leftActiveFixedColKey => {\n        if (leftActiveFixedColKey === null) return null;\n        return c(`[data-n-id=\"${cProps.componentId}\"] [data-col-key=\"${leftActiveFixedColKey}\"]::after`, {\n          boxShadow: 'var(--n-box-shadow-after)'\n        });\n      };\n      const createActiveRightFixedStyle = rightActiveFixedColKey => {\n        if (rightActiveFixedColKey === null) return null;\n        return c(`[data-n-id=\"${cProps.componentId}\"] [data-col-key=\"${rightActiveFixedColKey}\"]::before`, {\n          boxShadow: 'var(--n-box-shadow-before)'\n        });\n      };\n      return c([createActiveLeftFixedStyle(cProps.leftActiveFixedColKey), createActiveRightFixedStyle(cProps.rightActiveFixedColKey), cProps.leftActiveFixedChildrenColKeys.map(leftActiveFixedColKey => createActiveLeftFixedStyle(leftActiveFixedColKey)), cProps.rightActiveFixedChildrenColKeys.map(rightActiveFixedColKey => createActiveRightFixedStyle(rightActiveFixedColKey))]);\n    }]);\n    let fixedStyleMounted = false;\n    watchEffect(() => {\n      const {\n        value: leftActiveFixedColKey\n      } = leftActiveFixedColKeyRef;\n      const {\n        value: leftActiveFixedChildrenColKeys\n      } = leftActiveFixedChildrenColKeysRef;\n      const {\n        value: rightActiveFixedColKey\n      } = rightActiveFixedColKeyRef;\n      const {\n        value: rightActiveFixedChildrenColKeys\n      } = rightActiveFixedChildrenColKeysRef;\n      if (!fixedStyleMounted && leftActiveFixedColKey === null && rightActiveFixedColKey === null) {\n        return;\n      }\n      const cProps = {\n        leftActiveFixedColKey,\n        leftActiveFixedChildrenColKeys,\n        rightActiveFixedColKey,\n        rightActiveFixedChildrenColKeys,\n        componentId\n      };\n      style.mount({\n        id: `n-${componentId}`,\n        force: true,\n        props: cProps,\n        anchorMetaName: cssrAnchorMetaName\n      });\n      fixedStyleMounted = true;\n    });\n    onUnmounted(() => {\n      style.unmount({\n        id: `n-${componentId}`\n      });\n    });\n    return Object.assign({\n      bodyWidth: bodyWidthRef,\n      summaryPlacement: summaryPlacementRef,\n      dataTableSlots,\n      componentId,\n      scrollbarInstRef,\n      virtualListRef,\n      emptyElRef,\n      summary: summaryRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedTheme: mergedThemeRef,\n      scrollX: scrollXRef,\n      cols: colsRef,\n      loading: loadingRef,\n      bodyShowHeaderOnly: bodyShowHeaderOnlyRef,\n      shouldDisplaySomeTablePart: shouldDisplaySomeTablePartRef,\n      empty: emptyRef,\n      paginatedDataAndInfo: computed(() => {\n        const {\n          value: striped\n        } = stripedRef;\n        let hasChildren = false;\n        const data = paginatedDataRef.value.map(striped ? (tmNode, index) => {\n          if (!tmNode.isLeaf) hasChildren = true;\n          return {\n            tmNode,\n            key: tmNode.key,\n            striped: index % 2 === 1,\n            index\n          };\n        } : (tmNode, index) => {\n          if (!tmNode.isLeaf) hasChildren = true;\n          return {\n            tmNode,\n            key: tmNode.key,\n            striped: false,\n            index\n          };\n        });\n        return {\n          data,\n          hasChildren\n        };\n      }),\n      rawPaginatedData: rawPaginatedDataRef,\n      fixedColumnLeftMap: fixedColumnLeftMapRef,\n      fixedColumnRightMap: fixedColumnRightMapRef,\n      currentPage: mergedCurrentPageRef,\n      rowClassName: rowClassNameRef,\n      renderExpand: renderExpandRef,\n      mergedExpandedRowKeySet: mergedExpandedRowKeySetRef,\n      hoverKey: hoverKeyRef,\n      mergedSortState: mergedSortStateRef,\n      virtualScroll: virtualScrollRef,\n      mergedTableLayout: mergedTableLayoutRef,\n      childTriggerColIndex: childTriggerColIndexRef,\n      indent: indentRef,\n      rowProps: rowPropsRef,\n      maxHeight: maxHeightRef,\n      loadingKeySet: loadingKeySetRef,\n      expandable: expandableRef,\n      stickyExpandedRows: stickyExpandedRowsRef,\n      renderExpandIcon: renderExpandIconRef,\n      setHeaderScrollLeft,\n      handleMouseenterTable,\n      handleVirtualListScroll,\n      handleVirtualListResize,\n      handleMouseleaveTable,\n      virtualListContainer,\n      virtualListContent,\n      handleTableBodyScroll,\n      handleCheckboxUpdateChecked,\n      handleRadioUpdateChecked,\n      handleUpdateExpanded,\n      renderCell\n    }, exposedMethods);\n  },\n  render() {\n    const {\n      mergedTheme,\n      scrollX,\n      mergedClsPrefix,\n      virtualScroll,\n      maxHeight,\n      mergedTableLayout,\n      flexHeight,\n      loadingKeySet,\n      onResize,\n      setHeaderScrollLeft\n    } = this;\n    const scrollable = scrollX !== undefined || maxHeight !== undefined || flexHeight;\n    // For a basic table with auto layout whose content may overflow we will\n    // make it scrollable, which differs from browser's native behavior.\n    // For native behavior, see\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout\n    const isBasicAutoLayout = !scrollable && mergedTableLayout === 'auto';\n    const xScrollable = scrollX !== undefined || isBasicAutoLayout;\n    const contentStyle = {\n      minWidth: formatLength(scrollX) || '100%'\n    };\n    if (scrollX) contentStyle.width = '100%';\n    const tableNode = h(NScrollbar, {\n      ref: \"scrollbarInstRef\",\n      scrollable: scrollable || isBasicAutoLayout,\n      class: `${mergedClsPrefix}-data-table-base-table-body`,\n      style: this.bodyStyle,\n      theme: mergedTheme.peers.Scrollbar,\n      themeOverrides: mergedTheme.peerOverrides.Scrollbar,\n      contentStyle: contentStyle,\n      container: virtualScroll ? this.virtualListContainer : undefined,\n      content: virtualScroll ? this.virtualListContent : undefined,\n      horizontalRailStyle: {\n        zIndex: 3\n      },\n      verticalRailStyle: {\n        zIndex: 3\n      },\n      xScrollable: xScrollable,\n      onScroll: virtualScroll ? undefined : this.handleTableBodyScroll,\n      internalOnUpdateScrollLeft: setHeaderScrollLeft,\n      onResize: onResize\n    }, {\n      default: () => {\n        // coordinate to pass if there are cells that cross row & col\n        const cordToPass = {};\n        // coordinate to related hover keys\n        const cordKey = {};\n        const {\n          cols,\n          paginatedDataAndInfo,\n          mergedTheme,\n          fixedColumnLeftMap,\n          fixedColumnRightMap,\n          currentPage,\n          rowClassName,\n          mergedSortState,\n          mergedExpandedRowKeySet,\n          stickyExpandedRows,\n          componentId,\n          childTriggerColIndex,\n          expandable,\n          rowProps,\n          handleMouseenterTable,\n          handleMouseleaveTable,\n          renderExpand,\n          summary,\n          handleCheckboxUpdateChecked,\n          handleRadioUpdateChecked,\n          handleUpdateExpanded\n        } = this;\n        const {\n          length: colCount\n        } = cols;\n        let mergedData;\n        // if there is children in data, we should expand mergedData first\n        const {\n          data: paginatedData,\n          hasChildren\n        } = paginatedDataAndInfo;\n        const mergedPaginationData = hasChildren ? flatten(paginatedData, mergedExpandedRowKeySet) : paginatedData;\n        if (summary) {\n          const summaryRows = summary(this.rawPaginatedData);\n          if (Array.isArray(summaryRows)) {\n            const summaryRowData = summaryRows.map((row, i) => ({\n              isSummaryRow: true,\n              key: `__n_summary__${i}`,\n              tmNode: {\n                rawNode: row,\n                disabled: true\n              },\n              index: -1\n            }));\n            mergedData = this.summaryPlacement === 'top' ? [...summaryRowData, ...mergedPaginationData] : [...mergedPaginationData, ...summaryRowData];\n          } else {\n            const summaryRowData = {\n              isSummaryRow: true,\n              key: '__n_summary__',\n              tmNode: {\n                rawNode: summaryRows,\n                disabled: true\n              },\n              index: -1\n            };\n            mergedData = this.summaryPlacement === 'top' ? [summaryRowData, ...mergedPaginationData] : [...mergedPaginationData, summaryRowData];\n          }\n        } else {\n          mergedData = mergedPaginationData;\n        }\n        const indentStyle = hasChildren ? {\n          width: pxfy(this.indent)\n        } : undefined;\n        // Tile the data of the expanded row\n        const displayedData = [];\n        mergedData.forEach(rowInfo => {\n          if (renderExpand && mergedExpandedRowKeySet.has(rowInfo.key) && (!expandable || expandable(rowInfo.tmNode.rawNode))) {\n            displayedData.push(rowInfo, {\n              isExpandedRow: true,\n              key: `${rowInfo.key}-expand`,\n              tmNode: rowInfo.tmNode,\n              index: rowInfo.index\n            });\n          } else {\n            displayedData.push(rowInfo);\n          }\n        });\n        const {\n          length: rowCount\n        } = displayedData;\n        const rowIndexToKey = {};\n        paginatedData.forEach(({\n          tmNode\n        }, rowIndex) => {\n          rowIndexToKey[rowIndex] = tmNode.key;\n        });\n        const bodyWidth = stickyExpandedRows ? this.bodyWidth : null;\n        const bodyWidthPx = bodyWidth === null ? undefined : `${bodyWidth}px`;\n        const renderRow = (rowInfo, displayedRowIndex, isVirtual) => {\n          const {\n            index: actualRowIndex\n          } = rowInfo;\n          if ('isExpandedRow' in rowInfo) {\n            const {\n              tmNode: {\n                key,\n                rawNode\n              }\n            } = rowInfo;\n            return h(\"tr\", {\n              class: `${mergedClsPrefix}-data-table-tr`,\n              key: `${key}__expand`\n            }, h(\"td\", {\n              class: [`${mergedClsPrefix}-data-table-td`, `${mergedClsPrefix}-data-table-td--last-col`, displayedRowIndex + 1 === rowCount && `${mergedClsPrefix}-data-table-td--last-row`],\n              colspan: colCount\n            }, stickyExpandedRows ? h(\"div\", {\n              class: `${mergedClsPrefix}-data-table-expand`,\n              style: {\n                width: bodyWidthPx\n              }\n            }, renderExpand(rawNode, actualRowIndex)) : renderExpand(rawNode, actualRowIndex)));\n          }\n          const isSummary = ('isSummaryRow' in rowInfo);\n          const striped = !isSummary && rowInfo.striped;\n          const {\n            tmNode,\n            key: rowKey\n          } = rowInfo;\n          const {\n            rawNode: rowData\n          } = tmNode;\n          const expanded = mergedExpandedRowKeySet.has(rowKey);\n          const props = rowProps ? rowProps(rowData, actualRowIndex) : undefined;\n          const mergedRowClassName = typeof rowClassName === 'string' ? rowClassName : createRowClassName(rowData, actualRowIndex, rowClassName);\n          const row = h(\"tr\", Object.assign({\n            onMouseenter: () => {\n              this.hoverKey = rowKey;\n            },\n            key: rowKey,\n            class: [`${mergedClsPrefix}-data-table-tr`, isSummary && `${mergedClsPrefix}-data-table-tr--summary`, striped && `${mergedClsPrefix}-data-table-tr--striped`, mergedRowClassName]\n          }, props), cols.map((col, colIndex) => {\n            var _a, _b, _c, _d, _e;\n            if (displayedRowIndex in cordToPass) {\n              const cordOfRowToPass = cordToPass[displayedRowIndex];\n              const indexInCordOfRowToPass = cordOfRowToPass.indexOf(colIndex);\n              if (~indexInCordOfRowToPass) {\n                cordOfRowToPass.splice(indexInCordOfRowToPass, 1);\n                return null;\n              }\n            }\n            // TODO: Simplify row calculation\n            const {\n              column\n            } = col;\n            const colKey = getColKey(col);\n            const {\n              rowSpan,\n              colSpan\n            } = column;\n            const mergedColSpan = isSummary ? ((_a = rowInfo.tmNode.rawNode[colKey]) === null || _a === void 0 ? void 0 : _a.colSpan) || 1 // optional for #1276\n            : colSpan ? colSpan(rowData, actualRowIndex) : 1;\n            const mergedRowSpan = isSummary ? ((_b = rowInfo.tmNode.rawNode[colKey]) === null || _b === void 0 ? void 0 : _b.rowSpan) || 1 // optional for #1276\n            : rowSpan ? rowSpan(rowData, actualRowIndex) : 1;\n            const isLastCol = colIndex + mergedColSpan === colCount;\n            const isLastRow = displayedRowIndex + mergedRowSpan === rowCount;\n            const isCrossRowTd = mergedRowSpan > 1;\n            if (isCrossRowTd) {\n              cordKey[displayedRowIndex] = {\n                [colIndex]: []\n              };\n            }\n            if (mergedColSpan > 1 || isCrossRowTd) {\n              for (let i = displayedRowIndex; i < displayedRowIndex + mergedRowSpan; ++i) {\n                if (isCrossRowTd) {\n                  cordKey[displayedRowIndex][colIndex].push(rowIndexToKey[i]);\n                }\n                for (let j = colIndex; j < colIndex + mergedColSpan; ++j) {\n                  if (i === displayedRowIndex && j === colIndex) {\n                    continue;\n                  }\n                  if (!(i in cordToPass)) {\n                    cordToPass[i] = [j];\n                  } else {\n                    cordToPass[i].push(j);\n                  }\n                }\n              }\n            }\n            const hoverKey = isCrossRowTd ? this.hoverKey : null;\n            const {\n              cellProps\n            } = column;\n            const resolvedCellProps = cellProps === null || cellProps === void 0 ? void 0 : cellProps(rowData, actualRowIndex);\n            return h(\"td\", Object.assign({}, resolvedCellProps, {\n              key: colKey,\n              style: [{\n                textAlign: column.align || undefined,\n                left: pxfy((_c = fixedColumnLeftMap[colKey]) === null || _c === void 0 ? void 0 : _c.start),\n                right: pxfy((_d = fixedColumnRightMap[colKey]) === null || _d === void 0 ? void 0 : _d.start)\n              }, (resolvedCellProps === null || resolvedCellProps === void 0 ? void 0 : resolvedCellProps.style) || ''],\n              colspan: mergedColSpan,\n              rowspan: isVirtual ? undefined : mergedRowSpan,\n              \"data-col-key\": colKey,\n              class: [`${mergedClsPrefix}-data-table-td`, column.className, resolvedCellProps === null || resolvedCellProps === void 0 ? void 0 : resolvedCellProps.class, isSummary && `${mergedClsPrefix}-data-table-td--summary`, (hoverKey !== null && cordKey[displayedRowIndex][colIndex].includes(hoverKey) || isColumnSorting(column, mergedSortState)) && `${mergedClsPrefix}-data-table-td--hover`, column.fixed && `${mergedClsPrefix}-data-table-td--fixed-${column.fixed}`, column.align && `${mergedClsPrefix}-data-table-td--${column.align}-align`, column.type === 'selection' && `${mergedClsPrefix}-data-table-td--selection`, column.type === 'expand' && `${mergedClsPrefix}-data-table-td--expand`, isLastCol && `${mergedClsPrefix}-data-table-td--last-col`, isLastRow && `${mergedClsPrefix}-data-table-td--last-row`]\n            }), hasChildren && colIndex === childTriggerColIndex ? [repeat(isSummary ? 0 : rowInfo.tmNode.level, h(\"div\", {\n              class: `${mergedClsPrefix}-data-table-indent`,\n              style: indentStyle\n            })), isSummary || rowInfo.tmNode.isLeaf ? h(\"div\", {\n              class: `${mergedClsPrefix}-data-table-expand-placeholder`\n            }) : h(ExpandTrigger, {\n              class: `${mergedClsPrefix}-data-table-expand-trigger`,\n              clsPrefix: mergedClsPrefix,\n              expanded: expanded,\n              renderExpandIcon: this.renderExpandIcon,\n              loading: loadingKeySet.has(rowInfo.key),\n              onClick: () => {\n                handleUpdateExpanded(rowKey, rowInfo.tmNode);\n              }\n            })] : null, column.type === 'selection' ? !isSummary ? column.multiple === false ? h(RenderSafeRadio, {\n              key: currentPage,\n              rowKey: rowKey,\n              disabled: rowInfo.tmNode.disabled,\n              onUpdateChecked: () => handleRadioUpdateChecked(rowInfo.tmNode)\n            }) : h(RenderSafeCheckbox, {\n              key: currentPage,\n              rowKey: rowKey,\n              disabled: rowInfo.tmNode.disabled,\n              onUpdateChecked: (checked, e) => handleCheckboxUpdateChecked(rowInfo.tmNode, checked, e.shiftKey)\n            }) : null : column.type === 'expand' ? !isSummary ? !column.expandable || ((_e = column.expandable) === null || _e === void 0 ? void 0 : _e.call(column, rowData)) ? h(ExpandTrigger, {\n              clsPrefix: mergedClsPrefix,\n              expanded: expanded,\n              renderExpandIcon: this.renderExpandIcon,\n              onClick: () => handleUpdateExpanded(rowKey, null)\n            }) : null : null : h(Cell, {\n              clsPrefix: mergedClsPrefix,\n              index: actualRowIndex,\n              row: rowData,\n              column: column,\n              isSummary: isSummary,\n              mergedTheme: mergedTheme,\n              renderCell: this.renderCell\n            }));\n          }));\n          return row;\n        };\n        if (!virtualScroll) {\n          return h(\"table\", {\n            class: `${mergedClsPrefix}-data-table-table`,\n            onMouseleave: handleMouseleaveTable,\n            onMouseenter: handleMouseenterTable,\n            style: {\n              tableLayout: this.mergedTableLayout\n            }\n          }, h(\"colgroup\", null, cols.map(col => h(\"col\", {\n            key: col.key,\n            style: col.style\n          }))), this.showHeader ? h(TableHeader, {\n            discrete: false\n          }) : null, !this.empty ? h(\"tbody\", {\n            \"data-n-id\": componentId,\n            class: `${mergedClsPrefix}-data-table-tbody`\n          }, displayedData.map((rowInfo, displayedRowIndex) => {\n            return renderRow(rowInfo, displayedRowIndex, false);\n          })) : null);\n        } else {\n          return h(VirtualList, {\n            ref: \"virtualListRef\",\n            items: displayedData,\n            itemSize: 28,\n            visibleItemsTag: VirtualListItemWrapper,\n            visibleItemsProps: {\n              clsPrefix: mergedClsPrefix,\n              id: componentId,\n              cols,\n              onMouseenter: handleMouseenterTable,\n              onMouseleave: handleMouseleaveTable\n            },\n            showScrollbar: false,\n            onResize: this.handleVirtualListResize,\n            onScroll: this.handleVirtualListScroll,\n            itemsStyle: contentStyle,\n            itemResizable: true\n          }, {\n            default: ({\n              item,\n              index\n            }) => renderRow(item, index, true)\n          });\n        }\n      }\n    });\n    if (this.empty) {\n      const createEmptyNode = () => h(\"div\", {\n        class: [`${mergedClsPrefix}-data-table-empty`, this.loading && `${mergedClsPrefix}-data-table-empty--hide`],\n        style: this.bodyStyle,\n        ref: \"emptyElRef\"\n      }, resolveSlot(this.dataTableSlots.empty, () => [h(NEmpty, {\n        theme: this.mergedTheme.peers.Empty,\n        themeOverrides: this.mergedTheme.peerOverrides.Empty\n      })]));\n      if (this.shouldDisplaySomeTablePart) {\n        return h(Fragment, null, tableNode, createEmptyNode());\n      } else {\n        return h(VResizeObserver, {\n          onResize: this.onResize\n        }, {\n          default: createEmptyNode\n        });\n      }\n    }\n    return tableNode;\n  }\n});","map":{"version":3,"names":["h","ref","defineComponent","inject","watchEffect","onUnmounted","computed","Fragment","pxfy","repeat","VirtualList","VResizeObserver","useMemo","cssrAnchorMetaName","c","NScrollbar","formatLength","resolveSlot","warn","NEmpty","dataTableInjectionKey","createRowClassName","getColKey","isColumnSorting","Cell","ExpandTrigger","RenderSafeCheckbox","RenderSafeRadio","TableHeader","flatten","rowInfos","expandedRowKeys","fRows","traverse","rs","rootIndex","forEach","r","children","has","key","push","tmNode","striped","index","rowInfo","VirtualListItemWrapper","props","clsPrefix","type","String","required","id","cols","Array","onMouseenter","Function","onMouseleave","render","style","tableLayout","class","map","col","$slots","name","onResize","showHeader","Boolean","flexHeight","bodyStyle","Object","setup","slots","dataTableSlots","bodyWidthRef","mergedExpandedRowKeysRef","mergedClsPrefixRef","mergedThemeRef","scrollXRef","colsRef","paginatedDataRef","rawPaginatedDataRef","fixedColumnLeftMapRef","fixedColumnRightMapRef","mergedCurrentPageRef","rowClassNameRef","leftActiveFixedColKeyRef","leftActiveFixedChildrenColKeysRef","rightActiveFixedColKeyRef","rightActiveFixedChildrenColKeysRef","renderExpandRef","hoverKeyRef","summaryRef","mergedSortStateRef","virtualScrollRef","componentId","scrollPartRef","mergedTableLayoutRef","childTriggerColIndexRef","indentRef","rowPropsRef","maxHeightRef","stripedRef","loadingRef","onLoadRef","loadingKeySetRef","expandableRef","stickyExpandedRowsRef","renderExpandIconRef","summaryPlacementRef","treeMateRef","setHeaderScrollLeft","doUpdateExpandedRowKeys","handleTableBodyScroll","doCheck","doUncheck","renderCell","scrollbarInstRef","virtualListRef","emptyElRef","emptyRef","value","length","shouldDisplaySomeTablePartRef","bodyShowHeaderOnlyRef","lastSelectedKey","mergedExpandedRowKeySetRef","Set","getRowInfo","_a","getNode","rawNode","handleCheckboxUpdateChecked","checked","shiftKey","lastIndex","findIndex","item","currentIndex","start","Math","min","end","max","rowKeysToCheck","slice","disabled","handleRadioUpdateChecked","getScrollContainer","emptyEl","virtualListContainer","containerRef","handleUpdateExpanded","mergedExpandedRowKeys","indexOf","nextExpandedKeys","from","splice","isLeaf","shallowLoaded","add","call","then","futureMergedExpandedRowKeys","futureNextExpandedKeys","finally","delete","handleMouseleaveTable","handleMouseenterTable","listElRef","virtualListContent","itemsElRef","handleVirtualListScroll","e","sync","handleVirtualListResize","exposedMethods","scrollTo","arg0","arg1","_b","cProps","createActiveLeftFixedStyle","leftActiveFixedColKey","boxShadow","createActiveRightFixedStyle","rightActiveFixedColKey","leftActiveFixedChildrenColKeys","rightActiveFixedChildrenColKeys","fixedStyleMounted","mount","force","anchorMetaName","unmount","assign","bodyWidth","summaryPlacement","summary","mergedClsPrefix","mergedTheme","scrollX","loading","bodyShowHeaderOnly","shouldDisplaySomeTablePart","empty","paginatedDataAndInfo","hasChildren","data","rawPaginatedData","fixedColumnLeftMap","fixedColumnRightMap","currentPage","rowClassName","renderExpand","mergedExpandedRowKeySet","hoverKey","mergedSortState","virtualScroll","mergedTableLayout","childTriggerColIndex","indent","rowProps","maxHeight","loadingKeySet","expandable","stickyExpandedRows","renderExpandIcon","scrollable","undefined","isBasicAutoLayout","xScrollable","contentStyle","minWidth","width","tableNode","theme","peers","Scrollbar","themeOverrides","peerOverrides","container","content","horizontalRailStyle","zIndex","verticalRailStyle","onScroll","internalOnUpdateScrollLeft","default","cordToPass","cordKey","colCount","mergedData","paginatedData","mergedPaginationData","summaryRows","isArray","summaryRowData","row","i","isSummaryRow","indentStyle","displayedData","isExpandedRow","rowCount","rowIndexToKey","rowIndex","bodyWidthPx","renderRow","displayedRowIndex","isVirtual","actualRowIndex","colspan","isSummary","rowKey","rowData","expanded","mergedRowClassName","colIndex","_c","_d","_e","cordOfRowToPass","indexInCordOfRowToPass","column","colKey","rowSpan","colSpan","mergedColSpan","mergedRowSpan","isLastCol","isLastRow","isCrossRowTd","j","cellProps","resolvedCellProps","textAlign","align","left","right","rowspan","className","includes","fixed","level","onClick","multiple","onUpdateChecked","discrete","items","itemSize","visibleItemsTag","visibleItemsProps","showScrollbar","itemsStyle","itemResizable","createEmptyNode","Empty"],"sources":["/Users/krystal/Documents/GitHub/meetings_vue3/node_modules/naive-ui/es/data-table/src/TableParts/Body.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { h, ref, defineComponent, inject, watchEffect, onUnmounted, computed, Fragment } from 'vue';\nimport { pxfy, repeat } from 'seemly';\nimport { VirtualList, VResizeObserver } from 'vueuc';\nimport { useMemo } from 'vooks';\nimport { cssrAnchorMetaName } from '../../../_mixins/common';\nimport { c } from '../../../_utils/cssr';\nimport { NScrollbar } from '../../../_internal';\nimport { formatLength, resolveSlot, warn } from '../../../_utils';\nimport { NEmpty } from '../../../empty';\nimport { dataTableInjectionKey } from '../interface';\nimport { createRowClassName, getColKey, isColumnSorting } from '../utils';\nimport Cell from './Cell';\nimport ExpandTrigger from './ExpandTrigger';\nimport RenderSafeCheckbox from './BodyCheckbox';\nimport RenderSafeRadio from './BodyRadio';\nimport TableHeader from './Header';\nfunction flatten(rowInfos, expandedRowKeys) {\n    const fRows = [];\n    function traverse(rs, rootIndex) {\n        rs.forEach((r) => {\n            if (r.children && expandedRowKeys.has(r.key)) {\n                fRows.push({\n                    tmNode: r,\n                    striped: false,\n                    key: r.key,\n                    index: rootIndex\n                });\n                traverse(r.children, rootIndex);\n            }\n            else {\n                fRows.push({\n                    key: r.key,\n                    tmNode: r,\n                    striped: false,\n                    index: rootIndex\n                });\n            }\n        });\n    }\n    rowInfos.forEach((rowInfo) => {\n        fRows.push(rowInfo);\n        const { children } = rowInfo.tmNode;\n        if (children && expandedRowKeys.has(rowInfo.key)) {\n            traverse(children, rowInfo.index);\n        }\n    });\n    return fRows;\n}\nconst VirtualListItemWrapper = defineComponent({\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        id: {\n            type: String,\n            required: true\n        },\n        cols: {\n            type: Array,\n            required: true\n        },\n        onMouseenter: Function,\n        onMouseleave: Function\n    },\n    render() {\n        const { clsPrefix, id, cols, onMouseenter, onMouseleave } = this;\n        return (h(\"table\", { style: { tableLayout: 'fixed' }, class: `${clsPrefix}-data-table-table`, onMouseenter: onMouseenter, onMouseleave: onMouseleave },\n            h(\"colgroup\", null, cols.map((col) => (h(\"col\", { key: col.key, style: col.style })))),\n            h(\"tbody\", { \"data-n-id\": id, class: `${clsPrefix}-data-table-tbody` }, this.$slots)));\n    }\n});\nexport default defineComponent({\n    name: 'DataTableBody',\n    props: {\n        onResize: Function,\n        showHeader: Boolean,\n        flexHeight: Boolean,\n        bodyStyle: Object\n    },\n    setup(props) {\n        const { slots: dataTableSlots, bodyWidthRef, mergedExpandedRowKeysRef, mergedClsPrefixRef, mergedThemeRef, scrollXRef, colsRef, paginatedDataRef, rawPaginatedDataRef, fixedColumnLeftMapRef, fixedColumnRightMapRef, mergedCurrentPageRef, rowClassNameRef, leftActiveFixedColKeyRef, leftActiveFixedChildrenColKeysRef, rightActiveFixedColKeyRef, rightActiveFixedChildrenColKeysRef, renderExpandRef, hoverKeyRef, summaryRef, mergedSortStateRef, virtualScrollRef, componentId, scrollPartRef, mergedTableLayoutRef, childTriggerColIndexRef, indentRef, rowPropsRef, maxHeightRef, stripedRef, loadingRef, onLoadRef, loadingKeySetRef, expandableRef, stickyExpandedRowsRef, renderExpandIconRef, summaryPlacementRef, treeMateRef, setHeaderScrollLeft, doUpdateExpandedRowKeys, handleTableBodyScroll, doCheck, doUncheck, renderCell\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n         } = inject(dataTableInjectionKey);\n        const scrollbarInstRef = ref(null);\n        const virtualListRef = ref(null);\n        const emptyElRef = ref(null);\n        const emptyRef = useMemo(() => paginatedDataRef.value.length === 0);\n        // If header is not inside & empty is displayed, no table part would be\n        // shown. So to collect a body width, we need to put a ref on empty element\n        const shouldDisplaySomeTablePartRef = useMemo(() => props.showHeader || !emptyRef.value);\n        // If no body is shown, we shouldn't show scrollbar\n        const bodyShowHeaderOnlyRef = useMemo(() => {\n            return props.showHeader || emptyRef.value;\n        });\n        let lastSelectedKey = '';\n        const mergedExpandedRowKeySetRef = computed(() => {\n            return new Set(mergedExpandedRowKeysRef.value);\n        });\n        function getRowInfo(key) {\n            var _a;\n            return (_a = treeMateRef.value.getNode(key)) === null || _a === void 0 ? void 0 : _a.rawNode;\n        }\n        function handleCheckboxUpdateChecked(tmNode, checked, shiftKey) {\n            const rowInfo = getRowInfo(tmNode.key);\n            if (!rowInfo) {\n                warn('data-table', `fail to get row data with key ${tmNode.key}`);\n                return;\n            }\n            if (shiftKey) {\n                const lastIndex = paginatedDataRef.value.findIndex((item) => item.key === lastSelectedKey);\n                if (lastIndex !== -1) {\n                    const currentIndex = paginatedDataRef.value.findIndex((item) => item.key === tmNode.key);\n                    const start = Math.min(lastIndex, currentIndex);\n                    const end = Math.max(lastIndex, currentIndex);\n                    const rowKeysToCheck = [];\n                    paginatedDataRef.value.slice(start, end + 1).forEach((r) => {\n                        if (!r.disabled) {\n                            rowKeysToCheck.push(r.key);\n                        }\n                    });\n                    if (checked) {\n                        doCheck(rowKeysToCheck, false, rowInfo);\n                    }\n                    else {\n                        doUncheck(rowKeysToCheck, rowInfo);\n                    }\n                    lastSelectedKey = tmNode.key;\n                    return;\n                }\n            }\n            if (checked) {\n                doCheck(tmNode.key, false, rowInfo);\n            }\n            else {\n                doUncheck(tmNode.key, rowInfo);\n            }\n            lastSelectedKey = tmNode.key;\n        }\n        function handleRadioUpdateChecked(tmNode) {\n            const rowInfo = getRowInfo(tmNode.key);\n            if (!rowInfo) {\n                warn('data-table', `fail to get row data with key ${tmNode.key}`);\n                return;\n            }\n            doCheck(tmNode.key, true, rowInfo);\n        }\n        function getScrollContainer() {\n            if (!shouldDisplaySomeTablePartRef.value) {\n                const { value: emptyEl } = emptyElRef;\n                if (emptyEl) {\n                    return emptyEl;\n                }\n                else {\n                    return null;\n                }\n            }\n            if (virtualScrollRef.value) {\n                return virtualListContainer();\n            }\n            const { value } = scrollbarInstRef;\n            if (value)\n                return value.containerRef;\n            return null;\n        }\n        // For table row with children, tmNode is non-nullable\n        // For table row is expandable but is not tree data, tmNode is null\n        function handleUpdateExpanded(key, tmNode) {\n            var _a;\n            if (loadingKeySetRef.value.has(key))\n                return;\n            const { value: mergedExpandedRowKeys } = mergedExpandedRowKeysRef;\n            const index = mergedExpandedRowKeys.indexOf(key);\n            const nextExpandedKeys = Array.from(mergedExpandedRowKeys);\n            if (~index) {\n                nextExpandedKeys.splice(index, 1);\n                doUpdateExpandedRowKeys(nextExpandedKeys);\n            }\n            else {\n                if (tmNode && !tmNode.isLeaf && !tmNode.shallowLoaded) {\n                    loadingKeySetRef.value.add(key);\n                    void ((_a = onLoadRef\n                        .value) === null || _a === void 0 ? void 0 : _a.call(onLoadRef, tmNode.rawNode).then(() => {\n                        const { value: futureMergedExpandedRowKeys } = mergedExpandedRowKeysRef;\n                        const futureNextExpandedKeys = Array.from(futureMergedExpandedRowKeys);\n                        const index = futureNextExpandedKeys.indexOf(key);\n                        if (!~index) {\n                            futureNextExpandedKeys.push(key);\n                        }\n                        doUpdateExpandedRowKeys(futureNextExpandedKeys);\n                    }).finally(() => {\n                        loadingKeySetRef.value.delete(key);\n                    }));\n                }\n                else {\n                    nextExpandedKeys.push(key);\n                    doUpdateExpandedRowKeys(nextExpandedKeys);\n                }\n            }\n        }\n        function handleMouseleaveTable() {\n            hoverKeyRef.value = null;\n        }\n        function handleMouseenterTable() {\n            scrollPartRef.value = 'body';\n        }\n        function virtualListContainer() {\n            const { value } = virtualListRef;\n            return value === null || value === void 0 ? void 0 : value.listElRef;\n        }\n        function virtualListContent() {\n            const { value } = virtualListRef;\n            return value === null || value === void 0 ? void 0 : value.itemsElRef;\n        }\n        function handleVirtualListScroll(e) {\n            var _a;\n            handleTableBodyScroll(e);\n            (_a = scrollbarInstRef.value) === null || _a === void 0 ? void 0 : _a.sync();\n        }\n        function handleVirtualListResize(e) {\n            var _a;\n            const { onResize } = props;\n            if (onResize)\n                onResize(e);\n            (_a = scrollbarInstRef.value) === null || _a === void 0 ? void 0 : _a.sync();\n        }\n        const exposedMethods = {\n            getScrollContainer,\n            scrollTo(arg0, arg1) {\n                var _a, _b;\n                if (virtualScrollRef.value) {\n                    (_a = virtualListRef.value) === null || _a === void 0 ? void 0 : _a.scrollTo(arg0, arg1);\n                }\n                else {\n                    (_b = scrollbarInstRef.value) === null || _b === void 0 ? void 0 : _b.scrollTo(arg0, arg1);\n                }\n            }\n        };\n        // manually control shadow style to avoid rerender\n        const style = c([\n            ({ props: cProps }) => {\n                const createActiveLeftFixedStyle = (leftActiveFixedColKey) => {\n                    if (leftActiveFixedColKey === null)\n                        return null;\n                    return c(`[data-n-id=\"${cProps.componentId}\"] [data-col-key=\"${leftActiveFixedColKey}\"]::after`, { boxShadow: 'var(--n-box-shadow-after)' });\n                };\n                const createActiveRightFixedStyle = (rightActiveFixedColKey) => {\n                    if (rightActiveFixedColKey === null)\n                        return null;\n                    return c(`[data-n-id=\"${cProps.componentId}\"] [data-col-key=\"${rightActiveFixedColKey}\"]::before`, { boxShadow: 'var(--n-box-shadow-before)' });\n                };\n                return c([\n                    createActiveLeftFixedStyle(cProps.leftActiveFixedColKey),\n                    createActiveRightFixedStyle(cProps.rightActiveFixedColKey),\n                    cProps.leftActiveFixedChildrenColKeys.map((leftActiveFixedColKey) => createActiveLeftFixedStyle(leftActiveFixedColKey)),\n                    cProps.rightActiveFixedChildrenColKeys.map((rightActiveFixedColKey) => createActiveRightFixedStyle(rightActiveFixedColKey))\n                ]);\n            }\n        ]);\n        let fixedStyleMounted = false;\n        watchEffect(() => {\n            const { value: leftActiveFixedColKey } = leftActiveFixedColKeyRef;\n            const { value: leftActiveFixedChildrenColKeys } = leftActiveFixedChildrenColKeysRef;\n            const { value: rightActiveFixedColKey } = rightActiveFixedColKeyRef;\n            const { value: rightActiveFixedChildrenColKeys } = rightActiveFixedChildrenColKeysRef;\n            if (!fixedStyleMounted &&\n                leftActiveFixedColKey === null &&\n                rightActiveFixedColKey === null) {\n                return;\n            }\n            const cProps = {\n                leftActiveFixedColKey,\n                leftActiveFixedChildrenColKeys,\n                rightActiveFixedColKey,\n                rightActiveFixedChildrenColKeys,\n                componentId\n            };\n            style.mount({\n                id: `n-${componentId}`,\n                force: true,\n                props: cProps,\n                anchorMetaName: cssrAnchorMetaName\n            });\n            fixedStyleMounted = true;\n        });\n        onUnmounted(() => {\n            style.unmount({\n                id: `n-${componentId}`\n            });\n        });\n        return Object.assign({ bodyWidth: bodyWidthRef, summaryPlacement: summaryPlacementRef, dataTableSlots,\n            componentId,\n            scrollbarInstRef,\n            virtualListRef,\n            emptyElRef, summary: summaryRef, mergedClsPrefix: mergedClsPrefixRef, mergedTheme: mergedThemeRef, scrollX: scrollXRef, cols: colsRef, loading: loadingRef, bodyShowHeaderOnly: bodyShowHeaderOnlyRef, shouldDisplaySomeTablePart: shouldDisplaySomeTablePartRef, empty: emptyRef, paginatedDataAndInfo: computed(() => {\n                const { value: striped } = stripedRef;\n                let hasChildren = false;\n                const data = paginatedDataRef.value.map(striped\n                    ? (tmNode, index) => {\n                        if (!tmNode.isLeaf)\n                            hasChildren = true;\n                        return {\n                            tmNode,\n                            key: tmNode.key,\n                            striped: index % 2 === 1,\n                            index\n                        };\n                    }\n                    : (tmNode, index) => {\n                        if (!tmNode.isLeaf)\n                            hasChildren = true;\n                        return {\n                            tmNode,\n                            key: tmNode.key,\n                            striped: false,\n                            index\n                        };\n                    });\n                return {\n                    data,\n                    hasChildren\n                };\n            }), rawPaginatedData: rawPaginatedDataRef, fixedColumnLeftMap: fixedColumnLeftMapRef, fixedColumnRightMap: fixedColumnRightMapRef, currentPage: mergedCurrentPageRef, rowClassName: rowClassNameRef, renderExpand: renderExpandRef, mergedExpandedRowKeySet: mergedExpandedRowKeySetRef, hoverKey: hoverKeyRef, mergedSortState: mergedSortStateRef, virtualScroll: virtualScrollRef, mergedTableLayout: mergedTableLayoutRef, childTriggerColIndex: childTriggerColIndexRef, indent: indentRef, rowProps: rowPropsRef, maxHeight: maxHeightRef, loadingKeySet: loadingKeySetRef, expandable: expandableRef, stickyExpandedRows: stickyExpandedRowsRef, renderExpandIcon: renderExpandIconRef, setHeaderScrollLeft,\n            handleMouseenterTable,\n            handleVirtualListScroll,\n            handleVirtualListResize,\n            handleMouseleaveTable,\n            virtualListContainer,\n            virtualListContent,\n            handleTableBodyScroll,\n            handleCheckboxUpdateChecked,\n            handleRadioUpdateChecked,\n            handleUpdateExpanded,\n            renderCell }, exposedMethods);\n    },\n    render() {\n        const { mergedTheme, scrollX, mergedClsPrefix, virtualScroll, maxHeight, mergedTableLayout, flexHeight, loadingKeySet, onResize, setHeaderScrollLeft } = this;\n        const scrollable = scrollX !== undefined || maxHeight !== undefined || flexHeight;\n        // For a basic table with auto layout whose content may overflow we will\n        // make it scrollable, which differs from browser's native behavior.\n        // For native behavior, see\n        // https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout\n        const isBasicAutoLayout = !scrollable && mergedTableLayout === 'auto';\n        const xScrollable = scrollX !== undefined || isBasicAutoLayout;\n        const contentStyle = {\n            minWidth: formatLength(scrollX) || '100%'\n        };\n        if (scrollX)\n            contentStyle.width = '100%';\n        const tableNode = (h(NScrollbar, { ref: \"scrollbarInstRef\", scrollable: scrollable || isBasicAutoLayout, class: `${mergedClsPrefix}-data-table-base-table-body`, style: this.bodyStyle, theme: mergedTheme.peers.Scrollbar, themeOverrides: mergedTheme.peerOverrides.Scrollbar, contentStyle: contentStyle, container: virtualScroll ? this.virtualListContainer : undefined, content: virtualScroll ? this.virtualListContent : undefined, horizontalRailStyle: { zIndex: 3 }, verticalRailStyle: { zIndex: 3 }, xScrollable: xScrollable, onScroll: virtualScroll ? undefined : this.handleTableBodyScroll, internalOnUpdateScrollLeft: setHeaderScrollLeft, onResize: onResize }, {\n            default: () => {\n                // coordinate to pass if there are cells that cross row & col\n                const cordToPass = {};\n                // coordinate to related hover keys\n                const cordKey = {};\n                const { cols, paginatedDataAndInfo, mergedTheme, fixedColumnLeftMap, fixedColumnRightMap, currentPage, rowClassName, mergedSortState, mergedExpandedRowKeySet, stickyExpandedRows, componentId, childTriggerColIndex, expandable, rowProps, handleMouseenterTable, handleMouseleaveTable, renderExpand, summary, handleCheckboxUpdateChecked, handleRadioUpdateChecked, handleUpdateExpanded } = this;\n                const { length: colCount } = cols;\n                let mergedData;\n                // if there is children in data, we should expand mergedData first\n                const { data: paginatedData, hasChildren } = paginatedDataAndInfo;\n                const mergedPaginationData = hasChildren\n                    ? flatten(paginatedData, mergedExpandedRowKeySet)\n                    : paginatedData;\n                if (summary) {\n                    const summaryRows = summary(this.rawPaginatedData);\n                    if (Array.isArray(summaryRows)) {\n                        const summaryRowData = summaryRows.map((row, i) => ({\n                            isSummaryRow: true,\n                            key: `__n_summary__${i}`,\n                            tmNode: {\n                                rawNode: row,\n                                disabled: true\n                            },\n                            index: -1\n                        }));\n                        mergedData =\n                            this.summaryPlacement === 'top'\n                                ? [...summaryRowData, ...mergedPaginationData]\n                                : [...mergedPaginationData, ...summaryRowData];\n                    }\n                    else {\n                        const summaryRowData = {\n                            isSummaryRow: true,\n                            key: '__n_summary__',\n                            tmNode: {\n                                rawNode: summaryRows,\n                                disabled: true\n                            },\n                            index: -1\n                        };\n                        mergedData =\n                            this.summaryPlacement === 'top'\n                                ? [summaryRowData, ...mergedPaginationData]\n                                : [...mergedPaginationData, summaryRowData];\n                    }\n                }\n                else {\n                    mergedData = mergedPaginationData;\n                }\n                const indentStyle = hasChildren\n                    ? { width: pxfy(this.indent) }\n                    : undefined;\n                // Tile the data of the expanded row\n                const displayedData = [];\n                mergedData.forEach((rowInfo) => {\n                    if (renderExpand &&\n                        mergedExpandedRowKeySet.has(rowInfo.key) &&\n                        (!expandable || expandable(rowInfo.tmNode.rawNode))) {\n                        displayedData.push(rowInfo, {\n                            isExpandedRow: true,\n                            key: `${rowInfo.key}-expand`,\n                            tmNode: rowInfo.tmNode,\n                            index: rowInfo.index\n                        });\n                    }\n                    else {\n                        displayedData.push(rowInfo);\n                    }\n                });\n                const { length: rowCount } = displayedData;\n                const rowIndexToKey = {};\n                paginatedData.forEach(({ tmNode }, rowIndex) => {\n                    rowIndexToKey[rowIndex] = tmNode.key;\n                });\n                const bodyWidth = stickyExpandedRows ? this.bodyWidth : null;\n                const bodyWidthPx = bodyWidth === null ? undefined : `${bodyWidth}px`;\n                const renderRow = (rowInfo, displayedRowIndex, isVirtual) => {\n                    const { index: actualRowIndex } = rowInfo;\n                    if ('isExpandedRow' in rowInfo) {\n                        const { tmNode: { key, rawNode } } = rowInfo;\n                        return (h(\"tr\", { class: `${mergedClsPrefix}-data-table-tr`, key: `${key}__expand` },\n                            h(\"td\", { class: [\n                                    `${mergedClsPrefix}-data-table-td`,\n                                    `${mergedClsPrefix}-data-table-td--last-col`,\n                                    displayedRowIndex + 1 === rowCount &&\n                                        `${mergedClsPrefix}-data-table-td--last-row`\n                                ], colspan: colCount }, stickyExpandedRows ? (h(\"div\", { class: `${mergedClsPrefix}-data-table-expand`, style: {\n                                    width: bodyWidthPx\n                                } }, renderExpand(rawNode, actualRowIndex))) : (renderExpand(rawNode, actualRowIndex)))));\n                    }\n                    const isSummary = 'isSummaryRow' in rowInfo;\n                    const striped = !isSummary && rowInfo.striped;\n                    const { tmNode, key: rowKey } = rowInfo;\n                    const { rawNode: rowData } = tmNode;\n                    const expanded = mergedExpandedRowKeySet.has(rowKey);\n                    const props = rowProps\n                        ? rowProps(rowData, actualRowIndex)\n                        : undefined;\n                    const mergedRowClassName = typeof rowClassName === 'string'\n                        ? rowClassName\n                        : createRowClassName(rowData, actualRowIndex, rowClassName);\n                    const row = (h(\"tr\", Object.assign({ onMouseenter: () => {\n                            this.hoverKey = rowKey;\n                        }, key: rowKey, class: [\n                            `${mergedClsPrefix}-data-table-tr`,\n                            isSummary && `${mergedClsPrefix}-data-table-tr--summary`,\n                            striped && `${mergedClsPrefix}-data-table-tr--striped`,\n                            mergedRowClassName\n                        ] }, props), cols.map((col, colIndex) => {\n                        var _a, _b, _c, _d, _e;\n                        if (displayedRowIndex in cordToPass) {\n                            const cordOfRowToPass = cordToPass[displayedRowIndex];\n                            const indexInCordOfRowToPass = cordOfRowToPass.indexOf(colIndex);\n                            if (~indexInCordOfRowToPass) {\n                                cordOfRowToPass.splice(indexInCordOfRowToPass, 1);\n                                return null;\n                            }\n                        }\n                        // TODO: Simplify row calculation\n                        const { column } = col;\n                        const colKey = getColKey(col);\n                        const { rowSpan, colSpan } = column;\n                        const mergedColSpan = isSummary\n                            ? ((_a = rowInfo.tmNode.rawNode[colKey]) === null || _a === void 0 ? void 0 : _a.colSpan) || 1 // optional for #1276\n                            : colSpan\n                                ? colSpan(rowData, actualRowIndex)\n                                : 1;\n                        const mergedRowSpan = isSummary\n                            ? ((_b = rowInfo.tmNode.rawNode[colKey]) === null || _b === void 0 ? void 0 : _b.rowSpan) || 1 // optional for #1276\n                            : rowSpan\n                                ? rowSpan(rowData, actualRowIndex)\n                                : 1;\n                        const isLastCol = colIndex + mergedColSpan === colCount;\n                        const isLastRow = displayedRowIndex + mergedRowSpan === rowCount;\n                        const isCrossRowTd = mergedRowSpan > 1;\n                        if (isCrossRowTd) {\n                            cordKey[displayedRowIndex] = {\n                                [colIndex]: []\n                            };\n                        }\n                        if (mergedColSpan > 1 || isCrossRowTd) {\n                            for (let i = displayedRowIndex; i < displayedRowIndex + mergedRowSpan; ++i) {\n                                if (isCrossRowTd) {\n                                    cordKey[displayedRowIndex][colIndex].push(rowIndexToKey[i]);\n                                }\n                                for (let j = colIndex; j < colIndex + mergedColSpan; ++j) {\n                                    if (i === displayedRowIndex && j === colIndex) {\n                                        continue;\n                                    }\n                                    if (!(i in cordToPass)) {\n                                        cordToPass[i] = [j];\n                                    }\n                                    else {\n                                        cordToPass[i].push(j);\n                                    }\n                                }\n                            }\n                        }\n                        const hoverKey = isCrossRowTd ? this.hoverKey : null;\n                        const { cellProps } = column;\n                        const resolvedCellProps = cellProps === null || cellProps === void 0 ? void 0 : cellProps(rowData, actualRowIndex);\n                        return (h(\"td\", Object.assign({}, resolvedCellProps, { key: colKey, style: [\n                                {\n                                    textAlign: column.align || undefined,\n                                    left: pxfy((_c = fixedColumnLeftMap[colKey]) === null || _c === void 0 ? void 0 : _c.start),\n                                    right: pxfy((_d = fixedColumnRightMap[colKey]) === null || _d === void 0 ? void 0 : _d.start)\n                                },\n                                (resolvedCellProps === null || resolvedCellProps === void 0 ? void 0 : resolvedCellProps.style) || ''\n                            ], colspan: mergedColSpan, rowspan: isVirtual ? undefined : mergedRowSpan, \"data-col-key\": colKey, class: [\n                                `${mergedClsPrefix}-data-table-td`,\n                                column.className,\n                                resolvedCellProps === null || resolvedCellProps === void 0 ? void 0 : resolvedCellProps.class,\n                                isSummary &&\n                                    `${mergedClsPrefix}-data-table-td--summary`,\n                                ((hoverKey !== null &&\n                                    cordKey[displayedRowIndex][colIndex].includes(hoverKey)) ||\n                                    isColumnSorting(column, mergedSortState)) &&\n                                    `${mergedClsPrefix}-data-table-td--hover`,\n                                column.fixed &&\n                                    `${mergedClsPrefix}-data-table-td--fixed-${column.fixed}`,\n                                column.align &&\n                                    `${mergedClsPrefix}-data-table-td--${column.align}-align`,\n                                column.type === 'selection' &&\n                                    `${mergedClsPrefix}-data-table-td--selection`,\n                                column.type === 'expand' &&\n                                    `${mergedClsPrefix}-data-table-td--expand`,\n                                isLastCol &&\n                                    `${mergedClsPrefix}-data-table-td--last-col`,\n                                isLastRow &&\n                                    `${mergedClsPrefix}-data-table-td--last-row`\n                            ] }),\n                            hasChildren && colIndex === childTriggerColIndex\n                                ? [\n                                    repeat(isSummary ? 0 : rowInfo.tmNode.level, h(\"div\", { class: `${mergedClsPrefix}-data-table-indent`, style: indentStyle })),\n                                    isSummary || rowInfo.tmNode.isLeaf ? (h(\"div\", { class: `${mergedClsPrefix}-data-table-expand-placeholder` })) : (h(ExpandTrigger, { class: `${mergedClsPrefix}-data-table-expand-trigger`, clsPrefix: mergedClsPrefix, expanded: expanded, renderExpandIcon: this.renderExpandIcon, loading: loadingKeySet.has(rowInfo.key), onClick: () => {\n                                            handleUpdateExpanded(rowKey, rowInfo.tmNode);\n                                        } }))\n                                ]\n                                : null,\n                            column.type === 'selection' ? (!isSummary ? (column.multiple === false ? (h(RenderSafeRadio, { key: currentPage, rowKey: rowKey, disabled: rowInfo.tmNode.disabled, onUpdateChecked: () => handleRadioUpdateChecked(rowInfo.tmNode) })) : (h(RenderSafeCheckbox, { key: currentPage, rowKey: rowKey, disabled: rowInfo.tmNode.disabled, onUpdateChecked: (checked, e) => handleCheckboxUpdateChecked(rowInfo.tmNode, checked, e.shiftKey) }))) : null) : column.type === 'expand' ? (!isSummary ? (!column.expandable ||\n                                ((_e = column.expandable) === null || _e === void 0 ? void 0 : _e.call(column, rowData)) ? (h(ExpandTrigger, { clsPrefix: mergedClsPrefix, expanded: expanded, renderExpandIcon: this.renderExpandIcon, onClick: () => handleUpdateExpanded(rowKey, null) })) : null) : null) : (h(Cell, { clsPrefix: mergedClsPrefix, index: actualRowIndex, row: rowData, column: column, isSummary: isSummary, mergedTheme: mergedTheme, renderCell: this.renderCell }))));\n                    })));\n                    return row;\n                };\n                if (!virtualScroll) {\n                    return (h(\"table\", { class: `${mergedClsPrefix}-data-table-table`, onMouseleave: handleMouseleaveTable, onMouseenter: handleMouseenterTable, style: {\n                            tableLayout: this.mergedTableLayout\n                        } },\n                        h(\"colgroup\", null, cols.map((col) => (h(\"col\", { key: col.key, style: col.style })))),\n                        this.showHeader ? h(TableHeader, { discrete: false }) : null,\n                        !this.empty ? (h(\"tbody\", { \"data-n-id\": componentId, class: `${mergedClsPrefix}-data-table-tbody` }, displayedData.map((rowInfo, displayedRowIndex) => {\n                            return renderRow(rowInfo, displayedRowIndex, false);\n                        }))) : null));\n                }\n                else {\n                    return (h(VirtualList, { ref: \"virtualListRef\", items: displayedData, itemSize: 28, visibleItemsTag: VirtualListItemWrapper, visibleItemsProps: {\n                            clsPrefix: mergedClsPrefix,\n                            id: componentId,\n                            cols,\n                            onMouseenter: handleMouseenterTable,\n                            onMouseleave: handleMouseleaveTable\n                        }, showScrollbar: false, onResize: this.handleVirtualListResize, onScroll: this.handleVirtualListScroll, itemsStyle: contentStyle, itemResizable: true }, {\n                        default: ({ item, index }) => renderRow(item, index, true)\n                    }));\n                }\n            }\n        }));\n        if (this.empty) {\n            const createEmptyNode = () => (h(\"div\", { class: [\n                    `${mergedClsPrefix}-data-table-empty`,\n                    this.loading && `${mergedClsPrefix}-data-table-empty--hide`\n                ], style: this.bodyStyle, ref: \"emptyElRef\" }, resolveSlot(this.dataTableSlots.empty, () => [\n                h(NEmpty, { theme: this.mergedTheme.peers.Empty, themeOverrides: this.mergedTheme.peerOverrides.Empty })\n            ])));\n            if (this.shouldDisplaySomeTablePart) {\n                return (h(Fragment, null,\n                    tableNode,\n                    createEmptyNode()));\n            }\n            else {\n                return (h(VResizeObserver, { onResize: this.onResize }, { default: createEmptyNode }));\n            }\n        }\n        return tableNode;\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}