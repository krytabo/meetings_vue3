{"ast":null,"code":"import colors from './colors';\nconst prefix = '^\\\\s*';\nconst suffix = '\\\\s*$';\nconst percent = '\\\\s*((\\\\.\\\\d+)|(\\\\d+(\\\\.\\\\d*)?))%\\\\s*'; // 4 offset\nconst float = '\\\\s*((\\\\.\\\\d+)|(\\\\d+(\\\\.\\\\d*)?))\\\\s*'; // 4 offset\nconst hex = '([0-9A-Fa-f])';\nconst dhex = '([0-9A-Fa-f]{2})';\nconst hslRegex = new RegExp(`${prefix}hsl\\\\s*\\\\(${float},${percent},${percent}\\\\)${suffix}`);\nconst hsvRegex = new RegExp(`${prefix}hsv\\\\s*\\\\(${float},${percent},${percent}\\\\)${suffix}`);\nconst hslaRegex = new RegExp(`${prefix}hsla\\\\s*\\\\(${float},${percent},${percent},${float}\\\\)${suffix}`);\nconst hsvaRegex = new RegExp(`${prefix}hsva\\\\s*\\\\(${float},${percent},${percent},${float}\\\\)${suffix}`);\nconst rgbRegex = new RegExp(`${prefix}rgb\\\\s*\\\\(${float},${float},${float}\\\\)${suffix}`);\nconst rgbaRegex = new RegExp(`${prefix}rgba\\\\s*\\\\(${float},${float},${float},${float}\\\\)${suffix}`);\nconst sHexRegex = new RegExp(`${prefix}#${hex}${hex}${hex}${suffix}`);\nconst hexRegex = new RegExp(`${prefix}#${dhex}${dhex}${dhex}${suffix}`);\nconst sHexaRegex = new RegExp(`${prefix}#${hex}${hex}${hex}${hex}${suffix}`);\nconst hexaRegex = new RegExp(`${prefix}#${dhex}${dhex}${dhex}${dhex}${suffix}`);\nfunction parseHex(value) {\n  return parseInt(value, 16);\n}\n/**\n * Convert color string to hsla array\n * @param color format like hsl(180, 100%, 100%), hsla(180, 100%, 100%, 1)\n * @returns\n */\nexport function hsla(color) {\n  try {\n    let i;\n    if (i = hslaRegex.exec(color)) {\n      return [roundDeg(i[1]), roundPercent(i[5]), roundPercent(i[9]), roundAlpha(i[13])];\n    } else if (i = hslRegex.exec(color)) {\n      return [roundDeg(i[1]), roundPercent(i[5]), roundPercent(i[9]), 1];\n    }\n    throw new Error(`[seemly/hsla]: Invalid color value ${color}.`);\n  } catch (e) {\n    throw e;\n  }\n}\n/**\n * Convert color string to hsva array\n * @param color format like hsv(180, 100%, 100%), hsva(180, 100%, 100%, 1)\n * @returns\n */\nexport function hsva(color) {\n  try {\n    let i;\n    if (i = hsvaRegex.exec(color)) {\n      return [roundDeg(i[1]), roundPercent(i[5]), roundPercent(i[9]), roundAlpha(i[13])];\n    } else if (i = hsvRegex.exec(color)) {\n      return [roundDeg(i[1]), roundPercent(i[5]), roundPercent(i[9]), 1];\n    }\n    throw new Error(`[seemly/hsva]: Invalid color value ${color}.`);\n  } catch (e) {\n    throw e;\n  }\n}\n/**\n * Convert color string to rgba array.\n * @param color format like #000[0], #000000[00], rgb(0, 0, 0), rgba(0, 0, 0, 0) and basic color keywords https://www.w3.org/TR/css-color-3/#html4 and transparent\n * @returns\n */\nexport function rgba(color) {\n  try {\n    let i;\n    if (i = hexRegex.exec(color)) {\n      return [parseHex(i[1]), parseHex(i[2]), parseHex(i[3]), 1];\n    } else if (i = rgbRegex.exec(color)) {\n      return [roundChannel(i[1]), roundChannel(i[5]), roundChannel(i[9]), 1];\n    } else if (i = rgbaRegex.exec(color)) {\n      return [roundChannel(i[1]), roundChannel(i[5]), roundChannel(i[9]), roundAlpha(i[13])];\n    } else if (i = sHexRegex.exec(color)) {\n      return [parseHex(i[1] + i[1]), parseHex(i[2] + i[2]), parseHex(i[3] + i[3]), 1];\n    } else if (i = hexaRegex.exec(color)) {\n      return [parseHex(i[1]), parseHex(i[2]), parseHex(i[3]), roundAlpha(parseHex(i[4]) / 255)];\n    } else if (i = sHexaRegex.exec(color)) {\n      return [parseHex(i[1] + i[1]), parseHex(i[2] + i[2]), parseHex(i[3] + i[3]), roundAlpha(parseHex(i[4] + i[4]) / 255)];\n    } else if (color in colors) {\n      return rgba(colors[color]);\n    }\n    throw new Error(`[seemly/rgba]: Invalid color value ${color}.`);\n  } catch (e) {\n    throw e;\n  }\n}\nfunction normalizeAlpha(alphaValue) {\n  return alphaValue > 1 ? 1 : alphaValue < 0 ? 0 : alphaValue;\n}\nfunction stringifyRgb(r, g, b) {\n  return `rgb(${roundChannel(r)}, ${roundChannel(g)}, ${roundChannel(b)})`;\n}\nfunction stringifyRgba(r, g, b, a) {\n  return `rgba(${roundChannel(r)}, ${roundChannel(g)}, ${roundChannel(b)}, ${normalizeAlpha(a)})`;\n}\nfunction compositeChannel(v1, a1, v2, a2, a) {\n  return roundChannel((v1 * a1 * (1 - a2) + v2 * a2) / a);\n}\nexport function composite(background, overlay) {\n  if (!Array.isArray(background)) background = rgba(background);\n  if (!Array.isArray(overlay)) overlay = rgba(overlay);\n  const a1 = background[3];\n  const a2 = overlay[3];\n  const alpha = roundAlpha(a1 + a2 - a1 * a2);\n  return stringifyRgba(compositeChannel(background[0], a1, overlay[0], a2, alpha), compositeChannel(background[1], a1, overlay[1], a2, alpha), compositeChannel(background[2], a1, overlay[2], a2, alpha), alpha);\n}\nexport function changeColor(base, options) {\n  const [r, g, b, a = 1] = Array.isArray(base) ? base : rgba(base);\n  if (options.alpha) {\n    return stringifyRgba(r, g, b, options.alpha);\n  }\n  return stringifyRgba(r, g, b, a);\n}\nexport function scaleColor(base, options) {\n  const [r, g, b, a = 1] = Array.isArray(base) ? base : rgba(base);\n  const {\n    lightness = 1,\n    alpha = 1\n  } = options;\n  return toRgbaString([r * lightness, g * lightness, b * lightness, a * alpha]);\n}\nexport function getAlpha(base) {\n  var _a;\n  const alpha = (_a = (Array.isArray(base) ? base : rgba(base))[3]) !== null && _a !== void 0 ? _a : 1;\n  return alpha;\n}\nexport function getAlphaString(base) {\n  return `${getAlpha(base)}`;\n}\nexport function roundAlpha(value) {\n  const v = Math.round(Number(value) * 100) / 100;\n  if (v > 1) return 1;\n  if (v < 0) return 0;\n  return v;\n}\nexport function roundDeg(value) {\n  const v = Math.round(Number(value));\n  if (v >= 360) return 0;\n  if (v < 0) return 0;\n  return v;\n}\nexport function roundChannel(value) {\n  const v = Math.round(Number(value));\n  if (v > 255) return 255;\n  if (v < 0) return 0;\n  return v;\n}\nexport function roundPercent(value) {\n  const v = Math.round(Number(value));\n  if (v > 100) return 100;\n  if (v < 0) return 0;\n  return v;\n}\nexport function toRgbString(base) {\n  const [r, g, b] = Array.isArray(base) ? base : rgba(base);\n  return stringifyRgb(r, g, b);\n}\nexport function toRgbaString(base) {\n  const [r, g, b] = base;\n  if (3 in base) {\n    return `rgba(${roundChannel(r)}, ${roundChannel(g)}, ${roundChannel(b)}, ${roundAlpha(base[3])})`;\n  }\n  return `rgba(${roundChannel(r)}, ${roundChannel(g)}, ${roundChannel(b)}, 1)`;\n}\nexport function toHsvString(base) {\n  return `hsv(${roundDeg(base[0])}, ${roundPercent(base[1])}%, ${roundPercent(base[2])}%)`;\n}\nexport function toHsvaString(base) {\n  const [h, s, v] = base;\n  if (3 in base) {\n    return `hsva(${roundDeg(h)}, ${roundPercent(s)}%, ${roundPercent(v)}%, ${roundAlpha(base[3])})`;\n  }\n  return `hsva(${roundDeg(h)}, ${roundPercent(s)}%, ${roundPercent(v)}%, 1)`;\n}\nexport function toHslString(base) {\n  return `hsl(${roundDeg(base[0])}, ${roundPercent(base[1])}%, ${roundPercent(base[2])}%)`;\n}\nexport function toHslaString(base) {\n  const [h, s, l] = base;\n  if (3 in base) {\n    return `hsla(${roundDeg(h)}, ${roundPercent(s)}%, ${roundPercent(l)}%, ${roundAlpha(base[3])})`;\n  }\n  return `hsla(${roundDeg(h)}, ${roundPercent(s)}%, ${roundPercent(l)}%, 1)`;\n}\n/**\n *\n * @param base [255, 255, 255, 255], [255, 255, 255], any hex string\n * @returns\n */\nexport function toHexaString(base) {\n  if (typeof base === 'string') {\n    let i;\n    if (i = hexRegex.exec(base)) {\n      return `${i[0]}FF`;\n    } else if (i = hexaRegex.exec(base)) {\n      return i[0];\n    } else if (i = sHexRegex.exec(base)) {\n      return `#${i[1]}${i[1]}${i[2]}${i[2]}${i[3]}${i[3]}FF`;\n    } else if (i = sHexaRegex.exec(base)) {\n      return `#${i[1]}${i[1]}${i[2]}${i[2]}${i[3]}${i[3]}${i[4]}${i[4]}`;\n    }\n    throw new Error(`[seemly/toHexString]: Invalid hex value ${base}.`);\n  }\n  const hex = `#${base.slice(0, 3).map(unit => roundChannel(unit).toString(16).toUpperCase().padStart(2, '0')).join('')}`;\n  const a = base.length === 3 ? 'FF' : roundChannel(base[3] * 255).toString(16).padStart(2, '0').toUpperCase();\n  return hex + a;\n}\n/**\n *\n * @param base [255, 255, 255, 255], [255, 255, 255], any hex string\n * @returns\n */\nexport function toHexString(base) {\n  if (typeof base === 'string') {\n    let i;\n    if (i = hexRegex.exec(base)) {\n      return i[0];\n    } else if (i = hexaRegex.exec(base)) {\n      return i[0].slice(0, 7);\n    } else if (i = sHexRegex.exec(base) || sHexaRegex.exec(base)) {\n      return `#${i[1]}${i[1]}${i[2]}${i[2]}${i[3]}${i[3]}`;\n    }\n    throw new Error(`[seemly/toHexString]: Invalid hex value ${base}.`);\n  }\n  return `#${base.slice(0, 3).map(unit => roundChannel(unit).toString(16).toUpperCase().padStart(2, '0')).join('')}`;\n}\nexport { hsl2hsv, hsv2hsl, hsv2rgb, rgb2hsv, rgb2hsl, hsl2rgb } from './convert';","map":{"version":3,"names":["colors","prefix","suffix","percent","float","hex","dhex","hslRegex","RegExp","hsvRegex","hslaRegex","hsvaRegex","rgbRegex","rgbaRegex","sHexRegex","hexRegex","sHexaRegex","hexaRegex","parseHex","value","parseInt","hsla","color","i","exec","roundDeg","roundPercent","roundAlpha","Error","e","hsva","rgba","roundChannel","normalizeAlpha","alphaValue","stringifyRgb","r","g","b","stringifyRgba","a","compositeChannel","v1","a1","v2","a2","composite","background","overlay","Array","isArray","alpha","changeColor","base","options","scaleColor","lightness","toRgbaString","getAlpha","_a","getAlphaString","v","Math","round","Number","toRgbString","toHsvString","toHsvaString","h","s","toHslString","toHslaString","l","toHexaString","slice","map","unit","toString","toUpperCase","padStart","join","length","toHexString","hsl2hsv","hsv2hsl","hsv2rgb","rgb2hsv","rgb2hsl","hsl2rgb"],"sources":["/Users/krystal/Documents/GitHub/meetings_vue3/node_modules/seemly/es/color/index.js"],"sourcesContent":["import colors from './colors';\nconst prefix = '^\\\\s*';\nconst suffix = '\\\\s*$';\nconst percent = '\\\\s*((\\\\.\\\\d+)|(\\\\d+(\\\\.\\\\d*)?))%\\\\s*'; // 4 offset\nconst float = '\\\\s*((\\\\.\\\\d+)|(\\\\d+(\\\\.\\\\d*)?))\\\\s*'; // 4 offset\nconst hex = '([0-9A-Fa-f])';\nconst dhex = '([0-9A-Fa-f]{2})';\nconst hslRegex = new RegExp(`${prefix}hsl\\\\s*\\\\(${float},${percent},${percent}\\\\)${suffix}`);\nconst hsvRegex = new RegExp(`${prefix}hsv\\\\s*\\\\(${float},${percent},${percent}\\\\)${suffix}`);\nconst hslaRegex = new RegExp(`${prefix}hsla\\\\s*\\\\(${float},${percent},${percent},${float}\\\\)${suffix}`);\nconst hsvaRegex = new RegExp(`${prefix}hsva\\\\s*\\\\(${float},${percent},${percent},${float}\\\\)${suffix}`);\nconst rgbRegex = new RegExp(`${prefix}rgb\\\\s*\\\\(${float},${float},${float}\\\\)${suffix}`);\nconst rgbaRegex = new RegExp(`${prefix}rgba\\\\s*\\\\(${float},${float},${float},${float}\\\\)${suffix}`);\nconst sHexRegex = new RegExp(`${prefix}#${hex}${hex}${hex}${suffix}`);\nconst hexRegex = new RegExp(`${prefix}#${dhex}${dhex}${dhex}${suffix}`);\nconst sHexaRegex = new RegExp(`${prefix}#${hex}${hex}${hex}${hex}${suffix}`);\nconst hexaRegex = new RegExp(`${prefix}#${dhex}${dhex}${dhex}${dhex}${suffix}`);\nfunction parseHex(value) {\n    return parseInt(value, 16);\n}\n/**\n * Convert color string to hsla array\n * @param color format like hsl(180, 100%, 100%), hsla(180, 100%, 100%, 1)\n * @returns\n */\nexport function hsla(color) {\n    try {\n        let i;\n        if ((i = hslaRegex.exec(color))) {\n            return [\n                roundDeg(i[1]),\n                roundPercent(i[5]),\n                roundPercent(i[9]),\n                roundAlpha(i[13])\n            ];\n        }\n        else if ((i = hslRegex.exec(color))) {\n            return [roundDeg(i[1]), roundPercent(i[5]), roundPercent(i[9]), 1];\n        }\n        throw new Error(`[seemly/hsla]: Invalid color value ${color}.`);\n    }\n    catch (e) {\n        throw e;\n    }\n}\n/**\n * Convert color string to hsva array\n * @param color format like hsv(180, 100%, 100%), hsva(180, 100%, 100%, 1)\n * @returns\n */\nexport function hsva(color) {\n    try {\n        let i;\n        if ((i = hsvaRegex.exec(color))) {\n            return [\n                roundDeg(i[1]),\n                roundPercent(i[5]),\n                roundPercent(i[9]),\n                roundAlpha(i[13])\n            ];\n        }\n        else if ((i = hsvRegex.exec(color))) {\n            return [roundDeg(i[1]), roundPercent(i[5]), roundPercent(i[9]), 1];\n        }\n        throw new Error(`[seemly/hsva]: Invalid color value ${color}.`);\n    }\n    catch (e) {\n        throw e;\n    }\n}\n/**\n * Convert color string to rgba array.\n * @param color format like #000[0], #000000[00], rgb(0, 0, 0), rgba(0, 0, 0, 0) and basic color keywords https://www.w3.org/TR/css-color-3/#html4 and transparent\n * @returns\n */\nexport function rgba(color) {\n    try {\n        let i;\n        if ((i = hexRegex.exec(color))) {\n            return [parseHex(i[1]), parseHex(i[2]), parseHex(i[3]), 1];\n        }\n        else if ((i = rgbRegex.exec(color))) {\n            return [roundChannel(i[1]), roundChannel(i[5]), roundChannel(i[9]), 1];\n        }\n        else if ((i = rgbaRegex.exec(color))) {\n            return [\n                roundChannel(i[1]),\n                roundChannel(i[5]),\n                roundChannel(i[9]),\n                roundAlpha(i[13])\n            ];\n        }\n        else if ((i = sHexRegex.exec(color))) {\n            return [\n                parseHex(i[1] + i[1]),\n                parseHex(i[2] + i[2]),\n                parseHex(i[3] + i[3]),\n                1\n            ];\n        }\n        else if ((i = hexaRegex.exec(color))) {\n            return [\n                parseHex(i[1]),\n                parseHex(i[2]),\n                parseHex(i[3]),\n                roundAlpha(parseHex(i[4]) / 255)\n            ];\n        }\n        else if ((i = sHexaRegex.exec(color))) {\n            return [\n                parseHex(i[1] + i[1]),\n                parseHex(i[2] + i[2]),\n                parseHex(i[3] + i[3]),\n                roundAlpha(parseHex(i[4] + i[4]) / 255)\n            ];\n        }\n        else if (color in colors) {\n            return rgba(colors[color]);\n        }\n        throw new Error(`[seemly/rgba]: Invalid color value ${color}.`);\n    }\n    catch (e) {\n        throw e;\n    }\n}\nfunction normalizeAlpha(alphaValue) {\n    return alphaValue > 1 ? 1 : alphaValue < 0 ? 0 : alphaValue;\n}\nfunction stringifyRgb(r, g, b) {\n    return `rgb(${roundChannel(r)}, ${roundChannel(g)}, ${roundChannel(b)})`;\n}\nfunction stringifyRgba(r, g, b, a) {\n    return `rgba(${roundChannel(r)}, ${roundChannel(g)}, ${roundChannel(b)}, ${normalizeAlpha(a)})`;\n}\nfunction compositeChannel(v1, a1, v2, a2, a) {\n    return roundChannel((v1 * a1 * (1 - a2) + v2 * a2) / a);\n}\nexport function composite(background, overlay) {\n    if (!Array.isArray(background))\n        background = rgba(background);\n    if (!Array.isArray(overlay))\n        overlay = rgba(overlay);\n    const a1 = background[3];\n    const a2 = overlay[3];\n    const alpha = roundAlpha(a1 + a2 - a1 * a2);\n    return stringifyRgba(compositeChannel(background[0], a1, overlay[0], a2, alpha), compositeChannel(background[1], a1, overlay[1], a2, alpha), compositeChannel(background[2], a1, overlay[2], a2, alpha), alpha);\n}\nexport function changeColor(base, options) {\n    const [r, g, b, a = 1] = Array.isArray(base) ? base : rgba(base);\n    if (options.alpha) {\n        return stringifyRgba(r, g, b, options.alpha);\n    }\n    return stringifyRgba(r, g, b, a);\n}\nexport function scaleColor(base, options) {\n    const [r, g, b, a = 1] = Array.isArray(base) ? base : rgba(base);\n    const { lightness = 1, alpha = 1 } = options;\n    return toRgbaString([r * lightness, g * lightness, b * lightness, a * alpha]);\n}\nexport function getAlpha(base) {\n    var _a;\n    const alpha = (_a = (Array.isArray(base) ? base : rgba(base))[3]) !== null && _a !== void 0 ? _a : 1;\n    return alpha;\n}\nexport function getAlphaString(base) {\n    return `${getAlpha(base)}`;\n}\nexport function roundAlpha(value) {\n    const v = Math.round(Number(value) * 100) / 100;\n    if (v > 1)\n        return 1;\n    if (v < 0)\n        return 0;\n    return v;\n}\nexport function roundDeg(value) {\n    const v = Math.round(Number(value));\n    if (v >= 360)\n        return 0;\n    if (v < 0)\n        return 0;\n    return v;\n}\nexport function roundChannel(value) {\n    const v = Math.round(Number(value));\n    if (v > 255)\n        return 255;\n    if (v < 0)\n        return 0;\n    return v;\n}\nexport function roundPercent(value) {\n    const v = Math.round(Number(value));\n    if (v > 100)\n        return 100;\n    if (v < 0)\n        return 0;\n    return v;\n}\nexport function toRgbString(base) {\n    const [r, g, b] = Array.isArray(base) ? base : rgba(base);\n    return stringifyRgb(r, g, b);\n}\nexport function toRgbaString(base) {\n    const [r, g, b] = base;\n    if (3 in base) {\n        return `rgba(${roundChannel(r)}, ${roundChannel(g)}, ${roundChannel(b)}, ${roundAlpha(base[3])})`;\n    }\n    return `rgba(${roundChannel(r)}, ${roundChannel(g)}, ${roundChannel(b)}, 1)`;\n}\nexport function toHsvString(base) {\n    return `hsv(${roundDeg(base[0])}, ${roundPercent(base[1])}%, ${roundPercent(base[2])}%)`;\n}\nexport function toHsvaString(base) {\n    const [h, s, v] = base;\n    if (3 in base) {\n        return `hsva(${roundDeg(h)}, ${roundPercent(s)}%, ${roundPercent(v)}%, ${roundAlpha(base[3])})`;\n    }\n    return `hsva(${roundDeg(h)}, ${roundPercent(s)}%, ${roundPercent(v)}%, 1)`;\n}\nexport function toHslString(base) {\n    return `hsl(${roundDeg(base[0])}, ${roundPercent(base[1])}%, ${roundPercent(base[2])}%)`;\n}\nexport function toHslaString(base) {\n    const [h, s, l] = base;\n    if (3 in base) {\n        return `hsla(${roundDeg(h)}, ${roundPercent(s)}%, ${roundPercent(l)}%, ${roundAlpha(base[3])})`;\n    }\n    return `hsla(${roundDeg(h)}, ${roundPercent(s)}%, ${roundPercent(l)}%, 1)`;\n}\n/**\n *\n * @param base [255, 255, 255, 255], [255, 255, 255], any hex string\n * @returns\n */\nexport function toHexaString(base) {\n    if (typeof base === 'string') {\n        let i;\n        if (i = hexRegex.exec(base)) {\n            return `${i[0]}FF`;\n        }\n        else if (i = hexaRegex.exec(base)) {\n            return i[0];\n        }\n        else if (i = sHexRegex.exec(base)) {\n            return `#${i[1]}${i[1]}${i[2]}${i[2]}${i[3]}${i[3]}FF`;\n        }\n        else if (i = sHexaRegex.exec(base)) {\n            return `#${i[1]}${i[1]}${i[2]}${i[2]}${i[3]}${i[3]}${i[4]}${i[4]}`;\n        }\n        throw new Error(`[seemly/toHexString]: Invalid hex value ${base}.`);\n    }\n    const hex = `#${base\n        .slice(0, 3)\n        .map((unit) => roundChannel(unit).toString(16).toUpperCase().padStart(2, '0'))\n        .join('')}`;\n    const a = base.length === 3\n        ? 'FF'\n        : roundChannel(base[3] * 255)\n            .toString(16)\n            .padStart(2, '0')\n            .toUpperCase();\n    return hex + a;\n}\n/**\n *\n * @param base [255, 255, 255, 255], [255, 255, 255], any hex string\n * @returns\n */\nexport function toHexString(base) {\n    if (typeof base === 'string') {\n        let i;\n        if (i = hexRegex.exec(base)) {\n            return i[0];\n        }\n        else if (i = hexaRegex.exec(base)) {\n            return i[0].slice(0, 7);\n        }\n        else if (i = (sHexRegex.exec(base) || sHexaRegex.exec(base))) {\n            return `#${i[1]}${i[1]}${i[2]}${i[2]}${i[3]}${i[3]}`;\n        }\n        throw new Error(`[seemly/toHexString]: Invalid hex value ${base}.`);\n    }\n    return `#${base\n        .slice(0, 3)\n        .map((unit) => roundChannel(unit).toString(16).toUpperCase().padStart(2, '0'))\n        .join('')}`;\n}\nexport { hsl2hsv, hsv2hsl, hsv2rgb, rgb2hsv, rgb2hsl, hsl2rgb } from './convert';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}