{"ast":null,"code":"import { toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock, createVNode as _createVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tag = _resolveComponent(\"el-tag\");\n  const _component_el_input = _resolveComponent(\"el-input\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createTextVNode(_toDisplayString(_ctx.api) + \" \", 1 /* TEXT */), _createVNode(_component_el_input, {\n    modelValue: $data.inputValue,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.inputValue = $event),\n    onFocus: $options.handleInputConfirm\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.tags, tag => {\n      return _openBlock(), _createBlock(_component_el_tag, {\n        key: tag.name,\n        closable: \"\",\n        type: tag.type,\n        onClose: $event => $options.handleClose(tag)\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(tag.name), 1 /* TEXT */)]),\n\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"type\", \"onClose\"]);\n    }), 128 /* KEYED_FRAGMENT */))]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\", \"onFocus\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;;+FACKA,QAAG,IAAG,GACT,8BAIWC;gBAJQC,gBAAU;+DAAVA,gBAAU;IAAGC,OAAK,EAAEC;;sBAC7B,MAAmB,oBAA3BC,oBAESC,6BAFaJ,UAAI,EAAXK,GAAG;2BAAlBC,aAESC;QAFoBC,GAAG,EAAEH,GAAG,CAACI,IAAI;QAAEC,QAAQ,EAAR,EAAQ;QAAEC,IAAI,EAAEN,GAAG,CAACM,IAAI;QAAGC,OAAK,YAAEV,oBAAW,CAACG,GAAG;;0BAC3F,MAAc,mCAAXA,GAAG,CAACI,IAAI","names":["_ctx","_component_el_input","$data","onFocus","$options","_createElementBlock","_Fragment","tag","_createBlock","_component_el_tag","key","name","closable","type","onClose"],"sourceRoot":"","sources":["/Users/elmo/Documents/GitHub/meetings_vue3/src/views/test.vue"],"sourcesContent":["<template>\n  {{ api }}\n  <el-input v-model=\"inputValue\" @focus=\"handleInputConfirm\">\n    <el-tag v-for=\"tag in tags\" :key=\"tag.name\" closable :type=\"tag.type\" @close=\"handleClose(tag)\">\n      {{ tag.name }}\n    </el-tag>\n  </el-input>\n</template>\n\n<script>\nexport default {\n  name: \"testPage\",\n  data() {\n    return {\n      tags: [\n        {\n          name: \"123\",\n          id: 0,\n        },\n        {\n          id: 1,\n          name: \"222\",\n        },\n      ],\n      inputVisible: false,\n      inputValue: \"\",\n    };\n  },\n  methods: {\n    handleClose(tag) {\n      this.tags.splice(this.tags.indexOf(tag), 1);\n    },\n    /*showInput() {\n      this.inputVisible = true;\n      this.$nextTick((_) => {\n        this.$refs.saveTagInput.$refs.input.focus();\n      });\n    },*/\n    handleInputConfirm() {\n      let inputValue = this.inputValue;\n      if (inputValue) {\n        this.tags.push(inputValue);\n      }\n      this.inputVisible = false;\n      this.inputValue = \"\";\n    },\n  },\n  mounted() {},\n};\n</script>\n\n<style scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}