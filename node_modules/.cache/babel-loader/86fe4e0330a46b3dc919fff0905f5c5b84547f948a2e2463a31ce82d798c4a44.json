{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport function getPath(key, {\n  includeGroup = false,\n  includeSelf = true\n}, treeMate) {\n  var _a;\n  const treeNodeMap = treeMate.treeNodeMap;\n  let treeNode = key === null || key === undefined ? null : (_a = treeNodeMap.get(key)) !== null && _a !== void 0 ? _a : null;\n  const mergedPath = {\n    keyPath: [],\n    treeNodePath: [],\n    treeNode: treeNode\n  };\n  if (treeNode === null || treeNode === void 0 ? void 0 : treeNode.ignored) {\n    mergedPath.treeNode = null;\n    return mergedPath;\n  }\n  while (treeNode) {\n    if (!treeNode.ignored && (includeGroup || !treeNode.isGroup)) {\n      mergedPath.treeNodePath.push(treeNode);\n    }\n    treeNode = treeNode.parent;\n  }\n  mergedPath.treeNodePath.reverse();\n  if (!includeSelf) mergedPath.treeNodePath.pop();\n  mergedPath.keyPath = mergedPath.treeNodePath.map(treeNode => treeNode.key);\n  return mergedPath;\n}","map":{"version":3,"names":["getPath","key","includeGroup","includeSelf","treeMate","_a","treeNodeMap","treeNode","undefined","get","mergedPath","keyPath","treeNodePath","ignored","isGroup","push","parent","reverse","pop","map"],"sources":["/Users/elmo/GitHub/meetings_vue3/node_modules/treemate/es/path.js"],"sourcesContent":["export function getPath(key, { includeGroup = false, includeSelf = true }, treeMate) {\n    var _a;\n    const treeNodeMap = treeMate.treeNodeMap;\n    let treeNode = key === null || key === undefined ? null : (_a = treeNodeMap.get(key)) !== null && _a !== void 0 ? _a : null;\n    const mergedPath = {\n        keyPath: [],\n        treeNodePath: [],\n        treeNode: treeNode\n    };\n    if (treeNode === null || treeNode === void 0 ? void 0 : treeNode.ignored) {\n        mergedPath.treeNode = null;\n        return mergedPath;\n    }\n    while (treeNode) {\n        if (!treeNode.ignored && (includeGroup || !treeNode.isGroup)) {\n            mergedPath.treeNodePath.push(treeNode);\n        }\n        treeNode = treeNode.parent;\n    }\n    mergedPath.treeNodePath.reverse();\n    if (!includeSelf)\n        mergedPath.treeNodePath.pop();\n    mergedPath.keyPath = mergedPath.treeNodePath.map((treeNode) => treeNode.key);\n    return mergedPath;\n}\n"],"mappings":";AAAA,OAAO,SAASA,OAAO,CAACC,GAAG,EAAE;EAAEC,YAAY,GAAG,KAAK;EAAEC,WAAW,GAAG;AAAK,CAAC,EAAEC,QAAQ,EAAE;EACjF,IAAIC,EAAE;EACN,MAAMC,WAAW,GAAGF,QAAQ,CAACE,WAAW;EACxC,IAAIC,QAAQ,GAAGN,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKO,SAAS,GAAG,IAAI,GAAG,CAACH,EAAE,GAAGC,WAAW,CAACG,GAAG,CAACR,GAAG,CAAC,MAAM,IAAI,IAAII,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI;EAC3H,MAAMK,UAAU,GAAG;IACfC,OAAO,EAAE,EAAE;IACXC,YAAY,EAAE,EAAE;IAChBL,QAAQ,EAAEA;EACd,CAAC;EACD,IAAIA,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACM,OAAO,EAAE;IACtEH,UAAU,CAACH,QAAQ,GAAG,IAAI;IAC1B,OAAOG,UAAU;EACrB;EACA,OAAOH,QAAQ,EAAE;IACb,IAAI,CAACA,QAAQ,CAACM,OAAO,KAAKX,YAAY,IAAI,CAACK,QAAQ,CAACO,OAAO,CAAC,EAAE;MAC1DJ,UAAU,CAACE,YAAY,CAACG,IAAI,CAACR,QAAQ,CAAC;IAC1C;IACAA,QAAQ,GAAGA,QAAQ,CAACS,MAAM;EAC9B;EACAN,UAAU,CAACE,YAAY,CAACK,OAAO,EAAE;EACjC,IAAI,CAACd,WAAW,EACZO,UAAU,CAACE,YAAY,CAACM,GAAG,EAAE;EACjCR,UAAU,CAACC,OAAO,GAAGD,UAAU,CAACE,YAAY,CAACO,GAAG,CAAEZ,QAAQ,IAAKA,QAAQ,CAACN,GAAG,CAAC;EAC5E,OAAOS,UAAU;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}