{"ast":null,"code":"import { h } from 'vue';\nexport function renderDropMark({\n  position,\n  offsetLevel,\n  indent,\n  el\n}) {\n  const style = {\n    position: 'absolute',\n    boxSizing: 'border-box',\n    right: 0\n  };\n  if (position === 'inside') {\n    style.left = 0;\n    style.top = 0;\n    style.bottom = 0;\n    style.borderRadius = 'inherit';\n    style.boxShadow = 'inset 0 0 0 2px var(--n-drop-mark-color)';\n  } else {\n    const cssPosition = position === 'before' ? 'top' : 'bottom';\n    style[cssPosition] = 0;\n    // The left prop should be modified when tree's style is changed\n    // Maybe it is possible to use content left\n    style.left = `${el.offsetLeft + 6 - offsetLevel * indent}px`;\n    style.height = '2px';\n    style.backgroundColor = 'var(--n-drop-mark-color)';\n    style.transformOrigin = cssPosition;\n    style.borderRadius = '1px';\n    style.transform = position === 'before' ? 'translateY(-4px)' : 'translateY(4px)';\n  }\n  return h(\"div\", {\n    style: style\n  });\n}\nexport function defaultAllowDrop({\n  dropPosition,\n  node\n}) {\n  if (node.isLeaf === false) return true;\n  if (node.children) {\n    return true;\n  }\n  return dropPosition !== 'inside';\n}","map":{"version":3,"names":["h","renderDropMark","position","offsetLevel","indent","el","style","boxSizing","right","left","top","bottom","borderRadius","boxShadow","cssPosition","offsetLeft","height","backgroundColor","transformOrigin","transform","defaultAllowDrop","dropPosition","node","isLeaf","children"],"sources":["/Users/krystal/Documents/GitHub/meetings_vue3/node_modules/naive-ui/es/tree/src/dnd.js"],"sourcesContent":["import { h } from 'vue';\nexport function renderDropMark({ position, offsetLevel, indent, el }) {\n    const style = {\n        position: 'absolute',\n        boxSizing: 'border-box',\n        right: 0\n    };\n    if (position === 'inside') {\n        style.left = 0;\n        style.top = 0;\n        style.bottom = 0;\n        style.borderRadius = 'inherit';\n        style.boxShadow = 'inset 0 0 0 2px var(--n-drop-mark-color)';\n    }\n    else {\n        const cssPosition = position === 'before' ? 'top' : 'bottom';\n        style[cssPosition] = 0;\n        // The left prop should be modified when tree's style is changed\n        // Maybe it is possible to use content left\n        style.left = `${el.offsetLeft + 6 - offsetLevel * indent}px`;\n        style.height = '2px';\n        style.backgroundColor = 'var(--n-drop-mark-color)';\n        style.transformOrigin = cssPosition;\n        style.borderRadius = '1px';\n        style.transform =\n            position === 'before' ? 'translateY(-4px)' : 'translateY(4px)';\n    }\n    return h(\"div\", { style: style });\n}\nexport function defaultAllowDrop({ dropPosition, node }) {\n    if (node.isLeaf === false)\n        return true;\n    if (node.children) {\n        return true;\n    }\n    return dropPosition !== 'inside';\n}\n"],"mappings":"AAAA,SAASA,CAAC,QAAQ,KAAK;AACvB,OAAO,SAASC,cAAc,CAAC;EAAEC,QAAQ;EAAEC,WAAW;EAAEC,MAAM;EAAEC;AAAG,CAAC,EAAE;EAClE,MAAMC,KAAK,GAAG;IACVJ,QAAQ,EAAE,UAAU;IACpBK,SAAS,EAAE,YAAY;IACvBC,KAAK,EAAE;EACX,CAAC;EACD,IAAIN,QAAQ,KAAK,QAAQ,EAAE;IACvBI,KAAK,CAACG,IAAI,GAAG,CAAC;IACdH,KAAK,CAACI,GAAG,GAAG,CAAC;IACbJ,KAAK,CAACK,MAAM,GAAG,CAAC;IAChBL,KAAK,CAACM,YAAY,GAAG,SAAS;IAC9BN,KAAK,CAACO,SAAS,GAAG,0CAA0C;EAChE,CAAC,MACI;IACD,MAAMC,WAAW,GAAGZ,QAAQ,KAAK,QAAQ,GAAG,KAAK,GAAG,QAAQ;IAC5DI,KAAK,CAACQ,WAAW,CAAC,GAAG,CAAC;IACtB;IACA;IACAR,KAAK,CAACG,IAAI,GAAI,GAAEJ,EAAE,CAACU,UAAU,GAAG,CAAC,GAAGZ,WAAW,GAAGC,MAAO,IAAG;IAC5DE,KAAK,CAACU,MAAM,GAAG,KAAK;IACpBV,KAAK,CAACW,eAAe,GAAG,0BAA0B;IAClDX,KAAK,CAACY,eAAe,GAAGJ,WAAW;IACnCR,KAAK,CAACM,YAAY,GAAG,KAAK;IAC1BN,KAAK,CAACa,SAAS,GACXjB,QAAQ,KAAK,QAAQ,GAAG,kBAAkB,GAAG,iBAAiB;EACtE;EACA,OAAOF,CAAC,CAAC,KAAK,EAAE;IAAEM,KAAK,EAAEA;EAAM,CAAC,CAAC;AACrC;AACA,OAAO,SAASc,gBAAgB,CAAC;EAAEC,YAAY;EAAEC;AAAK,CAAC,EAAE;EACrD,IAAIA,IAAI,CAACC,MAAM,KAAK,KAAK,EACrB,OAAO,IAAI;EACf,IAAID,IAAI,CAACE,QAAQ,EAAE;IACf,OAAO,IAAI;EACf;EACA,OAAOH,YAAY,KAAK,QAAQ;AACpC"},"metadata":{},"sourceType":"module","externalDependencies":[]}