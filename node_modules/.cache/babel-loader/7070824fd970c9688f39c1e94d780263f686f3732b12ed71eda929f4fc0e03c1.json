{"ast":null,"code":"import commonVars from './_common';\nimport { commonLight } from '../../_styles/common';\nexport const self = vars => {\n  const {\n    primaryColor,\n    textColor2,\n    borderColor,\n    lineHeight,\n    fontSize,\n    borderRadiusSmall,\n    dividerColor,\n    fontWeightStrong,\n    textColor1,\n    textColor3,\n    infoColor,\n    warningColor,\n    errorColor,\n    successColor,\n    codeColor\n  } = vars;\n  return Object.assign(Object.assign({}, commonVars), {\n    aTextColor: primaryColor,\n    blockquoteTextColor: textColor2,\n    blockquotePrefixColor: borderColor,\n    blockquoteLineHeight: lineHeight,\n    blockquoteFontSize: fontSize,\n    codeBorderRadius: borderRadiusSmall,\n    liTextColor: textColor2,\n    liLineHeight: lineHeight,\n    liFontSize: fontSize,\n    hrColor: dividerColor,\n    headerFontWeight: fontWeightStrong,\n    headerTextColor: textColor1,\n    pTextColor: textColor2,\n    pTextColor1Depth: textColor1,\n    pTextColor2Depth: textColor2,\n    pTextColor3Depth: textColor3,\n    pLineHeight: lineHeight,\n    pFontSize: fontSize,\n    headerBarColor: primaryColor,\n    headerBarColorPrimary: primaryColor,\n    headerBarColorInfo: infoColor,\n    headerBarColorError: errorColor,\n    headerBarColorWarning: warningColor,\n    headerBarColorSuccess: successColor,\n    textColor: textColor2,\n    textColor1Depth: textColor1,\n    textColor2Depth: textColor2,\n    textColor3Depth: textColor3,\n    textColorPrimary: primaryColor,\n    textColorInfo: infoColor,\n    textColorSuccess: successColor,\n    textColorWarning: warningColor,\n    textColorError: errorColor,\n    codeTextColor: textColor2,\n    codeColor,\n    codeBorder: '1px solid #0000'\n  });\n};\nconst typographyLight = {\n  name: 'Typography',\n  common: commonLight,\n  self\n};\nexport default typographyLight;","map":{"version":3,"names":["commonVars","commonLight","self","vars","primaryColor","textColor2","borderColor","lineHeight","fontSize","borderRadiusSmall","dividerColor","fontWeightStrong","textColor1","textColor3","infoColor","warningColor","errorColor","successColor","codeColor","Object","assign","aTextColor","blockquoteTextColor","blockquotePrefixColor","blockquoteLineHeight","blockquoteFontSize","codeBorderRadius","liTextColor","liLineHeight","liFontSize","hrColor","headerFontWeight","headerTextColor","pTextColor","pTextColor1Depth","pTextColor2Depth","pTextColor3Depth","pLineHeight","pFontSize","headerBarColor","headerBarColorPrimary","headerBarColorInfo","headerBarColorError","headerBarColorWarning","headerBarColorSuccess","textColor","textColor1Depth","textColor2Depth","textColor3Depth","textColorPrimary","textColorInfo","textColorSuccess","textColorWarning","textColorError","codeTextColor","codeBorder","typographyLight","name","common"],"sources":["/Users/elmo/GitHub/meetings_vue3/node_modules/naive-ui/es/typography/styles/light.js"],"sourcesContent":["import commonVars from './_common';\nimport { commonLight } from '../../_styles/common';\nexport const self = (vars) => {\n    const { primaryColor, textColor2, borderColor, lineHeight, fontSize, borderRadiusSmall, dividerColor, fontWeightStrong, textColor1, textColor3, infoColor, warningColor, errorColor, successColor, codeColor } = vars;\n    return Object.assign(Object.assign({}, commonVars), { aTextColor: primaryColor, blockquoteTextColor: textColor2, blockquotePrefixColor: borderColor, blockquoteLineHeight: lineHeight, blockquoteFontSize: fontSize, codeBorderRadius: borderRadiusSmall, liTextColor: textColor2, liLineHeight: lineHeight, liFontSize: fontSize, hrColor: dividerColor, headerFontWeight: fontWeightStrong, headerTextColor: textColor1, pTextColor: textColor2, pTextColor1Depth: textColor1, pTextColor2Depth: textColor2, pTextColor3Depth: textColor3, pLineHeight: lineHeight, pFontSize: fontSize, headerBarColor: primaryColor, headerBarColorPrimary: primaryColor, headerBarColorInfo: infoColor, headerBarColorError: errorColor, headerBarColorWarning: warningColor, headerBarColorSuccess: successColor, textColor: textColor2, textColor1Depth: textColor1, textColor2Depth: textColor2, textColor3Depth: textColor3, textColorPrimary: primaryColor, textColorInfo: infoColor, textColorSuccess: successColor, textColorWarning: warningColor, textColorError: errorColor, codeTextColor: textColor2, codeColor, codeBorder: '1px solid #0000' });\n};\nconst typographyLight = {\n    name: 'Typography',\n    common: commonLight,\n    self\n};\nexport default typographyLight;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,WAAW;AAClC,SAASC,WAAW,QAAQ,sBAAsB;AAClD,OAAO,MAAMC,IAAI,GAAIC,IAAI,IAAK;EAC1B,MAAM;IAAEC,YAAY;IAAEC,UAAU;IAAEC,WAAW;IAAEC,UAAU;IAAEC,QAAQ;IAAEC,iBAAiB;IAAEC,YAAY;IAAEC,gBAAgB;IAAEC,UAAU;IAAEC,UAAU;IAAEC,SAAS;IAAEC,YAAY;IAAEC,UAAU;IAAEC,YAAY;IAAEC;EAAU,CAAC,GAAGf,IAAI;EACrN,OAAOgB,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEpB,UAAU,CAAC,EAAE;IAAEqB,UAAU,EAAEjB,YAAY;IAAEkB,mBAAmB,EAAEjB,UAAU;IAAEkB,qBAAqB,EAAEjB,WAAW;IAAEkB,oBAAoB,EAAEjB,UAAU;IAAEkB,kBAAkB,EAAEjB,QAAQ;IAAEkB,gBAAgB,EAAEjB,iBAAiB;IAAEkB,WAAW,EAAEtB,UAAU;IAAEuB,YAAY,EAAErB,UAAU;IAAEsB,UAAU,EAAErB,QAAQ;IAAEsB,OAAO,EAAEpB,YAAY;IAAEqB,gBAAgB,EAAEpB,gBAAgB;IAAEqB,eAAe,EAAEpB,UAAU;IAAEqB,UAAU,EAAE5B,UAAU;IAAE6B,gBAAgB,EAAEtB,UAAU;IAAEuB,gBAAgB,EAAE9B,UAAU;IAAE+B,gBAAgB,EAAEvB,UAAU;IAAEwB,WAAW,EAAE9B,UAAU;IAAE+B,SAAS,EAAE9B,QAAQ;IAAE+B,cAAc,EAAEnC,YAAY;IAAEoC,qBAAqB,EAAEpC,YAAY;IAAEqC,kBAAkB,EAAE3B,SAAS;IAAE4B,mBAAmB,EAAE1B,UAAU;IAAE2B,qBAAqB,EAAE5B,YAAY;IAAE6B,qBAAqB,EAAE3B,YAAY;IAAE4B,SAAS,EAAExC,UAAU;IAAEyC,eAAe,EAAElC,UAAU;IAAEmC,eAAe,EAAE1C,UAAU;IAAE2C,eAAe,EAAEnC,UAAU;IAAEoC,gBAAgB,EAAE7C,YAAY;IAAE8C,aAAa,EAAEpC,SAAS;IAAEqC,gBAAgB,EAAElC,YAAY;IAAEmC,gBAAgB,EAAErC,YAAY;IAAEsC,cAAc,EAAErC,UAAU;IAAEsC,aAAa,EAAEjD,UAAU;IAAEa,SAAS;IAAEqC,UAAU,EAAE;EAAkB,CAAC,CAAC;AACtlC,CAAC;AACD,MAAMC,eAAe,GAAG;EACpBC,IAAI,EAAE,YAAY;EAClBC,MAAM,EAAEzD,WAAW;EACnBC;AACJ,CAAC;AACD,eAAesD,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}