{"ast":null,"code":"import { hsl2hsv, hsl2rgb, hsla, hsv2hsl, hsv2rgb, hsva, rgb2hsl, rgb2hsv, rgba, toHexaString, toHslaString, toHsvaString, toRgbaString } from 'seemly';\nimport { warn } from '../../_utils';\nexport function deriveDefaultValue(modes, showAlpha) {\n  const mode = modes[0];\n  switch (mode) {\n    case 'hex':\n      return showAlpha ? '#000000FF' : '#000000';\n    case 'rgb':\n      return showAlpha ? 'rgba(0, 0, 0, 1)' : 'rgb(0, 0, 0)';\n    case 'hsl':\n      return showAlpha ? 'hsla(0, 0%, 0%, 1)' : 'hsl(0, 0%, 0%)';\n    case 'hsv':\n      return showAlpha ? 'hsva(0, 0%, 0%, 1)' : 'hsv(0, 0%, 0%)';\n  }\n  if (process.env.NODE_ENV !== 'production') warn('color-picker', 'props.modes is invalid.');\n  // in case of invalid modes\n  return '#000000';\n}\nexport function getModeFromValue(color) {\n  if (color === null) return null;\n  if (/^ *#/.test(color)) return 'hex';\n  if (color.includes('rgb')) return 'rgb';\n  if (color.includes('hsl')) return 'hsl';\n  if (color.includes('hsv')) return 'hsv';\n  return null;\n}\nexport function floor(color) {\n  return color.map(channel => Math.floor(channel));\n}\nexport function normalizeHue(hue) {\n  hue = Math.round(hue);\n  return hue >= 360 ? 359 : hue < 0 ? 0 : hue;\n}\nexport function normalizeAlpha(alpha) {\n  alpha = Math.round(alpha * 100) / 100;\n  return alpha > 1 ? 1 : alpha < 0 ? 0 : alpha;\n}\nconst convert = {\n  rgb: {\n    hex(value) {\n      return toHexaString(rgba(value));\n    },\n    hsl(value) {\n      const [r, g, b, a] = rgba(value);\n      return toHslaString([...rgb2hsl(r, g, b), a]);\n    },\n    hsv(value) {\n      const [r, g, b, a] = rgba(value);\n      return toHsvaString([...rgb2hsv(r, g, b), a]);\n    }\n  },\n  hex: {\n    rgb(value) {\n      return toRgbaString(rgba(value));\n    },\n    hsl(value) {\n      const [r, g, b, a] = rgba(value);\n      return toHslaString([...rgb2hsl(r, g, b), a]);\n    },\n    hsv(value) {\n      const [r, g, b, a] = rgba(value);\n      return toHsvaString([...rgb2hsv(r, g, b), a]);\n    }\n  },\n  hsl: {\n    hex(value) {\n      const [h, s, l, a] = hsla(value);\n      return toHexaString([...hsl2rgb(h, s, l), a]);\n    },\n    rgb(value) {\n      const [h, s, l, a] = hsla(value);\n      return toRgbaString([...hsl2rgb(h, s, l), a]);\n    },\n    hsv(value) {\n      const [h, s, l, a] = hsla(value);\n      return toHsvaString([...hsl2hsv(h, s, l), a]);\n    }\n  },\n  hsv: {\n    hex(value) {\n      const [h, s, v, a] = hsva(value);\n      return toHexaString([...hsv2rgb(h, s, v), a]);\n    },\n    rgb(value) {\n      const [h, s, v, a] = hsva(value);\n      return toRgbaString([...hsv2rgb(h, s, v), a]);\n    },\n    hsl(value) {\n      const [h, s, v, a] = hsva(value);\n      return toHslaString([...hsv2hsl(h, s, v), a]);\n    }\n  }\n};\n// implementation\nexport function convertColor(value, mode, originalMode) {\n  originalMode = originalMode || getModeFromValue(value);\n  if (!originalMode) return null;\n  if (originalMode === mode) return value;\n  const conversions = convert[originalMode];\n  return conversions[mode](value);\n}","map":{"version":3,"names":["hsl2hsv","hsl2rgb","hsla","hsv2hsl","hsv2rgb","hsva","rgb2hsl","rgb2hsv","rgba","toHexaString","toHslaString","toHsvaString","toRgbaString","warn","deriveDefaultValue","modes","showAlpha","mode","process","env","NODE_ENV","getModeFromValue","color","test","includes","floor","map","channel","Math","normalizeHue","hue","round","normalizeAlpha","alpha","convert","rgb","hex","value","hsl","r","g","b","a","hsv","h","s","l","v","convertColor","originalMode","conversions"],"sources":["/Users/elmo/GitHub/meetings_vue3/node_modules/naive-ui/es/color-picker/src/utils.js"],"sourcesContent":["import { hsl2hsv, hsl2rgb, hsla, hsv2hsl, hsv2rgb, hsva, rgb2hsl, rgb2hsv, rgba, toHexaString, toHslaString, toHsvaString, toRgbaString } from 'seemly';\nimport { warn } from '../../_utils';\nexport function deriveDefaultValue(modes, showAlpha) {\n    const mode = modes[0];\n    switch (mode) {\n        case 'hex':\n            return showAlpha ? '#000000FF' : '#000000';\n        case 'rgb':\n            return showAlpha ? 'rgba(0, 0, 0, 1)' : 'rgb(0, 0, 0)';\n        case 'hsl':\n            return showAlpha ? 'hsla(0, 0%, 0%, 1)' : 'hsl(0, 0%, 0%)';\n        case 'hsv':\n            return showAlpha ? 'hsva(0, 0%, 0%, 1)' : 'hsv(0, 0%, 0%)';\n    }\n    if (process.env.NODE_ENV !== 'production')\n        warn('color-picker', 'props.modes is invalid.');\n    // in case of invalid modes\n    return '#000000';\n}\nexport function getModeFromValue(color) {\n    if (color === null)\n        return null;\n    if (/^ *#/.test(color))\n        return 'hex';\n    if (color.includes('rgb'))\n        return 'rgb';\n    if (color.includes('hsl'))\n        return 'hsl';\n    if (color.includes('hsv'))\n        return 'hsv';\n    return null;\n}\nexport function floor(color) {\n    return color.map((channel) => Math.floor(channel));\n}\nexport function normalizeHue(hue) {\n    hue = Math.round(hue);\n    return hue >= 360 ? 359 : hue < 0 ? 0 : hue;\n}\nexport function normalizeAlpha(alpha) {\n    alpha = Math.round(alpha * 100) / 100;\n    return alpha > 1 ? 1 : alpha < 0 ? 0 : alpha;\n}\nconst convert = {\n    rgb: {\n        hex(value) {\n            return toHexaString(rgba(value));\n        },\n        hsl(value) {\n            const [r, g, b, a] = rgba(value);\n            return toHslaString([...rgb2hsl(r, g, b), a]);\n        },\n        hsv(value) {\n            const [r, g, b, a] = rgba(value);\n            return toHsvaString([...rgb2hsv(r, g, b), a]);\n        }\n    },\n    hex: {\n        rgb(value) {\n            return toRgbaString(rgba(value));\n        },\n        hsl(value) {\n            const [r, g, b, a] = rgba(value);\n            return toHslaString([...rgb2hsl(r, g, b), a]);\n        },\n        hsv(value) {\n            const [r, g, b, a] = rgba(value);\n            return toHsvaString([...rgb2hsv(r, g, b), a]);\n        }\n    },\n    hsl: {\n        hex(value) {\n            const [h, s, l, a] = hsla(value);\n            return toHexaString([...hsl2rgb(h, s, l), a]);\n        },\n        rgb(value) {\n            const [h, s, l, a] = hsla(value);\n            return toRgbaString([...hsl2rgb(h, s, l), a]);\n        },\n        hsv(value) {\n            const [h, s, l, a] = hsla(value);\n            return toHsvaString([...hsl2hsv(h, s, l), a]);\n        }\n    },\n    hsv: {\n        hex(value) {\n            const [h, s, v, a] = hsva(value);\n            return toHexaString([...hsv2rgb(h, s, v), a]);\n        },\n        rgb(value) {\n            const [h, s, v, a] = hsva(value);\n            return toRgbaString([...hsv2rgb(h, s, v), a]);\n        },\n        hsl(value) {\n            const [h, s, v, a] = hsva(value);\n            return toHslaString([...hsv2hsl(h, s, v), a]);\n        }\n    }\n};\n// implementation\nexport function convertColor(value, mode, originalMode) {\n    originalMode = originalMode || getModeFromValue(value);\n    if (!originalMode)\n        return null;\n    if (originalMode === mode)\n        return value;\n    const conversions = convert[originalMode];\n    return conversions[mode](value);\n}\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,OAAO,EAAEC,IAAI,EAAEC,OAAO,EAAEC,OAAO,EAAEC,IAAI,EAAEC,OAAO,EAAEC,OAAO,EAAEC,IAAI,EAAEC,YAAY,EAAEC,YAAY,EAAEC,YAAY,EAAEC,YAAY,QAAQ,QAAQ;AACvJ,SAASC,IAAI,QAAQ,cAAc;AACnC,OAAO,SAASC,kBAAkB,CAACC,KAAK,EAAEC,SAAS,EAAE;EACjD,MAAMC,IAAI,GAAGF,KAAK,CAAC,CAAC,CAAC;EACrB,QAAQE,IAAI;IACR,KAAK,KAAK;MACN,OAAOD,SAAS,GAAG,WAAW,GAAG,SAAS;IAC9C,KAAK,KAAK;MACN,OAAOA,SAAS,GAAG,kBAAkB,GAAG,cAAc;IAC1D,KAAK,KAAK;MACN,OAAOA,SAAS,GAAG,oBAAoB,GAAG,gBAAgB;IAC9D,KAAK,KAAK;MACN,OAAOA,SAAS,GAAG,oBAAoB,GAAG,gBAAgB;EAAC;EAEnE,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EACrCP,IAAI,CAAC,cAAc,EAAE,yBAAyB,CAAC;EACnD;EACA,OAAO,SAAS;AACpB;AACA,OAAO,SAASQ,gBAAgB,CAACC,KAAK,EAAE;EACpC,IAAIA,KAAK,KAAK,IAAI,EACd,OAAO,IAAI;EACf,IAAI,MAAM,CAACC,IAAI,CAACD,KAAK,CAAC,EAClB,OAAO,KAAK;EAChB,IAAIA,KAAK,CAACE,QAAQ,CAAC,KAAK,CAAC,EACrB,OAAO,KAAK;EAChB,IAAIF,KAAK,CAACE,QAAQ,CAAC,KAAK,CAAC,EACrB,OAAO,KAAK;EAChB,IAAIF,KAAK,CAACE,QAAQ,CAAC,KAAK,CAAC,EACrB,OAAO,KAAK;EAChB,OAAO,IAAI;AACf;AACA,OAAO,SAASC,KAAK,CAACH,KAAK,EAAE;EACzB,OAAOA,KAAK,CAACI,GAAG,CAAEC,OAAO,IAAKC,IAAI,CAACH,KAAK,CAACE,OAAO,CAAC,CAAC;AACtD;AACA,OAAO,SAASE,YAAY,CAACC,GAAG,EAAE;EAC9BA,GAAG,GAAGF,IAAI,CAACG,KAAK,CAACD,GAAG,CAAC;EACrB,OAAOA,GAAG,IAAI,GAAG,GAAG,GAAG,GAAGA,GAAG,GAAG,CAAC,GAAG,CAAC,GAAGA,GAAG;AAC/C;AACA,OAAO,SAASE,cAAc,CAACC,KAAK,EAAE;EAClCA,KAAK,GAAGL,IAAI,CAACG,KAAK,CAACE,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG;EACrC,OAAOA,KAAK,GAAG,CAAC,GAAG,CAAC,GAAGA,KAAK,GAAG,CAAC,GAAG,CAAC,GAAGA,KAAK;AAChD;AACA,MAAMC,OAAO,GAAG;EACZC,GAAG,EAAE;IACDC,GAAG,CAACC,KAAK,EAAE;MACP,OAAO5B,YAAY,CAACD,IAAI,CAAC6B,KAAK,CAAC,CAAC;IACpC,CAAC;IACDC,GAAG,CAACD,KAAK,EAAE;MACP,MAAM,CAACE,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGlC,IAAI,CAAC6B,KAAK,CAAC;MAChC,OAAO3B,YAAY,CAAC,CAAC,GAAGJ,OAAO,CAACiC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,EAAEC,CAAC,CAAC,CAAC;IACjD,CAAC;IACDC,GAAG,CAACN,KAAK,EAAE;MACP,MAAM,CAACE,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGlC,IAAI,CAAC6B,KAAK,CAAC;MAChC,OAAO1B,YAAY,CAAC,CAAC,GAAGJ,OAAO,CAACgC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,EAAEC,CAAC,CAAC,CAAC;IACjD;EACJ,CAAC;EACDN,GAAG,EAAE;IACDD,GAAG,CAACE,KAAK,EAAE;MACP,OAAOzB,YAAY,CAACJ,IAAI,CAAC6B,KAAK,CAAC,CAAC;IACpC,CAAC;IACDC,GAAG,CAACD,KAAK,EAAE;MACP,MAAM,CAACE,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGlC,IAAI,CAAC6B,KAAK,CAAC;MAChC,OAAO3B,YAAY,CAAC,CAAC,GAAGJ,OAAO,CAACiC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,EAAEC,CAAC,CAAC,CAAC;IACjD,CAAC;IACDC,GAAG,CAACN,KAAK,EAAE;MACP,MAAM,CAACE,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGlC,IAAI,CAAC6B,KAAK,CAAC;MAChC,OAAO1B,YAAY,CAAC,CAAC,GAAGJ,OAAO,CAACgC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,EAAEC,CAAC,CAAC,CAAC;IACjD;EACJ,CAAC;EACDJ,GAAG,EAAE;IACDF,GAAG,CAACC,KAAK,EAAE;MACP,MAAM,CAACO,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEJ,CAAC,CAAC,GAAGxC,IAAI,CAACmC,KAAK,CAAC;MAChC,OAAO5B,YAAY,CAAC,CAAC,GAAGR,OAAO,CAAC2C,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,EAAEJ,CAAC,CAAC,CAAC;IACjD,CAAC;IACDP,GAAG,CAACE,KAAK,EAAE;MACP,MAAM,CAACO,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEJ,CAAC,CAAC,GAAGxC,IAAI,CAACmC,KAAK,CAAC;MAChC,OAAOzB,YAAY,CAAC,CAAC,GAAGX,OAAO,CAAC2C,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,EAAEJ,CAAC,CAAC,CAAC;IACjD,CAAC;IACDC,GAAG,CAACN,KAAK,EAAE;MACP,MAAM,CAACO,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEJ,CAAC,CAAC,GAAGxC,IAAI,CAACmC,KAAK,CAAC;MAChC,OAAO1B,YAAY,CAAC,CAAC,GAAGX,OAAO,CAAC4C,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,EAAEJ,CAAC,CAAC,CAAC;IACjD;EACJ,CAAC;EACDC,GAAG,EAAE;IACDP,GAAG,CAACC,KAAK,EAAE;MACP,MAAM,CAACO,CAAC,EAAEC,CAAC,EAAEE,CAAC,EAAEL,CAAC,CAAC,GAAGrC,IAAI,CAACgC,KAAK,CAAC;MAChC,OAAO5B,YAAY,CAAC,CAAC,GAAGL,OAAO,CAACwC,CAAC,EAAEC,CAAC,EAAEE,CAAC,CAAC,EAAEL,CAAC,CAAC,CAAC;IACjD,CAAC;IACDP,GAAG,CAACE,KAAK,EAAE;MACP,MAAM,CAACO,CAAC,EAAEC,CAAC,EAAEE,CAAC,EAAEL,CAAC,CAAC,GAAGrC,IAAI,CAACgC,KAAK,CAAC;MAChC,OAAOzB,YAAY,CAAC,CAAC,GAAGR,OAAO,CAACwC,CAAC,EAAEC,CAAC,EAAEE,CAAC,CAAC,EAAEL,CAAC,CAAC,CAAC;IACjD,CAAC;IACDJ,GAAG,CAACD,KAAK,EAAE;MACP,MAAM,CAACO,CAAC,EAAEC,CAAC,EAAEE,CAAC,EAAEL,CAAC,CAAC,GAAGrC,IAAI,CAACgC,KAAK,CAAC;MAChC,OAAO3B,YAAY,CAAC,CAAC,GAAGP,OAAO,CAACyC,CAAC,EAAEC,CAAC,EAAEE,CAAC,CAAC,EAAEL,CAAC,CAAC,CAAC;IACjD;EACJ;AACJ,CAAC;AACD;AACA,OAAO,SAASM,YAAY,CAACX,KAAK,EAAEpB,IAAI,EAAEgC,YAAY,EAAE;EACpDA,YAAY,GAAGA,YAAY,IAAI5B,gBAAgB,CAACgB,KAAK,CAAC;EACtD,IAAI,CAACY,YAAY,EACb,OAAO,IAAI;EACf,IAAIA,YAAY,KAAKhC,IAAI,EACrB,OAAOoB,KAAK;EAChB,MAAMa,WAAW,GAAGhB,OAAO,CAACe,YAAY,CAAC;EACzC,OAAOC,WAAW,CAACjC,IAAI,CAAC,CAACoB,KAAK,CAAC;AACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}