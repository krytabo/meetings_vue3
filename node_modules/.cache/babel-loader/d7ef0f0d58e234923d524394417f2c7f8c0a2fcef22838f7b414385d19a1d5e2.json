{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import { number } from \"echarts\";\n// import draggable from \"vuedraggable\";\n\nexport default {\n  name: \"transferPage\",\n  components: {\n    // draggable,\n  },\n  props: {\n    // tree的默认结构\n    defaultProps: {\n      type: Object,\n      required: true,\n      default: () => ({\n        children: \"children\",\n        label: \"label\",\n        key: \"key\",\n        parentKey: \"parent\" // 这个属性不是 tree组件需要的，是子节点数据中记录父节点标识的属性\n      })\n    },\n\n    // left 原始数据\n    leftOriginalList: {\n      type: Array,\n      default: () => []\n    },\n    // right 原始数据\n    rightOriginalList: {\n      type: Array,\n      default: () => []\n    },\n    // 最大可保存数据量\n    maxLimitCount: {\n      type: Number,\n      default: 0\n    },\n    // left 标题\n    leftTitle: {\n      type: String,\n      default: \"可选项\"\n    },\n    // right 标题\n    rightTitle: {\n      type: String,\n      default: \"已选项\"\n    }\n  },\n  data() {\n    return {\n      leftAllChecked: false,\n      // left 全选checkbox\n      leftDataList: [],\n      // left 所有数据\n      leftCheckedList: [],\n      // left 选中的数据\n      isIndeterminateLeft: false,\n      rightAllChecked: false,\n      // right 全选checkbox\n      rightDataList: [],\n      // right 所有数据\n      rightCheckedList: [],\n      // right 选中的数据 =>rightCheckedKeyList对应的 对象数组\n      rightCheckedKeyList: [],\n      // right 选中的 key list => 绑定在 el-checkbox-group上的 list\n      isIndeterminateRight: false,\n      drag: false\n    };\n  },\n  // 初始化\n  watch: {\n    leftOriginalList: {\n      immediate: true,\n      deep: true,\n      handler(newVal) {\n        this.leftDataList = JSON.parse(JSON.stringify(newVal));\n        this.leftCheckedList = [];\n        this.leftAllChecked = false;\n        this.isIndeterminateLeft = false;\n      }\n    },\n    rightOriginalList: {\n      immediate: true,\n      deep: true,\n      handler(newVal) {\n        this.rightDataList = JSON.parse(JSON.stringify(newVal));\n        this.rightCheckedList = [];\n        this.rightCheckedKeyList = [];\n        this.rightAllChecked = false;\n        this.isIndeterminateRight = false;\n      }\n    }\n  },\n  computed: {\n    // left 所有子节点数据的数量\n    leftDataTotal() {\n      let count = 0;\n      this.leftDataList.forEach(v => {\n        if (v[this.defaultProps.children]) {\n          count += v[this.defaultProps.children].length;\n        }\n      });\n      return count;\n    }\n  },\n  methods: {\n    // 选择——left\n    handleCheckLeft(val, {\n      checkedNodes\n    }) {\n      // 包含了父节点\n      const checkedCount = checkedNodes.length;\n      const totalNodeCount = this.leftDataTotal + this.leftDataList.length;\n      this.leftAllChecked = checkedCount === totalNodeCount;\n      this.isIndeterminateLeft = checkedCount > 0 && checkedCount < totalNodeCount;\n      // 手动剔除父节点\n      this.leftCheckedList = checkedNodes.filter(v => !v[this.defaultProps.children]);\n    },\n    // 选择——right\n    handleCheckRight(val) {\n      const checkedCount = val.length;\n      this.rightAllChecked = checkedCount === this.rightDataList.length;\n      this.isIndeterminateRight = checkedCount > 0 && checkedCount < this.rightDataList.length;\n      // 手动组织对象数组\n      this.rightCheckedList = this.rightDataList.filter(v => val.includes(v[this.defaultProps.key]));\n    },\n    // 全选——left\n    handleCheckAllChangeLeft(val) {\n      this.isIndeterminateLeft = false;\n      const checkedNodes = [];\n      if (val) {\n        this.leftDataList.forEach(v => {\n          checkedNodes.push(v);\n          if (v[this.defaultProps.children]) {\n            v[this.defaultProps.children].forEach(child => {\n              checkedNodes.push(child);\n            });\n          }\n        });\n      }\n      // 手动赋checkedlist值\n      this.leftCheckedList = checkedNodes.filter(v => !v[this.defaultProps.children]);\n      this.$refs.leftTree.setCheckedNodes(checkedNodes);\n    },\n    // 全选——right\n    handleCheckAllChangeRight(val) {\n      this.isIndeterminateRight = false;\n      this.rightCheckedKeyList = val ? this.rightDataList.map(v => v[this.defaultProps.key]) : [];\n      // 手动赋checkedlist值\n      this.rightCheckedList = val ? this.rightDataList.map(v => v) : [];\n    },\n    // 传递 right => left\n    handleLeftChange() {\n      // left +\n      const leftDataMap = {};\n      this.leftDataList.forEach(v => {\n        leftDataMap[v[this.defaultProps.key]] = v[this.defaultProps.children] || [];\n      });\n      this.rightCheckedList.forEach(v => {\n        leftDataMap[v[this.defaultProps.parentKey]].push(v);\n      });\n      // right -\n      this.rightDataList = this.rightDataList.filter(v => !this.rightCheckedKeyList.includes(v[this.defaultProps.key]));\n      // 清空选中数组\n      this.rightCheckedList = [];\n      this.rightCheckedKeyList = [];\n      // right 全选 => 直接取消\n      this.rightAllChecked = false;\n      this.isIndeterminateRight = false;\n      // left 全选 => 原先没有选中/半选中=>不动，原先全选=>半选中 => 重新渲染一次 tree组件选中\n      if (this.leftAllChecked && !this.isIndeterminateLeft) {\n        this.leftAllChecked = false;\n        this.isIndeterminateLeft = true;\n      }\n      // 先清空再重置，直接重置的话，父节点的状态会有问题\n      this.$refs.leftTree.setCheckedNodes([]);\n      this.$nextTick(() => {\n        this.$refs.leftTree.setCheckedNodes(this.leftCheckedList);\n      });\n      // 传递当前数据分布\n      this.$emit(\"change\", {\n        left: this.leftDataList,\n        right: this.rightDataList\n      });\n    },\n    // 传递 left => right\n    handleRightChange() {\n      // right +\n      this.rightDataList.push(...this.leftCheckedList);\n      // left -\n      const {\n        key,\n        children\n      } = this.defaultProps;\n      const checkedKeys = this.leftCheckedList.map(v => v[key]);\n      this.leftDataList.forEach(v => {\n        if (v[children]) {\n          v[children] = v[children].filter(child => !checkedKeys.includes(child[key]));\n        }\n      });\n      // 清空选中数组\n      this.leftCheckedList = [];\n      // 清空 tree组件选中\n      this.$refs.leftTree.setCheckedNodes([]);\n      // left 全选 => 直接取消\n      this.leftAllChecked = false;\n      this.isIndeterminateLeft = false;\n      // right 全选 => 原先没有选中/半选中=>不动，原先全选=>半选中\n      if (this.rightAllChecked && !this.isIndeterminateRight) {\n        this.rightAllChecked = false;\n        this.isIndeterminateRight = true;\n      }\n      // 传递当前数据分布\n      this.$emit(\"change\", {\n        left: this.leftDataList,\n        right: this.rightDataList\n      });\n    },\n    handleOrder() {\n      // 传递当前数据分布\n      this.$emit(\"change\", {\n        left: this.leftDataList,\n        right: this.rightDataList\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["name","components","props","defaultProps","type","Object","required","default","children","label","key","parentKey","leftOriginalList","Array","rightOriginalList","maxLimitCount","Number","leftTitle","String","rightTitle","data","leftAllChecked","leftDataList","leftCheckedList","isIndeterminateLeft","rightAllChecked","rightDataList","rightCheckedList","rightCheckedKeyList","isIndeterminateRight","drag","watch","immediate","deep","handler","newVal","JSON","parse","stringify","computed","leftDataTotal","count","forEach","v","length","methods","handleCheckLeft","val","checkedNodes","checkedCount","totalNodeCount","filter","handleCheckRight","includes","handleCheckAllChangeLeft","push","child","$refs","leftTree","setCheckedNodes","handleCheckAllChangeRight","map","handleLeftChange","leftDataMap","$nextTick","$emit","left","right","handleRightChange","checkedKeys","handleOrder"],"sourceRoot":"","sources":["/Users/elmo/Documents/GitHub/meetings_vue3/src/components/TransferTreeList.vue"],"sourcesContent":["<template>\n  <div class=\"transfer-tree\">\n    <div class=\"transfer-panel\">\n      <div class=\"transfer-panel-header\">\n        <el-checkbox v-model=\"leftAllChecked\" :disabled=\"!(leftDataList && leftDataList.length)\" :indeterminate=\"isIndeterminateLeft\" @change=\"handleCheckAllChangeLeft\">{{ leftTitle }}</el-checkbox>\n      </div>\n      <div class=\"transfer-panel-body\">\n        <el-tree ref=\"leftTree\" show-checkbox check-on-click-node default-expand-all :node-key=\"defaultProps.key\" :data=\"leftDataList\" :props=\"defaultProps\" @check=\"handleCheckLeft\"></el-tree>\n      </div>\n    </div>\n    <div class=\"transfer-buttons\">\n      <el-button class=\"mb8\" size=\"mini\" icon=\"el-icon-arrow-left\" :disabled=\"!(rightCheckedList && rightCheckedList.length)\" @click=\"handleLeftChange\"></el-button>\n      <el-button type=\"primary\" size=\"mini\" icon=\"el-icon-arrow-right\" :disabled=\"!(leftCheckedList && leftCheckedList.length)\" @click=\"handleRightChange\"></el-button>\n    </div>\n    <div class=\"transfer-panel\">\n      <div class=\"transfer-panel-header\">\n        <el-checkbox v-model=\"rightAllChecked\" :disabled=\"!(rightDataList && rightDataList.length)\" :indeterminate=\"isIndeterminateRight\" @change=\"handleCheckAllChangeRight\">\n          {{ rightTitle }}\n        </el-checkbox>\n        <!-- 右侧数据量/限制最大可保存数据量 -->\n        <span class=\"transfer-panel-ratio\">{{ rightDataList.length }}/{{ maxLimitCount }}</span>\n      </div>\n      <div class=\"transfer-panel-body\">\n        <el-checkbox-group v-if=\"rightDataList && rightDataList.length\" v-model=\"rightCheckedKeyList\" @change=\"handleCheckRight\">\n          <draggable v-model=\"rightDataList\" chosenClass=\"chosen\" forceFallback=\"true\" animation=\"200\" @start=\"drag = true\" @end=\"drag = false\" @update=\"handleOrder\">\n            <transition-group>\n              <el-checkbox v-for=\"(item, index) in rightDataList\" :key=\"`right_${item[defaultProps.key]}_${index}`\" :label=\"item[defaultProps.key]\">\n                {{ item[defaultProps.label] }}\n                <img src=\"@/assets/drag_icon.svg\" alt=\"拖拽排序\" width=\"40\" height=\"15\" />\n              </el-checkbox>\n            </transition-group>\n          </draggable>\n        </el-checkbox-group>\n        <el-empty description=\"暂无数据\" v-else></el-empty>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n// import { number } from \"echarts\";\n// import draggable from \"vuedraggable\";\n\nexport default {\n  name: \"transferPage\",\n  components: {\n    // draggable,\n  },\n  props: {\n    // tree的默认结构\n    defaultProps: {\n      type: Object,\n      required: true,\n      default: () => ({\n        children: \"children\",\n        label: \"label\",\n        key: \"key\",\n        parentKey: \"parent\", // 这个属性不是 tree组件需要的，是子节点数据中记录父节点标识的属性\n      }),\n    },\n    // left 原始数据\n    leftOriginalList: {\n      type: Array,\n      default: () => [],\n    },\n    // right 原始数据\n    rightOriginalList: {\n      type: Array,\n      default: () => [],\n    },\n    // 最大可保存数据量\n    maxLimitCount: {\n      type: Number,\n      default: 0,\n    },\n    // left 标题\n    leftTitle: {\n      type: String,\n      default: \"可选项\",\n    },\n    // right 标题\n    rightTitle: {\n      type: String,\n      default: \"已选项\",\n    },\n  },\n  data() {\n    return {\n      leftAllChecked: false, // left 全选checkbox\n      leftDataList: [], // left 所有数据\n      leftCheckedList: [], // left 选中的数据\n      isIndeterminateLeft: false,\n      rightAllChecked: false, // right 全选checkbox\n      rightDataList: [], // right 所有数据\n      rightCheckedList: [], // right 选中的数据 =>rightCheckedKeyList对应的 对象数组\n      rightCheckedKeyList: [], // right 选中的 key list => 绑定在 el-checkbox-group上的 list\n      isIndeterminateRight: false,\n      drag: false,\n    };\n  },\n  // 初始化\n  watch: {\n    leftOriginalList: {\n      immediate: true,\n      deep: true,\n      handler(newVal) {\n        this.leftDataList = JSON.parse(JSON.stringify(newVal));\n        this.leftCheckedList = [];\n        this.leftAllChecked = false;\n        this.isIndeterminateLeft = false;\n      },\n    },\n    rightOriginalList: {\n      immediate: true,\n      deep: true,\n      handler(newVal) {\n        this.rightDataList = JSON.parse(JSON.stringify(newVal));\n        this.rightCheckedList = [];\n        this.rightCheckedKeyList = [];\n        this.rightAllChecked = false;\n        this.isIndeterminateRight = false;\n      },\n    },\n  },\n  computed: {\n    // left 所有子节点数据的数量\n    leftDataTotal() {\n      let count = 0;\n      this.leftDataList.forEach((v) => {\n        if (v[this.defaultProps.children]) {\n          count += v[this.defaultProps.children].length;\n        }\n      });\n      return count;\n    },\n  },\n  methods: {\n    // 选择——left\n    handleCheckLeft(val, { checkedNodes }) {\n      // 包含了父节点\n      const checkedCount = checkedNodes.length;\n      const totalNodeCount = this.leftDataTotal + this.leftDataList.length;\n      this.leftAllChecked = checkedCount === totalNodeCount;\n      this.isIndeterminateLeft = checkedCount > 0 && checkedCount < totalNodeCount;\n      // 手动剔除父节点\n      this.leftCheckedList = checkedNodes.filter((v) => !v[this.defaultProps.children]);\n    },\n    // 选择——right\n    handleCheckRight(val) {\n      const checkedCount = val.length;\n      this.rightAllChecked = checkedCount === this.rightDataList.length;\n      this.isIndeterminateRight = checkedCount > 0 && checkedCount < this.rightDataList.length;\n      // 手动组织对象数组\n      this.rightCheckedList = this.rightDataList.filter((v) => val.includes(v[this.defaultProps.key]));\n    },\n    // 全选——left\n    handleCheckAllChangeLeft(val) {\n      this.isIndeterminateLeft = false;\n      const checkedNodes = [];\n      if (val) {\n        this.leftDataList.forEach((v) => {\n          checkedNodes.push(v);\n          if (v[this.defaultProps.children]) {\n            v[this.defaultProps.children].forEach((child) => {\n              checkedNodes.push(child);\n            });\n          }\n        });\n      }\n      // 手动赋checkedlist值\n      this.leftCheckedList = checkedNodes.filter((v) => !v[this.defaultProps.children]);\n      this.$refs.leftTree.setCheckedNodes(checkedNodes);\n    },\n    // 全选——right\n    handleCheckAllChangeRight(val) {\n      this.isIndeterminateRight = false;\n      this.rightCheckedKeyList = val ? this.rightDataList.map((v) => v[this.defaultProps.key]) : [];\n      // 手动赋checkedlist值\n      this.rightCheckedList = val ? this.rightDataList.map((v) => v) : [];\n    },\n    // 传递 right => left\n    handleLeftChange() {\n      // left +\n      const leftDataMap = {};\n      this.leftDataList.forEach((v) => {\n        leftDataMap[v[this.defaultProps.key]] = v[this.defaultProps.children] || [];\n      });\n      this.rightCheckedList.forEach((v) => {\n        leftDataMap[v[this.defaultProps.parentKey]].push(v);\n      });\n      // right -\n      this.rightDataList = this.rightDataList.filter((v) => !this.rightCheckedKeyList.includes(v[this.defaultProps.key]));\n      // 清空选中数组\n      this.rightCheckedList = [];\n      this.rightCheckedKeyList = [];\n      // right 全选 => 直接取消\n      this.rightAllChecked = false;\n      this.isIndeterminateRight = false;\n      // left 全选 => 原先没有选中/半选中=>不动，原先全选=>半选中 => 重新渲染一次 tree组件选中\n      if (this.leftAllChecked && !this.isIndeterminateLeft) {\n        this.leftAllChecked = false;\n        this.isIndeterminateLeft = true;\n      }\n      // 先清空再重置，直接重置的话，父节点的状态会有问题\n      this.$refs.leftTree.setCheckedNodes([]);\n      this.$nextTick(() => {\n        this.$refs.leftTree.setCheckedNodes(this.leftCheckedList);\n      });\n      // 传递当前数据分布\n      this.$emit(\"change\", {\n        left: this.leftDataList,\n        right: this.rightDataList,\n      });\n    },\n    // 传递 left => right\n    handleRightChange() {\n      // right +\n      this.rightDataList.push(...this.leftCheckedList);\n      // left -\n      const { key, children } = this.defaultProps;\n      const checkedKeys = this.leftCheckedList.map((v) => v[key]);\n      this.leftDataList.forEach((v) => {\n        if (v[children]) {\n          v[children] = v[children].filter((child) => !checkedKeys.includes(child[key]));\n        }\n      });\n      // 清空选中数组\n      this.leftCheckedList = [];\n      // 清空 tree组件选中\n      this.$refs.leftTree.setCheckedNodes([]);\n      // left 全选 => 直接取消\n      this.leftAllChecked = false;\n      this.isIndeterminateLeft = false;\n      // right 全选 => 原先没有选中/半选中=>不动，原先全选=>半选中\n      if (this.rightAllChecked && !this.isIndeterminateRight) {\n        this.rightAllChecked = false;\n        this.isIndeterminateRight = true;\n      }\n      // 传递当前数据分布\n      this.$emit(\"change\", {\n        left: this.leftDataList,\n        right: this.rightDataList,\n      });\n    },\n    handleOrder() {\n      // 传递当前数据分布\n      this.$emit(\"change\", {\n        left: this.leftDataList,\n        right: this.rightDataList,\n      });\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.transfer-tree {\n  display: flex;\n  width: 100%;\n  .transfer-panel {\n    width: 100%;\n    height: 100%;\n    border-radius: 4px;\n    border: 1px solid #165dff;\n    .transfer-panel-header {\n      display: flex;\n      justify-content: space-between;\n      height: 30px;\n      line-height: 30px;\n      border-radius: 3px 3px 0px 0px;\n      padding: 0 12px;\n      ::v-deep .el-checkbox {\n        .el-checkbox__label {\n          color: #165dff;\n          font-size: 14px;\n          padding-left: 8px;\n        }\n      }\n      .transfer-panel-ratio {\n        font-size: 12px;\n        color: #165dff;\n      }\n    }\n    .transfer-panel-body {\n      height: 200px;\n      padding: 12px 12px 0 12px;\n      border-top: 1px solid #165dff;\n      overflow: auto;\n      .transfer-panel-filter {\n        float: right;\n        width: 170px;\n        .el-checkbox__label {\n          color: #165dff;\n          font-size: 12px;\n          padding-left: 8px;\n        }\n        .el-input__inner {\n          height: 26px;\n          border: none;\n        }\n      }\n      ::v-deep .el-tree {\n        color: #165dff;\n        margin-bottom: 4px;\n        .el-tree-node__content {\n          height: 22px;\n          margin-bottom: 8px;\n          .el-tree-node__label {\n            font-size: 12px;\n          }\n        }\n        .el-tree-node__children {\n          .el-tree-node__content {\n            padding-left: 12px !important;\n          }\n        }\n        .el-tree-node__expand-icon {\n          margin-left: -6px;\n        }\n      }\n      ::v-deep .el-checkbox-group {\n        margin-bottom: 4px;\n        .el-checkbox {\n          display: block;\n          line-height: 22px;\n          color: #165dff;\n          margin-bottom: 8px;\n          width: 100%;\n          .el-checkbox__label {\n            width: calc(100% - 5px);\n            position: relative;\n            font-size: 12px;\n            padding-left: 8px;\n            img {\n              position: absolute;\n              right: 0;\n              top: 2px;\n            }\n          }\n        }\n      }\n    }\n  }\n  .transfer-buttons {\n    display: flex;\n    justify-content: center;\n    flex-flow: column;\n    margin: 0 12px;\n    .el-button {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      width: 32px;\n      height: 24px;\n      padding: 0;\n      margin-left: 0;\n    }\n  }\n}\n::v-deep .el-empty {\n  height: 60px;\n  padding: 0;\n  .el-empty__image {\n    display: none;\n  }\n  .el-empty__description {\n    margin: 0;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}