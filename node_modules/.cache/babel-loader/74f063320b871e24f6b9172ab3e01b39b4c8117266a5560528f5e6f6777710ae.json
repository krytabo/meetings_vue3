{"ast":null,"code":"import { h, defineComponent, ref, computed, inject } from 'vue';\nimport { NCheckbox, NCheckboxGroup } from '../../../checkbox';\nimport { NRadio, NRadioGroup } from '../../../radio';\nimport { NButton } from '../../../button';\nimport { NScrollbar } from '../../../_internal';\nimport { shouldUseArrayInSingleMode } from '../utils';\nimport { dataTableInjectionKey } from '../interface';\nexport default defineComponent({\n  name: 'DataTableFilterMenu',\n  props: {\n    column: {\n      type: Object,\n      required: true\n    },\n    radioGroupName: {\n      type: String,\n      required: true\n    },\n    multiple: {\n      type: Boolean,\n      required: true\n    },\n    value: {\n      type: [Array, String, Number],\n      default: null\n    },\n    options: {\n      type: Array,\n      required: true\n    },\n    onConfirm: {\n      type: Function,\n      required: true\n    },\n    onClear: {\n      type: Function,\n      required: true\n    },\n    onChange: {\n      type: Function,\n      required: true\n    }\n  },\n  setup(props) {\n    const {\n      mergedClsPrefixRef,\n      mergedThemeRef,\n      localeRef\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    } = inject(dataTableInjectionKey);\n    // to be compared with changed value\n    // const initialValueRef = ref(props.value)\n    const temporalValueRef = ref(props.value);\n    const checkboxGroupValueRef = computed(() => {\n      const {\n        value: temporalValue\n      } = temporalValueRef;\n      if (!Array.isArray(temporalValue)) return null;\n      return temporalValue;\n    });\n    const radioGroupValueRef = computed(() => {\n      const {\n        value: temporalValue\n      } = temporalValueRef;\n      if (shouldUseArrayInSingleMode(props.column)) {\n        return Array.isArray(temporalValue) && temporalValue.length && temporalValue[0] || null;\n      }\n      if (!Array.isArray(temporalValue)) return temporalValue;\n      return null;\n    });\n    function doChange(value) {\n      // May need to check if equal\n      ;\n      props.onChange(value);\n    }\n    function handleChange(value) {\n      if (props.multiple && Array.isArray(value)) {\n        temporalValueRef.value = value;\n      } else if (shouldUseArrayInSingleMode(props.column) && !Array.isArray(value)) {\n        /** this branch is for compatibility */\n        temporalValueRef.value = [value];\n      } else {\n        temporalValueRef.value = value;\n      }\n    }\n    function handleConfirmClick() {\n      doChange(temporalValueRef.value);\n      props.onConfirm();\n    }\n    function handleClearClick() {\n      if (props.multiple || shouldUseArrayInSingleMode(props.column)) {\n        doChange([]);\n      } else {\n        doChange(null);\n      }\n      props.onClear();\n    }\n    return {\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedTheme: mergedThemeRef,\n      locale: localeRef,\n      checkboxGroupValue: checkboxGroupValueRef,\n      radioGroupValue: radioGroupValueRef,\n      handleChange,\n      handleConfirmClick,\n      handleClearClick\n    };\n  },\n  render() {\n    const {\n      mergedTheme,\n      locale,\n      mergedClsPrefix\n    } = this;\n    return h(\"div\", {\n      class: `${mergedClsPrefix}-data-table-filter-menu`\n    }, h(NScrollbar, null, {\n      default: () => {\n        const {\n          checkboxGroupValue,\n          handleChange\n        } = this;\n        return this.multiple ? h(NCheckboxGroup, {\n          value: checkboxGroupValue,\n          class: `${mergedClsPrefix}-data-table-filter-menu__group`,\n          onUpdateValue: handleChange\n        }, {\n          default: () => this.options.map(option => {\n            return h(NCheckbox, {\n              key: option.value,\n              theme: mergedTheme.peers.Checkbox,\n              themeOverrides: mergedTheme.peerOverrides.Checkbox,\n              value: option.value\n            }, {\n              default: () => option.label\n            });\n          })\n        }) : h(NRadioGroup, {\n          name: this.radioGroupName,\n          class: `${mergedClsPrefix}-data-table-filter-menu__group`,\n          value: this.radioGroupValue,\n          onUpdateValue: this.handleChange\n        }, {\n          default: () => this.options.map(option => h(NRadio, {\n            key: option.value,\n            value: option.value,\n            theme: mergedTheme.peers.Radio,\n            themeOverrides: mergedTheme.peerOverrides.Radio\n          }, {\n            default: () => option.label\n          }))\n        });\n      }\n    }), h(\"div\", {\n      class: `${mergedClsPrefix}-data-table-filter-menu__action`\n    }, h(NButton, {\n      size: \"tiny\",\n      theme: mergedTheme.peers.Button,\n      themeOverrides: mergedTheme.peerOverrides.Button,\n      onClick: this.handleClearClick\n    }, {\n      default: () => locale.clear\n    }), h(NButton, {\n      theme: mergedTheme.peers.Button,\n      themeOverrides: mergedTheme.peerOverrides.Button,\n      type: \"primary\",\n      size: \"tiny\",\n      onClick: this.handleConfirmClick\n    }, {\n      default: () => locale.confirm\n    })));\n  }\n});","map":{"version":3,"names":["h","defineComponent","ref","computed","inject","NCheckbox","NCheckboxGroup","NRadio","NRadioGroup","NButton","NScrollbar","shouldUseArrayInSingleMode","dataTableInjectionKey","name","props","column","type","Object","required","radioGroupName","String","multiple","Boolean","value","Array","Number","default","options","onConfirm","Function","onClear","onChange","setup","mergedClsPrefixRef","mergedThemeRef","localeRef","temporalValueRef","checkboxGroupValueRef","temporalValue","isArray","radioGroupValueRef","length","doChange","handleChange","handleConfirmClick","handleClearClick","mergedClsPrefix","mergedTheme","locale","checkboxGroupValue","radioGroupValue","render","class","onUpdateValue","map","option","key","theme","peers","Checkbox","themeOverrides","peerOverrides","label","Radio","size","Button","onClick","clear","confirm"],"sources":["/Users/krystal/Documents/GitHub/meetings_vue3/node_modules/naive-ui/es/data-table/src/HeaderButton/FilterMenu.js"],"sourcesContent":["import { h, defineComponent, ref, computed, inject } from 'vue';\nimport { NCheckbox, NCheckboxGroup } from '../../../checkbox';\nimport { NRadio, NRadioGroup } from '../../../radio';\nimport { NButton } from '../../../button';\nimport { NScrollbar } from '../../../_internal';\nimport { shouldUseArrayInSingleMode } from '../utils';\nimport { dataTableInjectionKey } from '../interface';\nexport default defineComponent({\n    name: 'DataTableFilterMenu',\n    props: {\n        column: {\n            type: Object,\n            required: true\n        },\n        radioGroupName: {\n            type: String,\n            required: true\n        },\n        multiple: {\n            type: Boolean,\n            required: true\n        },\n        value: {\n            type: [Array, String, Number],\n            default: null\n        },\n        options: {\n            type: Array,\n            required: true\n        },\n        onConfirm: {\n            type: Function,\n            required: true\n        },\n        onClear: {\n            type: Function,\n            required: true\n        },\n        onChange: {\n            type: Function,\n            required: true\n        }\n    },\n    setup(props) {\n        const { mergedClsPrefixRef, mergedThemeRef, localeRef\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n         } = inject(dataTableInjectionKey);\n        // to be compared with changed value\n        // const initialValueRef = ref(props.value)\n        const temporalValueRef = ref(props.value);\n        const checkboxGroupValueRef = computed(() => {\n            const { value: temporalValue } = temporalValueRef;\n            if (!Array.isArray(temporalValue))\n                return null;\n            return temporalValue;\n        });\n        const radioGroupValueRef = computed(() => {\n            const { value: temporalValue } = temporalValueRef;\n            if (shouldUseArrayInSingleMode(props.column)) {\n                return ((Array.isArray(temporalValue) &&\n                    temporalValue.length &&\n                    temporalValue[0]) ||\n                    null);\n            }\n            if (!Array.isArray(temporalValue))\n                return temporalValue;\n            return null;\n        });\n        function doChange(value) {\n            // May need to check if equal\n            ;\n            props.onChange(value);\n        }\n        function handleChange(value) {\n            if (props.multiple && Array.isArray(value)) {\n                temporalValueRef.value = value;\n            }\n            else if (shouldUseArrayInSingleMode(props.column) &&\n                !Array.isArray(value)) {\n                /** this branch is for compatibility */\n                temporalValueRef.value = [value];\n            }\n            else {\n                temporalValueRef.value = value;\n            }\n        }\n        function handleConfirmClick() {\n            doChange(temporalValueRef.value);\n            props.onConfirm();\n        }\n        function handleClearClick() {\n            if (props.multiple || shouldUseArrayInSingleMode(props.column)) {\n                doChange([]);\n            }\n            else {\n                doChange(null);\n            }\n            props.onClear();\n        }\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            mergedTheme: mergedThemeRef,\n            locale: localeRef,\n            checkboxGroupValue: checkboxGroupValueRef,\n            radioGroupValue: radioGroupValueRef,\n            handleChange,\n            handleConfirmClick,\n            handleClearClick\n        };\n    },\n    render() {\n        const { mergedTheme, locale, mergedClsPrefix } = this;\n        return (h(\"div\", { class: `${mergedClsPrefix}-data-table-filter-menu` },\n            h(NScrollbar, null, {\n                default: () => {\n                    const { checkboxGroupValue, handleChange } = this;\n                    return this.multiple ? (h(NCheckboxGroup, { value: checkboxGroupValue, class: `${mergedClsPrefix}-data-table-filter-menu__group`, onUpdateValue: handleChange }, {\n                        default: () => this.options.map((option) => {\n                            return (h(NCheckbox, { key: option.value, theme: mergedTheme.peers.Checkbox, themeOverrides: mergedTheme.peerOverrides.Checkbox, value: option.value }, { default: () => option.label }));\n                        })\n                    })) : (h(NRadioGroup, { name: this.radioGroupName, class: `${mergedClsPrefix}-data-table-filter-menu__group`, value: this.radioGroupValue, onUpdateValue: this.handleChange }, {\n                        default: () => this.options.map((option) => (h(NRadio, { key: option.value, value: option.value, theme: mergedTheme.peers.Radio, themeOverrides: mergedTheme.peerOverrides.Radio }, { default: () => option.label })))\n                    }));\n                }\n            }),\n            h(\"div\", { class: `${mergedClsPrefix}-data-table-filter-menu__action` },\n                h(NButton, { size: \"tiny\", theme: mergedTheme.peers.Button, themeOverrides: mergedTheme.peerOverrides.Button, onClick: this.handleClearClick }, { default: () => locale.clear }),\n                h(NButton, { theme: mergedTheme.peers.Button, themeOverrides: mergedTheme.peerOverrides.Button, type: \"primary\", size: \"tiny\", onClick: this.handleConfirmClick }, { default: () => locale.confirm }))));\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}