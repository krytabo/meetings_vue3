{"ast":null,"code":"import { h, inject, computed, defineComponent, ref, onMounted } from 'vue';\nimport { useMemo } from 'vooks';\nimport { happensIn, repeat } from 'seemly';\nimport { createDataKey } from '../../_utils';\nimport NTreeNodeSwitcher from './TreeNodeSwitcher';\nimport NTreeNodeCheckbox from './TreeNodeCheckbox';\nimport NTreeNodeContent from './TreeNodeContent';\nimport { treeInjectionKey } from './interface';\nimport { renderDropMark } from './dnd';\nimport { isNodeDisabled } from './utils';\nconst TreeNode = defineComponent({\n  name: 'TreeNode',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    tmNode: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const NTree = inject(treeInjectionKey);\n    const {\n      droppingNodeParentRef,\n      droppingMouseNodeRef,\n      draggingNodeRef,\n      droppingPositionRef,\n      droppingOffsetLevelRef,\n      nodePropsRef,\n      indentRef,\n      blockLineRef,\n      checkboxPlacementRef,\n      checkOnClickRef,\n      disabledFieldRef\n    } = NTree;\n    const checkboxDisabledRef = useMemo(() => !!props.tmNode.rawNode.checkboxDisabled);\n    const nodeIsDisabledRef = useMemo(() => {\n      return isNodeDisabled(props.tmNode, disabledFieldRef.value);\n    });\n    const disabledRef = useMemo(() => NTree.disabledRef.value || nodeIsDisabledRef.value);\n    const resolvedNodePropsRef = computed(() => {\n      const {\n        value: nodeProps\n      } = nodePropsRef;\n      if (!nodeProps) return undefined;\n      return nodeProps({\n        option: props.tmNode.rawNode\n      });\n    });\n    // used for drag and drop\n    const contentInstRef = ref(null);\n    // must be non-reactive\n    const contentElRef = {\n      value: null\n    };\n    onMounted(() => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      contentElRef.value = contentInstRef.value.$el;\n    });\n    function handleSwitcherClick() {\n      const {\n        tmNode\n      } = props;\n      if (!tmNode.isLeaf && !tmNode.shallowLoaded) {\n        if (!NTree.loadingKeysRef.value.has(tmNode.key)) {\n          NTree.loadingKeysRef.value.add(tmNode.key);\n        } else {\n          return;\n        }\n        const {\n          onLoadRef: {\n            value: onLoad\n          }\n        } = NTree;\n        if (onLoad) {\n          void onLoad(tmNode.rawNode).then(() => {\n            NTree.handleSwitcherClick(tmNode);\n          }).finally(() => {\n            NTree.loadingKeysRef.value.delete(tmNode.key);\n          });\n        }\n      } else {\n        NTree.handleSwitcherClick(tmNode);\n      }\n    }\n    const selectableRef = useMemo(() => !nodeIsDisabledRef.value && NTree.selectableRef.value && (NTree.internalTreeSelect ? NTree.mergedCheckStrategyRef.value !== 'child' || NTree.multipleRef.value && NTree.cascadeRef.value || props.tmNode.isLeaf : true));\n    const checkableRef = useMemo(() => NTree.checkableRef.value && (NTree.cascadeRef.value || NTree.mergedCheckStrategyRef.value !== 'child' || props.tmNode.isLeaf));\n    const checkedRef = useMemo(() => NTree.displayedCheckedKeysRef.value.includes(props.tmNode.key));\n    const mergedCheckOnClickRef = useMemo(() => {\n      const {\n        value: checkable\n      } = checkableRef;\n      if (!checkable) return false;\n      const {\n        value: checkOnClick\n      } = checkOnClickRef;\n      if (typeof checkOnClick === 'boolean') {\n        return checkOnClick;\n      }\n      return checkOnClick(props.tmNode.rawNode);\n    });\n    function _handleClick(e) {\n      const {\n        value: expandOnClick\n      } = NTree.expandOnClickRef;\n      const {\n        value: selectable\n      } = selectableRef;\n      const {\n        value: mergedCheckOnClick\n      } = mergedCheckOnClickRef;\n      if (!selectable && !expandOnClick && !mergedCheckOnClick) return;\n      if (happensIn(e, 'checkbox') || happensIn(e, 'switcher')) return;\n      const {\n        tmNode\n      } = props;\n      if (selectable) {\n        NTree.handleSelect(tmNode);\n      }\n      if (expandOnClick && !tmNode.isLeaf) {\n        handleSwitcherClick();\n      }\n      if (mergedCheckOnClick) {\n        handleCheck(!checkedRef.value);\n      }\n    }\n    function handleContentClick(e) {\n      var _a, _b;\n      if (blockLineRef.value) return;\n      if (!disabledRef.value) _handleClick(e);\n      (_b = (_a = resolvedNodePropsRef.value) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    }\n    function handleLineClick(e) {\n      var _a, _b;\n      if (!blockLineRef.value) return;\n      if (!disabledRef.value) {\n        _handleClick(e);\n      }\n      (_b = (_a = resolvedNodePropsRef.value) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    }\n    function handleCheck(checked) {\n      NTree.handleCheck(props.tmNode, checked);\n    }\n    // Dnd\n    function handleDragStart(e) {\n      NTree.handleDragStart({\n        event: e,\n        node: props.tmNode\n      });\n    }\n    function handleDragEnter(e) {\n      if (e.currentTarget !== e.target) {\n        return;\n      }\n      NTree.handleDragEnter({\n        event: e,\n        node: props.tmNode\n      });\n    }\n    function handleDragOver(e) {\n      e.preventDefault(); // if not prevent, drop event won't be fired...\n      NTree.handleDragOver({\n        event: e,\n        node: props.tmNode\n      });\n    }\n    function handleDragEnd(e) {\n      NTree.handleDragEnd({\n        event: e,\n        node: props.tmNode\n      });\n    }\n    function handleDragLeave(e) {\n      if (e.currentTarget !== e.target) {\n        return;\n      }\n      NTree.handleDragLeave({\n        event: e,\n        node: props.tmNode\n      });\n    }\n    function handleDrop(e) {\n      e.preventDefault();\n      if (droppingPositionRef.value !== null) {\n        NTree.handleDrop({\n          event: e,\n          node: props.tmNode,\n          dropPosition: droppingPositionRef.value\n        });\n      }\n    }\n    return {\n      showDropMark: useMemo(() => {\n        const {\n          value: draggingNode\n        } = draggingNodeRef;\n        if (!draggingNode) return;\n        const {\n          value: droppingPosition\n        } = droppingPositionRef;\n        if (!droppingPosition) return;\n        const {\n          value: droppingMouseNode\n        } = droppingMouseNodeRef;\n        if (!droppingMouseNode) {\n          return;\n        }\n        const {\n          tmNode\n        } = props;\n        if (tmNode.key === droppingMouseNode.key) return true;\n        return false;\n      }),\n      showDropMarkAsParent: useMemo(() => {\n        const {\n          value: droppingNodeParent\n        } = droppingNodeParentRef;\n        if (!droppingNodeParent) return false;\n        const {\n          tmNode\n        } = props;\n        const {\n          value: droppingPosition\n        } = droppingPositionRef;\n        if (droppingPosition === 'before' || droppingPosition === 'after') {\n          return droppingNodeParent.key === tmNode.key;\n        }\n        return false;\n      }),\n      pending: useMemo(() => NTree.pendingNodeKeyRef.value === props.tmNode.key),\n      loading: useMemo(() => NTree.loadingKeysRef.value.has(props.tmNode.key)),\n      highlight: useMemo(() => {\n        var _a;\n        return (_a = NTree.highlightKeySetRef.value) === null || _a === void 0 ? void 0 : _a.has(props.tmNode.key);\n      }),\n      checked: checkedRef,\n      indeterminate: useMemo(() => NTree.displayedIndeterminateKeysRef.value.includes(props.tmNode.key)),\n      selected: useMemo(() => NTree.mergedSelectedKeysRef.value.includes(props.tmNode.key)),\n      expanded: useMemo(() => NTree.mergedExpandedKeysRef.value.includes(props.tmNode.key)),\n      disabled: disabledRef,\n      checkable: checkableRef,\n      mergedCheckOnClick: mergedCheckOnClickRef,\n      checkboxDisabled: checkboxDisabledRef,\n      selectable: selectableRef,\n      expandOnClick: NTree.expandOnClickRef,\n      internalScrollable: NTree.internalScrollableRef,\n      draggable: NTree.draggableRef,\n      blockLine: blockLineRef,\n      nodeProps: resolvedNodePropsRef,\n      checkboxFocusable: NTree.internalCheckboxFocusableRef,\n      droppingPosition: droppingPositionRef,\n      droppingOffsetLevel: droppingOffsetLevelRef,\n      indent: indentRef,\n      checkboxPlacement: checkboxPlacementRef,\n      contentInstRef,\n      contentElRef,\n      handleCheck,\n      handleDrop,\n      handleDragStart,\n      handleDragEnter,\n      handleDragOver,\n      handleDragEnd,\n      handleDragLeave,\n      handleLineClick,\n      handleContentClick,\n      handleSwitcherClick\n    };\n  },\n  render() {\n    const {\n      tmNode,\n      clsPrefix,\n      checkable,\n      expandOnClick,\n      selectable,\n      selected,\n      checked,\n      highlight,\n      draggable,\n      blockLine,\n      indent,\n      disabled,\n      pending,\n      internalScrollable,\n      nodeProps,\n      checkboxPlacement\n    } = this;\n    // drag start not inside\n    // it need to be append to node itself, not wrapper\n    const dragEventHandlers = draggable && !disabled ? {\n      onDragenter: this.handleDragEnter,\n      onDragleave: this.handleDragLeave,\n      onDragend: this.handleDragEnd,\n      onDrop: this.handleDrop,\n      onDragover: this.handleDragOver\n    } : undefined;\n    // In non virtual mode, there's no evidence that which element should be\n    // scrolled to, so we need data-key to query the target element.\n    const dataKey = internalScrollable ? createDataKey(tmNode.key) : undefined;\n    const checkboxOnRight = checkboxPlacement === 'right';\n    const checkboxNode = checkable ? h(NTreeNodeCheckbox, {\n      right: checkboxOnRight,\n      focusable: this.checkboxFocusable,\n      disabled: disabled || this.checkboxDisabled,\n      clsPrefix: clsPrefix,\n      checked: this.checked,\n      indeterminate: this.indeterminate,\n      onCheck: this.handleCheck\n    }) : null;\n    return h(\"div\", Object.assign({\n      class: `${clsPrefix}-tree-node-wrapper`\n    }, dragEventHandlers), h(\"div\", Object.assign({}, blockLine ? nodeProps : undefined, {\n      class: [`${clsPrefix}-tree-node`, {\n        [`${clsPrefix}-tree-node--selected`]: selected,\n        [`${clsPrefix}-tree-node--checkable`]: checkable,\n        [`${clsPrefix}-tree-node--highlight`]: highlight,\n        [`${clsPrefix}-tree-node--pending`]: pending,\n        [`${clsPrefix}-tree-node--disabled`]: disabled,\n        [`${clsPrefix}-tree-node--selectable`]: selectable,\n        [`${clsPrefix}-tree-node--clickable`]: selectable || expandOnClick || this.mergedCheckOnClick\n      }, nodeProps === null || nodeProps === void 0 ? void 0 : nodeProps.class],\n      \"data-key\": dataKey,\n      draggable: draggable && blockLine,\n      onClick: this.handleLineClick,\n      onDragstart: draggable && blockLine && !disabled ? this.handleDragStart : undefined\n    }), repeat(tmNode.level, h(\"div\", {\n      class: `${clsPrefix}-tree-node-indent`\n    }, h(\"div\", {\n      style: {\n        width: `${indent}px`\n      }\n    }))), h(NTreeNodeSwitcher, {\n      clsPrefix: clsPrefix,\n      expanded: this.expanded,\n      loading: this.loading,\n      hide: tmNode.isLeaf,\n      onClick: this.handleSwitcherClick\n    }), !checkboxOnRight ? checkboxNode : null, h(NTreeNodeContent, {\n      ref: \"contentInstRef\",\n      clsPrefix: clsPrefix,\n      checked: checked,\n      selected: selected,\n      onClick: this.handleContentClick,\n      nodeProps: blockLine ? undefined : nodeProps,\n      onDragstart: draggable && !blockLine && !disabled ? this.handleDragStart : undefined,\n      tmNode: tmNode\n    }), draggable ? this.showDropMark ? renderDropMark({\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      el: this.contentElRef.value,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      position: this.droppingPosition,\n      offsetLevel: this.droppingOffsetLevel,\n      indent\n    }) : this.showDropMarkAsParent ? renderDropMark({\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      el: this.contentElRef.value,\n      position: 'inside',\n      offsetLevel: this.droppingOffsetLevel,\n      indent\n    }) : null : null, checkboxOnRight ? checkboxNode : null));\n  }\n});\nexport default TreeNode;","map":{"version":3,"names":["h","inject","computed","defineComponent","ref","onMounted","useMemo","happensIn","repeat","createDataKey","NTreeNodeSwitcher","NTreeNodeCheckbox","NTreeNodeContent","treeInjectionKey","renderDropMark","isNodeDisabled","TreeNode","name","props","clsPrefix","type","String","required","tmNode","Object","setup","NTree","droppingNodeParentRef","droppingMouseNodeRef","draggingNodeRef","droppingPositionRef","droppingOffsetLevelRef","nodePropsRef","indentRef","blockLineRef","checkboxPlacementRef","checkOnClickRef","disabledFieldRef","checkboxDisabledRef","rawNode","checkboxDisabled","nodeIsDisabledRef","value","disabledRef","resolvedNodePropsRef","nodeProps","undefined","option","contentInstRef","contentElRef","$el","handleSwitcherClick","isLeaf","shallowLoaded","loadingKeysRef","has","key","add","onLoadRef","onLoad","then","finally","delete","selectableRef","internalTreeSelect","mergedCheckStrategyRef","multipleRef","cascadeRef","checkableRef","checkedRef","displayedCheckedKeysRef","includes","mergedCheckOnClickRef","checkable","checkOnClick","_handleClick","e","expandOnClick","expandOnClickRef","selectable","mergedCheckOnClick","handleSelect","handleCheck","handleContentClick","_a","_b","onClick","call","handleLineClick","checked","handleDragStart","event","node","handleDragEnter","currentTarget","target","handleDragOver","preventDefault","handleDragEnd","handleDragLeave","handleDrop","dropPosition","showDropMark","draggingNode","droppingPosition","droppingMouseNode","showDropMarkAsParent","droppingNodeParent","pending","pendingNodeKeyRef","loading","highlight","highlightKeySetRef","indeterminate","displayedIndeterminateKeysRef","selected","mergedSelectedKeysRef","expanded","mergedExpandedKeysRef","disabled","internalScrollable","internalScrollableRef","draggable","draggableRef","blockLine","checkboxFocusable","internalCheckboxFocusableRef","droppingOffsetLevel","indent","checkboxPlacement","render","dragEventHandlers","onDragenter","onDragleave","onDragend","onDrop","onDragover","dataKey","checkboxOnRight","checkboxNode","right","focusable","onCheck","assign","class","onDragstart","level","style","width","hide","el","position","offsetLevel"],"sources":["/Users/elmo/GitHub/meetings_vue3/node_modules/naive-ui/es/tree/src/TreeNode.js"],"sourcesContent":["import { h, inject, computed, defineComponent, ref, onMounted } from 'vue';\nimport { useMemo } from 'vooks';\nimport { happensIn, repeat } from 'seemly';\nimport { createDataKey } from '../../_utils';\nimport NTreeNodeSwitcher from './TreeNodeSwitcher';\nimport NTreeNodeCheckbox from './TreeNodeCheckbox';\nimport NTreeNodeContent from './TreeNodeContent';\nimport { treeInjectionKey } from './interface';\nimport { renderDropMark } from './dnd';\nimport { isNodeDisabled } from './utils';\nconst TreeNode = defineComponent({\n    name: 'TreeNode',\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        tmNode: {\n            type: Object,\n            required: true\n        }\n    },\n    setup(props) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const NTree = inject(treeInjectionKey);\n        const { droppingNodeParentRef, droppingMouseNodeRef, draggingNodeRef, droppingPositionRef, droppingOffsetLevelRef, nodePropsRef, indentRef, blockLineRef, checkboxPlacementRef, checkOnClickRef, disabledFieldRef } = NTree;\n        const checkboxDisabledRef = useMemo(() => !!props.tmNode.rawNode.checkboxDisabled);\n        const nodeIsDisabledRef = useMemo(() => {\n            return isNodeDisabled(props.tmNode, disabledFieldRef.value);\n        });\n        const disabledRef = useMemo(() => NTree.disabledRef.value || nodeIsDisabledRef.value);\n        const resolvedNodePropsRef = computed(() => {\n            const { value: nodeProps } = nodePropsRef;\n            if (!nodeProps)\n                return undefined;\n            return nodeProps({ option: props.tmNode.rawNode });\n        });\n        // used for drag and drop\n        const contentInstRef = ref(null);\n        // must be non-reactive\n        const contentElRef = { value: null };\n        onMounted(() => {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            contentElRef.value = contentInstRef.value.$el;\n        });\n        function handleSwitcherClick() {\n            const { tmNode } = props;\n            if (!tmNode.isLeaf && !tmNode.shallowLoaded) {\n                if (!NTree.loadingKeysRef.value.has(tmNode.key)) {\n                    NTree.loadingKeysRef.value.add(tmNode.key);\n                }\n                else {\n                    return;\n                }\n                const { onLoadRef: { value: onLoad } } = NTree;\n                if (onLoad) {\n                    void onLoad(tmNode.rawNode)\n                        .then(() => {\n                        NTree.handleSwitcherClick(tmNode);\n                    })\n                        .finally(() => {\n                        NTree.loadingKeysRef.value.delete(tmNode.key);\n                    });\n                }\n            }\n            else {\n                NTree.handleSwitcherClick(tmNode);\n            }\n        }\n        const selectableRef = useMemo(() => !nodeIsDisabledRef.value &&\n            NTree.selectableRef.value &&\n            (NTree.internalTreeSelect\n                ? NTree.mergedCheckStrategyRef.value !== 'child' ||\n                    (NTree.multipleRef.value && NTree.cascadeRef.value) ||\n                    props.tmNode.isLeaf\n                : true));\n        const checkableRef = useMemo(() => NTree.checkableRef.value &&\n            (NTree.cascadeRef.value ||\n                NTree.mergedCheckStrategyRef.value !== 'child' ||\n                props.tmNode.isLeaf));\n        const checkedRef = useMemo(() => NTree.displayedCheckedKeysRef.value.includes(props.tmNode.key));\n        const mergedCheckOnClickRef = useMemo(() => {\n            const { value: checkable } = checkableRef;\n            if (!checkable)\n                return false;\n            const { value: checkOnClick } = checkOnClickRef;\n            if (typeof checkOnClick === 'boolean') {\n                return checkOnClick;\n            }\n            return checkOnClick(props.tmNode.rawNode);\n        });\n        function _handleClick(e) {\n            const { value: expandOnClick } = NTree.expandOnClickRef;\n            const { value: selectable } = selectableRef;\n            const { value: mergedCheckOnClick } = mergedCheckOnClickRef;\n            if (!selectable && !expandOnClick && !mergedCheckOnClick)\n                return;\n            if (happensIn(e, 'checkbox') || happensIn(e, 'switcher'))\n                return;\n            const { tmNode } = props;\n            if (selectable) {\n                NTree.handleSelect(tmNode);\n            }\n            if (expandOnClick && !tmNode.isLeaf) {\n                handleSwitcherClick();\n            }\n            if (mergedCheckOnClick) {\n                handleCheck(!checkedRef.value);\n            }\n        }\n        function handleContentClick(e) {\n            var _a, _b;\n            if (blockLineRef.value)\n                return;\n            if (!disabledRef.value)\n                _handleClick(e);\n            (_b = (_a = resolvedNodePropsRef.value) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n        }\n        function handleLineClick(e) {\n            var _a, _b;\n            if (!blockLineRef.value)\n                return;\n            if (!disabledRef.value) {\n                _handleClick(e);\n            }\n            (_b = (_a = resolvedNodePropsRef.value) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n        }\n        function handleCheck(checked) {\n            NTree.handleCheck(props.tmNode, checked);\n        }\n        // Dnd\n        function handleDragStart(e) {\n            NTree.handleDragStart({\n                event: e,\n                node: props.tmNode\n            });\n        }\n        function handleDragEnter(e) {\n            if (e.currentTarget !== e.target) {\n                return;\n            }\n            NTree.handleDragEnter({\n                event: e,\n                node: props.tmNode\n            });\n        }\n        function handleDragOver(e) {\n            e.preventDefault(); // if not prevent, drop event won't be fired...\n            NTree.handleDragOver({\n                event: e,\n                node: props.tmNode\n            });\n        }\n        function handleDragEnd(e) {\n            NTree.handleDragEnd({\n                event: e,\n                node: props.tmNode\n            });\n        }\n        function handleDragLeave(e) {\n            if (e.currentTarget !== e.target) {\n                return;\n            }\n            NTree.handleDragLeave({\n                event: e,\n                node: props.tmNode\n            });\n        }\n        function handleDrop(e) {\n            e.preventDefault();\n            if (droppingPositionRef.value !== null) {\n                NTree.handleDrop({\n                    event: e,\n                    node: props.tmNode,\n                    dropPosition: droppingPositionRef.value\n                });\n            }\n        }\n        return {\n            showDropMark: useMemo(() => {\n                const { value: draggingNode } = draggingNodeRef;\n                if (!draggingNode)\n                    return;\n                const { value: droppingPosition } = droppingPositionRef;\n                if (!droppingPosition)\n                    return;\n                const { value: droppingMouseNode } = droppingMouseNodeRef;\n                if (!droppingMouseNode) {\n                    return;\n                }\n                const { tmNode } = props;\n                if (tmNode.key === droppingMouseNode.key)\n                    return true;\n                return false;\n            }),\n            showDropMarkAsParent: useMemo(() => {\n                const { value: droppingNodeParent } = droppingNodeParentRef;\n                if (!droppingNodeParent)\n                    return false;\n                const { tmNode } = props;\n                const { value: droppingPosition } = droppingPositionRef;\n                if (droppingPosition === 'before' || droppingPosition === 'after') {\n                    return droppingNodeParent.key === tmNode.key;\n                }\n                return false;\n            }),\n            pending: useMemo(() => NTree.pendingNodeKeyRef.value === props.tmNode.key),\n            loading: useMemo(() => NTree.loadingKeysRef.value.has(props.tmNode.key)),\n            highlight: useMemo(() => {\n                var _a;\n                return (_a = NTree.highlightKeySetRef.value) === null || _a === void 0 ? void 0 : _a.has(props.tmNode.key);\n            }),\n            checked: checkedRef,\n            indeterminate: useMemo(() => NTree.displayedIndeterminateKeysRef.value.includes(props.tmNode.key)),\n            selected: useMemo(() => NTree.mergedSelectedKeysRef.value.includes(props.tmNode.key)),\n            expanded: useMemo(() => NTree.mergedExpandedKeysRef.value.includes(props.tmNode.key)),\n            disabled: disabledRef,\n            checkable: checkableRef,\n            mergedCheckOnClick: mergedCheckOnClickRef,\n            checkboxDisabled: checkboxDisabledRef,\n            selectable: selectableRef,\n            expandOnClick: NTree.expandOnClickRef,\n            internalScrollable: NTree.internalScrollableRef,\n            draggable: NTree.draggableRef,\n            blockLine: blockLineRef,\n            nodeProps: resolvedNodePropsRef,\n            checkboxFocusable: NTree.internalCheckboxFocusableRef,\n            droppingPosition: droppingPositionRef,\n            droppingOffsetLevel: droppingOffsetLevelRef,\n            indent: indentRef,\n            checkboxPlacement: checkboxPlacementRef,\n            contentInstRef,\n            contentElRef,\n            handleCheck,\n            handleDrop,\n            handleDragStart,\n            handleDragEnter,\n            handleDragOver,\n            handleDragEnd,\n            handleDragLeave,\n            handleLineClick,\n            handleContentClick,\n            handleSwitcherClick\n        };\n    },\n    render() {\n        const { tmNode, clsPrefix, checkable, expandOnClick, selectable, selected, checked, highlight, draggable, blockLine, indent, disabled, pending, internalScrollable, nodeProps, checkboxPlacement } = this;\n        // drag start not inside\n        // it need to be append to node itself, not wrapper\n        const dragEventHandlers = draggable && !disabled\n            ? {\n                onDragenter: this.handleDragEnter,\n                onDragleave: this.handleDragLeave,\n                onDragend: this.handleDragEnd,\n                onDrop: this.handleDrop,\n                onDragover: this.handleDragOver\n            }\n            : undefined;\n        // In non virtual mode, there's no evidence that which element should be\n        // scrolled to, so we need data-key to query the target element.\n        const dataKey = internalScrollable ? createDataKey(tmNode.key) : undefined;\n        const checkboxOnRight = checkboxPlacement === 'right';\n        const checkboxNode = checkable ? (h(NTreeNodeCheckbox, { right: checkboxOnRight, focusable: this.checkboxFocusable, disabled: disabled || this.checkboxDisabled, clsPrefix: clsPrefix, checked: this.checked, indeterminate: this.indeterminate, onCheck: this.handleCheck })) : null;\n        return (h(\"div\", Object.assign({ class: `${clsPrefix}-tree-node-wrapper` }, dragEventHandlers),\n            h(\"div\", Object.assign({}, (blockLine ? nodeProps : undefined), { class: [\n                    `${clsPrefix}-tree-node`,\n                    {\n                        [`${clsPrefix}-tree-node--selected`]: selected,\n                        [`${clsPrefix}-tree-node--checkable`]: checkable,\n                        [`${clsPrefix}-tree-node--highlight`]: highlight,\n                        [`${clsPrefix}-tree-node--pending`]: pending,\n                        [`${clsPrefix}-tree-node--disabled`]: disabled,\n                        [`${clsPrefix}-tree-node--selectable`]: selectable,\n                        [`${clsPrefix}-tree-node--clickable`]: selectable || expandOnClick || this.mergedCheckOnClick\n                    },\n                    nodeProps === null || nodeProps === void 0 ? void 0 : nodeProps.class\n                ], \"data-key\": dataKey, draggable: draggable && blockLine, onClick: this.handleLineClick, onDragstart: draggable && blockLine && !disabled\n                    ? this.handleDragStart\n                    : undefined }),\n                repeat(tmNode.level, h(\"div\", { class: `${clsPrefix}-tree-node-indent` },\n                    h(\"div\", { style: { width: `${indent}px` } }))),\n                h(NTreeNodeSwitcher, { clsPrefix: clsPrefix, expanded: this.expanded, loading: this.loading, hide: tmNode.isLeaf, onClick: this.handleSwitcherClick }),\n                !checkboxOnRight ? checkboxNode : null,\n                h(NTreeNodeContent, { ref: \"contentInstRef\", clsPrefix: clsPrefix, checked: checked, selected: selected, onClick: this.handleContentClick, nodeProps: blockLine ? undefined : nodeProps, onDragstart: draggable && !blockLine && !disabled\n                        ? this.handleDragStart\n                        : undefined, tmNode: tmNode }),\n                draggable\n                    ? this.showDropMark\n                        ? renderDropMark({\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                            el: this.contentElRef.value,\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                            position: this.droppingPosition,\n                            offsetLevel: this.droppingOffsetLevel,\n                            indent\n                        })\n                        : this.showDropMarkAsParent\n                            ? renderDropMark({\n                                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                                el: this.contentElRef.value,\n                                position: 'inside',\n                                offsetLevel: this.droppingOffsetLevel,\n                                indent\n                            })\n                            : null\n                    : null,\n                checkboxOnRight ? checkboxNode : null)));\n    }\n});\nexport default TreeNode;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}