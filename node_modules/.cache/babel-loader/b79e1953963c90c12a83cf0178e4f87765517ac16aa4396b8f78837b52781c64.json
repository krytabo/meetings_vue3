{"ast":null,"code":"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, TransitionGroup as _TransitionGroup, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-0f251717\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"transfer-tree\"\n};\nconst _hoisted_2 = {\n  class: \"transfer-panel\"\n};\nconst _hoisted_3 = {\n  class: \"transfer-panel-header\"\n};\nconst _hoisted_4 = {\n  class: \"transfer-panel-body\"\n};\nconst _hoisted_5 = {\n  class: \"transfer-buttons\"\n};\nconst _hoisted_6 = {\n  class: \"transfer-panel\"\n};\nconst _hoisted_7 = {\n  class: \"transfer-panel-header\"\n};\nconst _hoisted_8 = {\n  class: \"transfer-panel-ratio\"\n};\nconst _hoisted_9 = {\n  class: \"transfer-panel-body\"\n};\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"ri-drag-move-2-fill\"\n}, null, -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_checkbox = _resolveComponent(\"el-checkbox\");\n  const _component_el_tree = _resolveComponent(\"el-tree\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_draggable = _resolveComponent(\"draggable\");\n  const _component_el_checkbox_group = _resolveComponent(\"el-checkbox-group\");\n  const _component_el_empty = _resolveComponent(\"el-empty\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_el_checkbox, {\n    modelValue: $data.leftAllChecked,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.leftAllChecked = $event),\n    disabled: !($data.leftDataList && $data.leftDataList.length),\n    indeterminate: $data.isIndeterminateLeft,\n    onChange: $options.handleCheckAllChangeLeft\n  }, {\n    default: _withCtx(() => [_createTextVNode(_toDisplayString($props.leftTitle), 1 /* TEXT */)]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\", \"disabled\", \"indeterminate\", \"onChange\"])]), _createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_el_tree, {\n    ref: \"leftTree\",\n    \"show-checkbox\": \"\",\n    \"check-on-click-node\": \"\",\n    \"default-expand-all\": \"\",\n    \"node-key\": $props.defaultProps.key,\n    data: $data.leftDataList,\n    props: $props.defaultProps,\n    onCheck: $options.handleCheckLeft\n  }, null, 8 /* PROPS */, [\"node-key\", \"data\", \"props\", \"onCheck\"])])]), _createElementVNode(\"div\", _hoisted_5, [_createVNode(_component_el_button, {\n    class: \"mb8\",\n    size: \"mini\",\n    icon: \"el-icon-arrow-left\",\n    disabled: !($data.rightCheckedList && $data.rightCheckedList.length),\n    onClick: $options.handleLeftChange\n  }, null, 8 /* PROPS */, [\"disabled\", \"onClick\"]), _createVNode(_component_el_button, {\n    type: \"primary\",\n    size: \"mini\",\n    icon: \"el-icon-arrow-right\",\n    disabled: !($data.leftCheckedList && $data.leftCheckedList.length),\n    onClick: $options.handleRightChange\n  }, null, 8 /* PROPS */, [\"disabled\", \"onClick\"])]), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_createVNode(_component_el_checkbox, {\n    modelValue: $data.rightAllChecked,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.rightAllChecked = $event),\n    disabled: !($data.rightDataList && $data.rightDataList.length),\n    indeterminate: $data.isIndeterminateRight,\n    onChange: $options.handleCheckAllChangeRight\n  }, {\n    default: _withCtx(() => [_createTextVNode(_toDisplayString($props.rightTitle), 1 /* TEXT */)]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\", \"disabled\", \"indeterminate\", \"onChange\"]), _createCommentVNode(\" 右侧数据量/限制最大可保存数据量 \"), _createElementVNode(\"span\", _hoisted_8, _toDisplayString($data.rightDataList.length) + \"/\" + _toDisplayString($props.maxLimitCount), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_9, [$data.rightDataList && $data.rightDataList.length ? (_openBlock(), _createBlock(_component_el_checkbox_group, {\n    key: 0,\n    modelValue: $data.rightCheckedKeyList,\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $data.rightCheckedKeyList = $event),\n    onChange: $options.handleCheckRight\n  }, {\n    default: _withCtx(() => [_createVNode(_component_draggable, {\n      modelValue: $data.rightDataList,\n      \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.rightDataList = $event),\n      chosenClass: \"chosen\",\n      forceFallback: \"true\",\n      animation: \"200\",\n      onStart: _cache[3] || (_cache[3] = $event => $data.drag = true),\n      onEnd: _cache[4] || (_cache[4] = $event => $data.drag = false),\n      onUpdate: $options.handleOrder\n    }, {\n      default: _withCtx(() => [_createVNode(_TransitionGroup, null, {\n        default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.rightDataList, (item, index) => {\n          return _openBlock(), _createBlock(_component_el_checkbox, {\n            key: `right_${item[$props.defaultProps.key]}_${index}`,\n            label: item[$props.defaultProps.key]\n          }, {\n            default: _withCtx(() => [_createTextVNode(_toDisplayString(item[$props.defaultProps.label]) + \" \", 1 /* TEXT */), _createCommentVNode(\"<img src=\\\"@/assets/drag_icon.svg\\\" alt=\\\"拖拽排序\\\" width=\\\"40\\\" height=\\\"15\\\" />\"), _hoisted_10]),\n            _: 2 /* DYNAMIC */\n          }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"label\"]);\n        }), 128 /* KEYED_FRAGMENT */))]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"modelValue\", \"onUpdate\"])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\", \"onChange\"])) : (_openBlock(), _createBlock(_component_el_empty, {\n    key: 1,\n    description: \"暂无数据\"\n  }))])])]);\n}","map":{"version":3,"mappings":"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","names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_createVNode","_component_el_checkbox","$data","disabled","length","indeterminate","onChange","$options","$props","_hoisted_4","_component_el_tree","ref","key","data","props","onCheck","_hoisted_5","_component_el_button","size","icon","onClick","type","_hoisted_6","_hoisted_7","_createCommentVNode","_hoisted_8","_hoisted_9","_createBlock","_component_el_checkbox_group","_component_draggable","chosenClass","forceFallback","animation","onStart","onEnd","onUpdate","_TransitionGroup","_Fragment","item","index","label","_hoisted_10","_component_el_empty","description"],"sourceRoot":"","sources":["/Users/elmo/Documents/GitHub/meetings_vue3/src/components/TransferTreeList.vue"],"sourcesContent":["<template>\n  <div class=\"transfer-tree\">\n    <div class=\"transfer-panel\">\n      <div class=\"transfer-panel-header\">\n        <el-checkbox v-model=\"leftAllChecked\" :disabled=\"!(leftDataList && leftDataList.length)\" :indeterminate=\"isIndeterminateLeft\" @change=\"handleCheckAllChangeLeft\">{{ leftTitle }}</el-checkbox>\n      </div>\n      <div class=\"transfer-panel-body\">\n        <el-tree ref=\"leftTree\" show-checkbox check-on-click-node default-expand-all :node-key=\"defaultProps.key\" :data=\"leftDataList\" :props=\"defaultProps\" @check=\"handleCheckLeft\"></el-tree>\n      </div>\n    </div>\n    <div class=\"transfer-buttons\">\n      <el-button class=\"mb8\" size=\"mini\" icon=\"el-icon-arrow-left\" :disabled=\"!(rightCheckedList && rightCheckedList.length)\" @click=\"handleLeftChange\"></el-button>\n      <el-button type=\"primary\" size=\"mini\" icon=\"el-icon-arrow-right\" :disabled=\"!(leftCheckedList && leftCheckedList.length)\" @click=\"handleRightChange\"></el-button>\n    </div>\n    <div class=\"transfer-panel\">\n      <div class=\"transfer-panel-header\">\n        <el-checkbox v-model=\"rightAllChecked\" :disabled=\"!(rightDataList && rightDataList.length)\" :indeterminate=\"isIndeterminateRight\" @change=\"handleCheckAllChangeRight\">\n          {{ rightTitle }}\n        </el-checkbox>\n        <!-- 右侧数据量/限制最大可保存数据量 -->\n        <span class=\"transfer-panel-ratio\">{{ rightDataList.length }}/{{ maxLimitCount }}</span>\n      </div>\n      <div class=\"transfer-panel-body\">\n        <el-checkbox-group v-if=\"rightDataList && rightDataList.length\" v-model=\"rightCheckedKeyList\" @change=\"handleCheckRight\">\n          <draggable v-model=\"rightDataList\" chosenClass=\"chosen\" forceFallback=\"true\" animation=\"200\" @start=\"drag = true\" @end=\"drag = false\" @update=\"handleOrder\">\n            <transition-group>\n              <el-checkbox v-for=\"(item, index) in rightDataList\" :key=\"`right_${item[defaultProps.key]}_${index}`\" :label=\"item[defaultProps.key]\">\n                {{ item[defaultProps.label] }}\n                <!--<img src=\"@/assets/drag_icon.svg\" alt=\"拖拽排序\" width=\"40\" height=\"15\" />-->\n                <i class=\"ri-drag-move-2-fill\"></i>\n              </el-checkbox>\n            </transition-group>\n          </draggable>\n        </el-checkbox-group>\n        <el-empty description=\"暂无数据\" v-else></el-empty>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n// import { number } from \"echarts\";\n// import draggable from \"vuedraggable\";\n\nexport default {\n  name: \"transferPage\",\n  components: {\n    // draggable,\n  },\n  props: {\n    // tree的默认结构\n    defaultProps: {\n      type: Object,\n      required: true,\n      default: () => ({\n        children: \"children\",\n        label: \"label\",\n        key: \"key\",\n        parentKey: \"parent\", // 这个属性不是 tree组件需要的，是子节点数据中记录父节点标识的属性\n      }),\n    },\n    // left 原始数据\n    leftOriginalList: {\n      type: Array,\n      default: () => [],\n    },\n    // right 原始数据\n    rightOriginalList: {\n      type: Array,\n      default: () => [],\n    },\n    // 最大可保存数据量\n    maxLimitCount: {\n      type: Number,\n      default: 0,\n    },\n    // left 标题\n    leftTitle: {\n      type: String,\n      default: \"可选项\",\n    },\n    // right 标题\n    rightTitle: {\n      type: String,\n      default: \"已选项\",\n    },\n  },\n  data() {\n    return {\n      leftAllChecked: false, // left 全选checkbox\n      leftDataList: [], // left 所有数据\n      leftCheckedList: [], // left 选中的数据\n      isIndeterminateLeft: false,\n      rightAllChecked: false, // right 全选checkbox\n      rightDataList: [], // right 所有数据\n      rightCheckedList: [], // right 选中的数据 =>rightCheckedKeyList对应的 对象数组\n      rightCheckedKeyList: [], // right 选中的 key list => 绑定在 el-checkbox-group上的 list\n      isIndeterminateRight: false,\n      drag: false,\n    };\n  },\n  // 初始化\n  watch: {\n    leftOriginalList: {\n      immediate: true,\n      deep: true,\n      handler(newVal) {\n        this.leftDataList = JSON.parse(JSON.stringify(newVal));\n        this.leftCheckedList = [];\n        this.leftAllChecked = false;\n        this.isIndeterminateLeft = false;\n      },\n    },\n    rightOriginalList: {\n      immediate: true,\n      deep: true,\n      handler(newVal) {\n        this.rightDataList = JSON.parse(JSON.stringify(newVal));\n        this.rightCheckedList = [];\n        this.rightCheckedKeyList = [];\n        this.rightAllChecked = false;\n        this.isIndeterminateRight = false;\n      },\n    },\n  },\n  computed: {\n    // left 所有子节点数据的数量\n    leftDataTotal() {\n      let count = 0;\n      this.leftDataList.forEach((v) => {\n        if (v[this.defaultProps.children]) {\n          count += v[this.defaultProps.children].length;\n        }\n      });\n      return count;\n    },\n  },\n  methods: {\n    // 选择——left\n    handleCheckLeft(val, { checkedNodes }) {\n      // 包含了父节点\n      const checkedCount = checkedNodes.length;\n      const totalNodeCount = this.leftDataTotal + this.leftDataList.length;\n      this.leftAllChecked = checkedCount === totalNodeCount;\n      this.isIndeterminateLeft = checkedCount > 0 && checkedCount < totalNodeCount;\n      // 手动剔除父节点\n      this.leftCheckedList = checkedNodes.filter((v) => !v[this.defaultProps.children]);\n    },\n    // 选择——right\n    handleCheckRight(val) {\n      const checkedCount = val.length;\n      this.rightAllChecked = checkedCount === this.rightDataList.length;\n      this.isIndeterminateRight = checkedCount > 0 && checkedCount < this.rightDataList.length;\n      // 手动组织对象数组\n      this.rightCheckedList = this.rightDataList.filter((v) => val.includes(v[this.defaultProps.key]));\n    },\n    // 全选——left\n    handleCheckAllChangeLeft(val) {\n      this.isIndeterminateLeft = false;\n      const checkedNodes = [];\n      if (val) {\n        this.leftDataList.forEach((v) => {\n          checkedNodes.push(v);\n          if (v[this.defaultProps.children]) {\n            v[this.defaultProps.children].forEach((child) => {\n              checkedNodes.push(child);\n            });\n          }\n        });\n      }\n      // 手动赋checkedlist值\n      this.leftCheckedList = checkedNodes.filter((v) => !v[this.defaultProps.children]);\n      this.$refs.leftTree.setCheckedNodes(checkedNodes);\n    },\n    // 全选——right\n    handleCheckAllChangeRight(val) {\n      this.isIndeterminateRight = false;\n      this.rightCheckedKeyList = val ? this.rightDataList.map((v) => v[this.defaultProps.key]) : [];\n      // 手动赋checkedlist值\n      this.rightCheckedList = val ? this.rightDataList.map((v) => v) : [];\n    },\n    // 传递 right => left\n    handleLeftChange() {\n      // left +\n      const leftDataMap = {};\n      this.leftDataList.forEach((v) => {\n        leftDataMap[v[this.defaultProps.key]] = v[this.defaultProps.children] || [];\n      });\n      this.rightCheckedList.forEach((v) => {\n        leftDataMap[v[this.defaultProps.parentKey]].push(v);\n      });\n      // right -\n      this.rightDataList = this.rightDataList.filter((v) => !this.rightCheckedKeyList.includes(v[this.defaultProps.key]));\n      // 清空选中数组\n      this.rightCheckedList = [];\n      this.rightCheckedKeyList = [];\n      // right 全选 => 直接取消\n      this.rightAllChecked = false;\n      this.isIndeterminateRight = false;\n      // left 全选 => 原先没有选中/半选中=>不动，原先全选=>半选中 => 重新渲染一次 tree组件选中\n      if (this.leftAllChecked && !this.isIndeterminateLeft) {\n        this.leftAllChecked = false;\n        this.isIndeterminateLeft = true;\n      }\n      // 先清空再重置，直接重置的话，父节点的状态会有问题\n      this.$refs.leftTree.setCheckedNodes([]);\n      this.$nextTick(() => {\n        this.$refs.leftTree.setCheckedNodes(this.leftCheckedList);\n      });\n      // 传递当前数据分布\n      this.$emit(\"change\", {\n        left: this.leftDataList,\n        right: this.rightDataList,\n      });\n    },\n    // 传递 left => right\n    handleRightChange() {\n      // right +\n      this.rightDataList.push(...this.leftCheckedList);\n      // left -\n      const { key, children } = this.defaultProps;\n      const checkedKeys = this.leftCheckedList.map((v) => v[key]);\n      this.leftDataList.forEach((v) => {\n        if (v[children]) {\n          v[children] = v[children].filter((child) => !checkedKeys.includes(child[key]));\n        }\n      });\n      // 清空选中数组\n      this.leftCheckedList = [];\n      // 清空 tree组件选中\n      this.$refs.leftTree.setCheckedNodes([]);\n      // left 全选 => 直接取消\n      this.leftAllChecked = false;\n      this.isIndeterminateLeft = false;\n      // right 全选 => 原先没有选中/半选中=>不动，原先全选=>半选中\n      if (this.rightAllChecked && !this.isIndeterminateRight) {\n        this.rightAllChecked = false;\n        this.isIndeterminateRight = true;\n      }\n      // 传递当前数据分布\n      this.$emit(\"change\", {\n        left: this.leftDataList,\n        right: this.rightDataList,\n      });\n    },\n    handleOrder() {\n      // 传递当前数据分布\n      this.$emit(\"change\", {\n        left: this.leftDataList,\n        right: this.rightDataList,\n      });\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.transfer-tree {\n  display: flex;\n  width: 100%;\n  .transfer-panel {\n    width: 100%;\n    height: 100%;\n    border-radius: 4px;\n    border: 1px solid #165dff;\n    .transfer-panel-header {\n      display: flex;\n      justify-content: space-between;\n      height: 30px;\n      line-height: 30px;\n      border-radius: 3px 3px 0px 0px;\n      padding: 0 12px;\n      ::v-deep .el-checkbox {\n        .el-checkbox__label {\n          color: #165dff;\n          font-size: 14px;\n          padding-left: 8px;\n        }\n      }\n      .transfer-panel-ratio {\n        font-size: 12px;\n        color: #165dff;\n      }\n    }\n    .transfer-panel-body {\n      height: 200px;\n      padding: 12px 12px 0 12px;\n      border-top: 1px solid #165dff;\n      overflow: auto;\n      .transfer-panel-filter {\n        float: right;\n        width: 170px;\n        .el-checkbox__label {\n          color: #165dff;\n          font-size: 12px;\n          padding-left: 8px;\n        }\n        .el-input__inner {\n          height: 26px;\n          border: none;\n        }\n      }\n      ::v-deep .el-tree {\n        color: #165dff;\n        margin-bottom: 4px;\n        .el-tree-node__content {\n          height: 22px;\n          margin-bottom: 8px;\n          .el-tree-node__label {\n            font-size: 12px;\n          }\n        }\n        .el-tree-node__children {\n          .el-tree-node__content {\n            padding-left: 12px !important;\n          }\n        }\n        .el-tree-node__expand-icon {\n          margin-left: -6px;\n        }\n      }\n      ::v-deep .el-checkbox-group {\n        margin-bottom: 4px;\n        .el-checkbox {\n          display: block;\n          line-height: 22px;\n          color: #165dff;\n          margin-bottom: 8px;\n          width: 100%;\n          .el-checkbox__label {\n            width: calc(100% - 5px);\n            position: relative;\n            font-size: 12px;\n            padding-left: 8px;\n            img {\n              position: absolute;\n              right: 0;\n              top: 2px;\n            }\n          }\n        }\n      }\n    }\n  }\n  .transfer-buttons {\n    display: flex;\n    justify-content: center;\n    flex-flow: column;\n    margin: 0 12px;\n    .el-button {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      width: 32px;\n      height: 24px;\n      padding: 0;\n      margin-left: 0;\n    }\n  }\n}\n::v-deep .el-empty {\n  height: 60px;\n  padding: 0;\n  .el-empty__image {\n    display: none;\n  }\n  .el-empty__description {\n    margin: 0;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}