{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { h, defineComponent, provide, computed, toRef, ref, watchEffect } from 'vue';\nimport { useMergedState } from 'vooks';\nimport { useConfig, useFormItem } from '../../_mixins';\nimport { call, createInjectionKey, warnOnce } from '../../_utils';\nexport const checkboxGroupInjectionKey = createInjectionKey('n-checkbox-group');\nexport const checkboxGroupProps = {\n  min: Number,\n  max: Number,\n  size: String,\n  value: Array,\n  defaultValue: {\n    type: Array,\n    default: null\n  },\n  disabled: {\n    type: Boolean,\n    default: undefined\n  },\n  'onUpdate:value': [Function, Array],\n  onUpdateValue: [Function, Array],\n  // deprecated\n  onChange: [Function, Array]\n};\nexport default defineComponent({\n  name: 'CheckboxGroup',\n  props: checkboxGroupProps,\n  setup(props) {\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(() => {\n        if (props.onChange !== undefined) {\n          warnOnce('checkbox-group', '`on-change` is deprecated, please use `on-update:value` instead.');\n        }\n      });\n    }\n    const {\n      mergedClsPrefixRef\n    } = useConfig(props);\n    const formItem = useFormItem(props);\n    const {\n      mergedSizeRef,\n      mergedDisabledRef\n    } = formItem;\n    const uncontrolledValueRef = ref(props.defaultValue);\n    const controlledValueRef = computed(() => props.value);\n    const mergedValueRef = useMergedState(controlledValueRef, uncontrolledValueRef);\n    const checkedCount = computed(() => {\n      var _a;\n      return ((_a = mergedValueRef.value) === null || _a === void 0 ? void 0 : _a.length) || 0;\n    });\n    const valueSetRef = computed(() => {\n      if (Array.isArray(mergedValueRef.value)) {\n        return new Set(mergedValueRef.value);\n      }\n      return new Set();\n    });\n    function toggleCheckbox(checked, checkboxValue) {\n      const {\n        nTriggerFormInput,\n        nTriggerFormChange\n      } = formItem;\n      const {\n        onChange,\n        'onUpdate:value': _onUpdateValue,\n        onUpdateValue\n      } = props;\n      if (Array.isArray(mergedValueRef.value)) {\n        const groupValue = Array.from(mergedValueRef.value);\n        const index = groupValue.findIndex(value => value === checkboxValue);\n        if (checked) {\n          if (!~index) {\n            groupValue.push(checkboxValue);\n            if (onUpdateValue) {\n              call(onUpdateValue, groupValue, {\n                actionType: 'check',\n                value: checkboxValue\n              });\n            }\n            if (_onUpdateValue) {\n              call(_onUpdateValue, groupValue, {\n                actionType: 'check',\n                value: checkboxValue\n              });\n            }\n            nTriggerFormInput();\n            nTriggerFormChange();\n            uncontrolledValueRef.value = groupValue;\n            // deprecated\n            if (onChange) call(onChange, groupValue);\n          }\n        } else {\n          if (~index) {\n            groupValue.splice(index, 1);\n            if (onUpdateValue) {\n              call(onUpdateValue, groupValue, {\n                actionType: 'uncheck',\n                value: checkboxValue\n              });\n            }\n            if (_onUpdateValue) {\n              call(_onUpdateValue, groupValue, {\n                actionType: 'uncheck',\n                value: checkboxValue\n              });\n            }\n            if (onChange) call(onChange, groupValue); // deprecated\n            uncontrolledValueRef.value = groupValue;\n            nTriggerFormInput();\n            nTriggerFormChange();\n          }\n        }\n      } else {\n        if (checked) {\n          if (onUpdateValue) {\n            call(onUpdateValue, [checkboxValue], {\n              actionType: 'check',\n              value: checkboxValue\n            });\n          }\n          if (_onUpdateValue) {\n            call(_onUpdateValue, [checkboxValue], {\n              actionType: 'check',\n              value: checkboxValue\n            });\n          }\n          if (onChange) call(onChange, [checkboxValue]); // deprecated\n          uncontrolledValueRef.value = [checkboxValue];\n          nTriggerFormInput();\n          nTriggerFormChange();\n        } else {\n          if (onUpdateValue) {\n            call(onUpdateValue, [], {\n              actionType: 'uncheck',\n              value: checkboxValue\n            });\n          }\n          if (_onUpdateValue) {\n            call(_onUpdateValue, [], {\n              actionType: 'uncheck',\n              value: checkboxValue\n            });\n          }\n          if (onChange) call(onChange, []); // deprecated\n          uncontrolledValueRef.value = [];\n          nTriggerFormInput();\n          nTriggerFormChange();\n        }\n      }\n    }\n    provide(checkboxGroupInjectionKey, {\n      checkedCountRef: checkedCount,\n      maxRef: toRef(props, 'max'),\n      minRef: toRef(props, 'min'),\n      valueSetRef,\n      disabledRef: mergedDisabledRef,\n      mergedSizeRef,\n      toggleCheckbox\n    });\n    return {\n      mergedClsPrefix: mergedClsPrefixRef\n    };\n  },\n  render() {\n    return h(\"div\", {\n      class: `${this.mergedClsPrefix}-checkbox-group`,\n      role: \"group\"\n    }, this.$slots);\n  }\n});","map":{"version":3,"names":["h","defineComponent","provide","computed","toRef","ref","watchEffect","useMergedState","useConfig","useFormItem","call","createInjectionKey","warnOnce","checkboxGroupInjectionKey","checkboxGroupProps","min","Number","max","size","String","value","Array","defaultValue","type","default","disabled","Boolean","undefined","Function","onUpdateValue","onChange","name","props","setup","process","env","NODE_ENV","mergedClsPrefixRef","formItem","mergedSizeRef","mergedDisabledRef","uncontrolledValueRef","controlledValueRef","mergedValueRef","checkedCount","_a","length","valueSetRef","isArray","Set","toggleCheckbox","checked","checkboxValue","nTriggerFormInput","nTriggerFormChange","_onUpdateValue","groupValue","from","index","findIndex","push","actionType","splice","checkedCountRef","maxRef","minRef","disabledRef","mergedClsPrefix","render","class","role","$slots"],"sources":["/Users/elmo/Documents/GitHub/meetings_vue3/node_modules/naive-ui/es/checkbox/src/CheckboxGroup.js"],"sourcesContent":["import { h, defineComponent, provide, computed, toRef, ref, watchEffect } from 'vue';\nimport { useMergedState } from 'vooks';\nimport { useConfig, useFormItem } from '../../_mixins';\nimport { call, createInjectionKey, warnOnce } from '../../_utils';\nexport const checkboxGroupInjectionKey = createInjectionKey('n-checkbox-group');\nexport const checkboxGroupProps = {\n    min: Number,\n    max: Number,\n    size: String,\n    value: Array,\n    defaultValue: {\n        type: Array,\n        default: null\n    },\n    disabled: {\n        type: Boolean,\n        default: undefined\n    },\n    'onUpdate:value': [Function, Array],\n    onUpdateValue: [Function, Array],\n    // deprecated\n    onChange: [Function, Array]\n};\nexport default defineComponent({\n    name: 'CheckboxGroup',\n    props: checkboxGroupProps,\n    setup(props) {\n        if (process.env.NODE_ENV !== 'production') {\n            watchEffect(() => {\n                if (props.onChange !== undefined) {\n                    warnOnce('checkbox-group', '`on-change` is deprecated, please use `on-update:value` instead.');\n                }\n            });\n        }\n        const { mergedClsPrefixRef } = useConfig(props);\n        const formItem = useFormItem(props);\n        const { mergedSizeRef, mergedDisabledRef } = formItem;\n        const uncontrolledValueRef = ref(props.defaultValue);\n        const controlledValueRef = computed(() => props.value);\n        const mergedValueRef = useMergedState(controlledValueRef, uncontrolledValueRef);\n        const checkedCount = computed(() => {\n            var _a;\n            return ((_a = mergedValueRef.value) === null || _a === void 0 ? void 0 : _a.length) || 0;\n        });\n        const valueSetRef = computed(() => {\n            if (Array.isArray(mergedValueRef.value)) {\n                return new Set(mergedValueRef.value);\n            }\n            return new Set();\n        });\n        function toggleCheckbox(checked, checkboxValue) {\n            const { nTriggerFormInput, nTriggerFormChange } = formItem;\n            const { onChange, 'onUpdate:value': _onUpdateValue, onUpdateValue } = props;\n            if (Array.isArray(mergedValueRef.value)) {\n                const groupValue = Array.from(mergedValueRef.value);\n                const index = groupValue.findIndex((value) => value === checkboxValue);\n                if (checked) {\n                    if (!~index) {\n                        groupValue.push(checkboxValue);\n                        if (onUpdateValue) {\n                            call(onUpdateValue, groupValue, {\n                                actionType: 'check',\n                                value: checkboxValue\n                            });\n                        }\n                        if (_onUpdateValue) {\n                            call(_onUpdateValue, groupValue, {\n                                actionType: 'check',\n                                value: checkboxValue\n                            });\n                        }\n                        nTriggerFormInput();\n                        nTriggerFormChange();\n                        uncontrolledValueRef.value = groupValue;\n                        // deprecated\n                        if (onChange)\n                            call(onChange, groupValue);\n                    }\n                }\n                else {\n                    if (~index) {\n                        groupValue.splice(index, 1);\n                        if (onUpdateValue) {\n                            call(onUpdateValue, groupValue, {\n                                actionType: 'uncheck',\n                                value: checkboxValue\n                            });\n                        }\n                        if (_onUpdateValue) {\n                            call(_onUpdateValue, groupValue, {\n                                actionType: 'uncheck',\n                                value: checkboxValue\n                            });\n                        }\n                        if (onChange)\n                            call(onChange, groupValue); // deprecated\n                        uncontrolledValueRef.value = groupValue;\n                        nTriggerFormInput();\n                        nTriggerFormChange();\n                    }\n                }\n            }\n            else {\n                if (checked) {\n                    if (onUpdateValue) {\n                        call(onUpdateValue, [checkboxValue], {\n                            actionType: 'check',\n                            value: checkboxValue\n                        });\n                    }\n                    if (_onUpdateValue) {\n                        call(_onUpdateValue, [checkboxValue], {\n                            actionType: 'check',\n                            value: checkboxValue\n                        });\n                    }\n                    if (onChange)\n                        call(onChange, [checkboxValue]); // deprecated\n                    uncontrolledValueRef.value = [checkboxValue];\n                    nTriggerFormInput();\n                    nTriggerFormChange();\n                }\n                else {\n                    if (onUpdateValue) {\n                        call(onUpdateValue, [], {\n                            actionType: 'uncheck',\n                            value: checkboxValue\n                        });\n                    }\n                    if (_onUpdateValue) {\n                        call(_onUpdateValue, [], {\n                            actionType: 'uncheck',\n                            value: checkboxValue\n                        });\n                    }\n                    if (onChange)\n                        call(onChange, []); // deprecated\n                    uncontrolledValueRef.value = [];\n                    nTriggerFormInput();\n                    nTriggerFormChange();\n                }\n            }\n        }\n        provide(checkboxGroupInjectionKey, {\n            checkedCountRef: checkedCount,\n            maxRef: toRef(props, 'max'),\n            minRef: toRef(props, 'min'),\n            valueSetRef,\n            disabledRef: mergedDisabledRef,\n            mergedSizeRef,\n            toggleCheckbox\n        });\n        return {\n            mergedClsPrefix: mergedClsPrefixRef\n        };\n    },\n    render() {\n        return (h(\"div\", { class: `${this.mergedClsPrefix}-checkbox-group`, role: \"group\" }, this.$slots));\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}