{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"videoJsPlayer\",\n  class: \"video-js vjs-defaultskin\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"video\", _hoisted_1, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"mappings":";;EAEWA,GAAG,EAAC,eAAe;EAACC,KAAK,EAAC;;;uBADnCC,oBAEM,cADJC,oBAAoE,SAApEC,UAAoE","names":["ref","class","_createElementBlock","_createElementVNode","_hoisted_1"],"sourceRoot":"","sources":["/Users/elmo/GitHub/meetings_vue3/src/components/VideoJSPlayer.vue"],"sourcesContent":["<template>\n  <div>\n    <video ref=\"videoJsPlayer\" class=\"video-js vjs-defaultskin\"></video>\n  </div>\n</template>\n<script>\n// Importing video-js\nimport videojs from \"video.js\";\nexport default {\n  name: \"VideoJsPlayer\",\n  props: {\n    options: {\n      type: Object,\n      default() {\n        return {};\n      },\n    },\n  },\n  data() {\n    return {\n      player: null,\n    };\n  },\n  // initializing the video player\n  // when the component is being mounted\n  mounted() {\n    this.player = videojs(this.$refs.videoPlayer, this.options, () => {\n      this.player.log(\"video player ready\", this);\n    });\n  },\n  // destroying the video player\n  // when the component is being destroyed\n  beforeDestroy() {\n    if (this.player) {\n      this.player.dispose();\n    }\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}