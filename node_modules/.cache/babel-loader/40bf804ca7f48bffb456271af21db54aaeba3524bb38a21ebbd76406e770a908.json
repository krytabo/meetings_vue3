{"ast":null,"code":"import { h, defineComponent } from 'vue';\nimport { NBaseIcon } from '../../_internal';\nimport { SuccessIcon, ErrorIcon, WarningIcon, InfoIcon } from '../../_internal/icons';\nconst iconMap = {\n  success: h(SuccessIcon, null),\n  error: h(ErrorIcon, null),\n  warning: h(WarningIcon, null),\n  info: h(InfoIcon, null)\n};\nexport default defineComponent({\n  name: 'ProgressCircle',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    status: {\n      type: String,\n      required: true\n    },\n    strokeWidth: {\n      type: Number,\n      required: true\n    },\n    fillColor: String,\n    railColor: String,\n    railStyle: [String, Object],\n    percentage: {\n      type: Number,\n      default: 0\n    },\n    offsetDegree: {\n      type: Number,\n      default: 0\n    },\n    showIndicator: {\n      type: Boolean,\n      required: true\n    },\n    indicatorTextColor: String,\n    unit: String,\n    viewBoxWidth: {\n      type: Number,\n      required: true\n    },\n    gapDegree: {\n      type: Number,\n      required: true\n    },\n    gapOffsetDegree: {\n      type: Number,\n      default: 0\n    }\n  },\n  setup(props, {\n    slots\n  }) {\n    function getPathStyles(percent, offsetDegree, strokeColor) {\n      const {\n        gapDegree,\n        viewBoxWidth,\n        strokeWidth\n      } = props;\n      const radius = 50;\n      const beginPositionX = 0;\n      const beginPositionY = radius;\n      const endPositionX = 0;\n      const endPositionY = 2 * radius;\n      const centerX = 50 + strokeWidth / 2;\n      const pathString = `M ${centerX},${centerX} m ${beginPositionX},${beginPositionY}\n      a ${radius},${radius} 0 1 1 ${endPositionX},${-endPositionY}\n      a ${radius},${radius} 0 1 1 ${-endPositionX},${endPositionY}`;\n      const len = Math.PI * 2 * radius;\n      const pathStyle = {\n        stroke: strokeColor,\n        strokeDasharray: `${percent / 100 * (len - gapDegree)}px ${viewBoxWidth * 8}px`,\n        strokeDashoffset: `-${gapDegree / 2}px`,\n        transformOrigin: offsetDegree ? 'center' : undefined,\n        transform: offsetDegree ? `rotate(${offsetDegree}deg)` : undefined\n      };\n      return {\n        pathString,\n        pathStyle\n      };\n    }\n    return () => {\n      const {\n        fillColor,\n        railColor,\n        strokeWidth,\n        offsetDegree,\n        status,\n        percentage,\n        showIndicator,\n        indicatorTextColor,\n        unit,\n        gapOffsetDegree,\n        clsPrefix\n      } = props;\n      const {\n        pathString: railPathString,\n        pathStyle: railPathStyle\n      } = getPathStyles(100, 0, railColor);\n      const {\n        pathString: fillPathString,\n        pathStyle: fillPathStyle\n      } = getPathStyles(percentage, offsetDegree, fillColor);\n      const viewBoxSize = 100 + strokeWidth;\n      return h(\"div\", {\n        class: `${clsPrefix}-progress-content`,\n        role: \"none\"\n      }, h(\"div\", {\n        class: `${clsPrefix}-progress-graph`,\n        \"aria-hidden\": true\n      }, h(\"div\", {\n        class: `${clsPrefix}-progress-graph-circle`,\n        style: {\n          transform: gapOffsetDegree ? `rotate(${gapOffsetDegree}deg)` : undefined\n        }\n      }, h(\"svg\", {\n        viewBox: `0 0 ${viewBoxSize} ${viewBoxSize}`\n      }, h(\"g\", null, h(\"path\", {\n        class: `${clsPrefix}-progress-graph-circle-rail`,\n        d: railPathString,\n        \"stroke-width\": strokeWidth,\n        \"stroke-linecap\": \"round\",\n        fill: \"none\",\n        style: railPathStyle\n      })), h(\"g\", null, h(\"path\", {\n        class: [`${clsPrefix}-progress-graph-circle-fill`, percentage === 0 && `${clsPrefix}-progress-graph-circle-fill--empty`],\n        d: fillPathString,\n        \"stroke-width\": strokeWidth,\n        \"stroke-linecap\": \"round\",\n        fill: \"none\",\n        style: fillPathStyle\n      }))))), showIndicator ? h(\"div\", null, slots.default ? h(\"div\", {\n        class: `${clsPrefix}-progress-custom-content`,\n        role: \"none\"\n      }, slots.default()) : status !== 'default' ? h(\"div\", {\n        class: `${clsPrefix}-progress-icon`,\n        \"aria-hidden\": true\n      }, h(NBaseIcon, {\n        clsPrefix: clsPrefix\n      }, {\n        default: () => iconMap[status]\n      })) : h(\"div\", {\n        class: `${clsPrefix}-progress-text`,\n        style: {\n          color: indicatorTextColor\n        },\n        role: \"none\"\n      }, h(\"span\", {\n        class: `${clsPrefix}-progress-text__percentage`\n      }, percentage), h(\"span\", {\n        class: `${clsPrefix}-progress-text__unit`\n      }, unit))) : null);\n    };\n  }\n});","map":{"version":3,"names":["h","defineComponent","NBaseIcon","SuccessIcon","ErrorIcon","WarningIcon","InfoIcon","iconMap","success","error","warning","info","name","props","clsPrefix","type","String","required","status","strokeWidth","Number","fillColor","railColor","railStyle","Object","percentage","default","offsetDegree","showIndicator","Boolean","indicatorTextColor","unit","viewBoxWidth","gapDegree","gapOffsetDegree","setup","slots","getPathStyles","percent","strokeColor","radius","beginPositionX","beginPositionY","endPositionX","endPositionY","centerX","pathString","len","Math","PI","pathStyle","stroke","strokeDasharray","strokeDashoffset","transformOrigin","undefined","transform","railPathString","railPathStyle","fillPathString","fillPathStyle","viewBoxSize","class","role","style","viewBox","d","fill","color"],"sources":["/Users/elmo/Documents/GitHub/meetings_vue3/node_modules/naive-ui/es/progress/src/Circle.js"],"sourcesContent":["import { h, defineComponent } from 'vue';\nimport { NBaseIcon } from '../../_internal';\nimport { SuccessIcon, ErrorIcon, WarningIcon, InfoIcon } from '../../_internal/icons';\nconst iconMap = {\n    success: h(SuccessIcon, null),\n    error: h(ErrorIcon, null),\n    warning: h(WarningIcon, null),\n    info: h(InfoIcon, null)\n};\nexport default defineComponent({\n    name: 'ProgressCircle',\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        status: {\n            type: String,\n            required: true\n        },\n        strokeWidth: {\n            type: Number,\n            required: true\n        },\n        fillColor: String,\n        railColor: String,\n        railStyle: [String, Object],\n        percentage: {\n            type: Number,\n            default: 0\n        },\n        offsetDegree: {\n            type: Number,\n            default: 0\n        },\n        showIndicator: {\n            type: Boolean,\n            required: true\n        },\n        indicatorTextColor: String,\n        unit: String,\n        viewBoxWidth: {\n            type: Number,\n            required: true\n        },\n        gapDegree: {\n            type: Number,\n            required: true\n        },\n        gapOffsetDegree: {\n            type: Number,\n            default: 0\n        }\n    },\n    setup(props, { slots }) {\n        function getPathStyles(percent, offsetDegree, strokeColor) {\n            const { gapDegree, viewBoxWidth, strokeWidth } = props;\n            const radius = 50;\n            const beginPositionX = 0;\n            const beginPositionY = radius;\n            const endPositionX = 0;\n            const endPositionY = 2 * radius;\n            const centerX = 50 + strokeWidth / 2;\n            const pathString = `M ${centerX},${centerX} m ${beginPositionX},${beginPositionY}\n      a ${radius},${radius} 0 1 1 ${endPositionX},${-endPositionY}\n      a ${radius},${radius} 0 1 1 ${-endPositionX},${endPositionY}`;\n            const len = Math.PI * 2 * radius;\n            const pathStyle = {\n                stroke: strokeColor,\n                strokeDasharray: `${(percent / 100) * (len - gapDegree)}px ${viewBoxWidth * 8}px`,\n                strokeDashoffset: `-${gapDegree / 2}px`,\n                transformOrigin: offsetDegree ? 'center' : undefined,\n                transform: offsetDegree ? `rotate(${offsetDegree}deg)` : undefined\n            };\n            return {\n                pathString,\n                pathStyle\n            };\n        }\n        return () => {\n            const { fillColor, railColor, strokeWidth, offsetDegree, status, percentage, showIndicator, indicatorTextColor, unit, gapOffsetDegree, clsPrefix } = props;\n            const { pathString: railPathString, pathStyle: railPathStyle } = getPathStyles(100, 0, railColor);\n            const { pathString: fillPathString, pathStyle: fillPathStyle } = getPathStyles(percentage, offsetDegree, fillColor);\n            const viewBoxSize = 100 + strokeWidth;\n            return (h(\"div\", { class: `${clsPrefix}-progress-content`, role: \"none\" },\n                h(\"div\", { class: `${clsPrefix}-progress-graph`, \"aria-hidden\": true },\n                    h(\"div\", { class: `${clsPrefix}-progress-graph-circle`, style: {\n                            transform: gapOffsetDegree\n                                ? `rotate(${gapOffsetDegree}deg)`\n                                : undefined\n                        } },\n                        h(\"svg\", { viewBox: `0 0 ${viewBoxSize} ${viewBoxSize}` },\n                            h(\"g\", null,\n                                h(\"path\", { class: `${clsPrefix}-progress-graph-circle-rail`, d: railPathString, \"stroke-width\": strokeWidth, \"stroke-linecap\": \"round\", fill: \"none\", style: railPathStyle })),\n                            h(\"g\", null,\n                                h(\"path\", { class: [\n                                        `${clsPrefix}-progress-graph-circle-fill`,\n                                        percentage === 0 &&\n                                            `${clsPrefix}-progress-graph-circle-fill--empty`\n                                    ], d: fillPathString, \"stroke-width\": strokeWidth, \"stroke-linecap\": \"round\", fill: \"none\", style: fillPathStyle }))))),\n                showIndicator ? (h(\"div\", null, slots.default ? (h(\"div\", { class: `${clsPrefix}-progress-custom-content`, role: \"none\" }, slots.default())) : status !== 'default' ? (h(\"div\", { class: `${clsPrefix}-progress-icon`, \"aria-hidden\": true },\n                    h(NBaseIcon, { clsPrefix: clsPrefix }, {\n                        default: () => iconMap[status]\n                    }))) : (h(\"div\", { class: `${clsPrefix}-progress-text`, style: {\n                        color: indicatorTextColor\n                    }, role: \"none\" },\n                    h(\"span\", { class: `${clsPrefix}-progress-text__percentage` }, percentage),\n                    h(\"span\", { class: `${clsPrefix}-progress-text__unit` }, unit))))) : null));\n        };\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}