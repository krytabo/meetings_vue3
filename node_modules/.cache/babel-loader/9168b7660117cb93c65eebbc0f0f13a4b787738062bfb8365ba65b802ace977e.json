{"ast":null,"code":"/* eslint-disable @typescript-eslint/consistent-type-assertions */\nimport { ref, computed, onBeforeUnmount } from 'vue';\nimport { isBrowser } from './utils';\nexport const defaultBreakpointOptions = {\n  // mobile\n  // 0 ~ 640 doesn't mean it should display well in all the range,\n  // but means you should treat it like a mobile phone.)\n  xs: 0,\n  s: 640,\n  m: 1024,\n  l: 1280,\n  xl: 1536,\n  '2xl': 1920 // normal desktop display\n};\n\nfunction createMediaQuery(screenWidth) {\n  return `(min-width: ${screenWidth}px)`;\n}\nconst mqlMap = {};\nfunction useBreakpoints(screens = defaultBreakpointOptions) {\n  if (!isBrowser) return computed(() => []);\n  // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n  if (typeof window.matchMedia !== 'function') return computed(() => []);\n  const breakpointStatusRef = ref({});\n  const breakpoints = Object.keys(screens);\n  const updateBreakpoints = (e, breakpointName) => {\n    if (e.matches) breakpointStatusRef.value[breakpointName] = true;else breakpointStatusRef.value[breakpointName] = false;\n  };\n  breakpoints.forEach(key => {\n    const breakpointValue = screens[key];\n    let mql;\n    let cbs;\n    if (mqlMap[breakpointValue] === undefined) {\n      mql = window.matchMedia(createMediaQuery(breakpointValue));\n      // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n      if (mql.addEventListener) {\n        mql.addEventListener('change', e => {\n          cbs.forEach(cb => {\n            cb(e, key);\n          });\n        });\n        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n      } else if (mql.addListener) {\n        mql.addListener(e => {\n          cbs.forEach(cb => {\n            cb(e, key);\n          });\n        });\n      }\n      cbs = new Set();\n      mqlMap[breakpointValue] = {\n        mql,\n        cbs\n      };\n    } else {\n      mql = mqlMap[breakpointValue].mql;\n      cbs = mqlMap[breakpointValue].cbs;\n    }\n    cbs.add(updateBreakpoints);\n    if (mql.matches) {\n      cbs.forEach(cb => {\n        cb(mql, key);\n      });\n    }\n  });\n  onBeforeUnmount(() => {\n    breakpoints.forEach(breakpoint => {\n      const {\n        cbs\n      } = mqlMap[screens[breakpoint]];\n      if (cbs.has(updateBreakpoints)) {\n        cbs.delete(updateBreakpoints);\n      }\n    });\n  });\n  return computed(() => {\n    const {\n      value\n    } = breakpointStatusRef;\n    return breakpoints.filter(key => value[key]);\n  });\n}\nexport default useBreakpoints;","map":{"version":3,"names":["ref","computed","onBeforeUnmount","isBrowser","defaultBreakpointOptions","xs","s","m","l","xl","createMediaQuery","screenWidth","mqlMap","useBreakpoints","screens","window","matchMedia","breakpointStatusRef","breakpoints","Object","keys","updateBreakpoints","e","breakpointName","matches","value","forEach","key","breakpointValue","mql","cbs","undefined","addEventListener","cb","addListener","Set","add","breakpoint","has","delete","filter"],"sources":["/Users/elmo/Documents/GitHub/meetings_vue3/node_modules/vooks/es/use-breakpoints.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/consistent-type-assertions */\nimport { ref, computed, onBeforeUnmount } from 'vue';\nimport { isBrowser } from './utils';\nexport const defaultBreakpointOptions = {\n    // mobile\n    // 0 ~ 640 doesn't mean it should display well in all the range,\n    // but means you should treat it like a mobile phone.)\n    xs: 0,\n    s: 640,\n    m: 1024,\n    l: 1280,\n    xl: 1536,\n    '2xl': 1920 // normal desktop display\n};\nfunction createMediaQuery(screenWidth) {\n    return `(min-width: ${screenWidth}px)`;\n}\nconst mqlMap = {};\nfunction useBreakpoints(screens = defaultBreakpointOptions) {\n    if (!isBrowser)\n        return computed(() => []);\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (typeof window.matchMedia !== 'function')\n        return computed(() => []);\n    const breakpointStatusRef = ref({});\n    const breakpoints = Object.keys(screens);\n    const updateBreakpoints = (e, breakpointName) => {\n        if (e.matches)\n            breakpointStatusRef.value[breakpointName] = true;\n        else\n            breakpointStatusRef.value[breakpointName] = false;\n    };\n    breakpoints.forEach((key) => {\n        const breakpointValue = screens[key];\n        let mql;\n        let cbs;\n        if (mqlMap[breakpointValue] === undefined) {\n            mql = window.matchMedia(createMediaQuery(breakpointValue));\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            if (mql.addEventListener) {\n                mql.addEventListener('change', (e) => {\n                    cbs.forEach((cb) => {\n                        cb(e, key);\n                    });\n                });\n                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            }\n            else if (mql.addListener) {\n                mql.addListener((e) => {\n                    cbs.forEach((cb) => {\n                        cb(e, key);\n                    });\n                });\n            }\n            cbs = new Set();\n            mqlMap[breakpointValue] = {\n                mql,\n                cbs\n            };\n        }\n        else {\n            mql = mqlMap[breakpointValue].mql;\n            cbs = mqlMap[breakpointValue].cbs;\n        }\n        cbs.add(updateBreakpoints);\n        if (mql.matches) {\n            cbs.forEach((cb) => {\n                cb(mql, key);\n            });\n        }\n    });\n    onBeforeUnmount(() => {\n        breakpoints.forEach((breakpoint) => {\n            const { cbs } = mqlMap[screens[breakpoint]];\n            if (cbs.has(updateBreakpoints)) {\n                cbs.delete(updateBreakpoints);\n            }\n        });\n    });\n    return computed(() => {\n        const { value } = breakpointStatusRef;\n        return breakpoints.filter((key) => value[key]);\n    });\n}\nexport default useBreakpoints;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}