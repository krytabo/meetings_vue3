{"ast":null,"code":"import { userList } from \"@/views/config/api\";\nexport default {\n  name: \"memberDialog\",\n  prop: {\n    value: {\n      type: Array,\n      default: () => []\n    },\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    isSingel: {\n      type: Boolean,\n      default: false\n    },\n    show: {\n      type: Boolean,\n      default: false\n    }\n  },\n  // emits: [\"selected-user\"],\n  /*setup(props, { emit }) {\n    // 选择用户\n    const setSelectRows = (selection) => {\n      // 单选\n      if (props.isSingel) {\n        if (selection.length > 1) {\n          const del_row = selection.shift();\n          state.table.toggleRowSelection(del_row, false); //设置这一行取消选中\n        }\n      }\n      // 多选\n      state.selectRows = selection;\n    };\n     // 打开弹框\n    const showModel = () => {\n      state.dialogFormVisible = true;\n    };\n     // 关闭弹框\n    const close = () => {\n      state.dialogFormVisible = false;\n    };\n     // 保存选择的用户\n    const save = () => {\n      emit(\"selected-user\", state.selectRows); // 派发事件，具体逻辑在父组件中实现\n      close();\n    };\n     return {\n      ...toRefs(state),\n      setSelectRows,\n      showModel,\n      close,\n      save,\n    };\n  },*/\n  data() {\n    return {\n      memberList: [],\n      search: this.value,\n      checkedDetail: [],\n      dialogVisible: this.memberDialog\n    };\n  },\n  mounted() {\n    userList().then(res => {\n      this.memberList = res.data;\n    });\n  },\n  methods: {\n    // table選擇框\n    select(rows) {\n      this.checkedDetail = rows;\n      this.$emit(\"selected-user\", rows);\n    },\n    // 確認按鈕\n    confirmButton() {\n      let val = this.checkedDetail;\n      this.search = val;\n      this.$emit(\"submitPopupData\", \"update:modelValue\", val);\n    },\n    // 取消按鈕\n    cancelButton() {\n      this.$emit(\"resetPopupData\");\n    }\n  },\n  watch: {\n    multipleTable() {\n      this.$nextTick(() => {\n        this.$refs.memberTables.clearSelection();\n        this.checkedDetail.forEach(item => {\n          this.memberList.forEach(subItem => {\n            if (item.id === subItem.id) {\n              this.$refs.memberTables.toggleRowSelection(subItem, true);\n            }\n          });\n        });\n      });\n    }\n  },\n  computed: {\n    visible: {\n      get() {\n        return this.show;\n      },\n      set(val) {\n        this.$emit(\"updateVisible\", val);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"AAkCA,SAASA,QAAO,QAAS,oBAAoB;AAE7C,eAAe;EACbC,IAAI,EAAE,cAAc;EACpBC,IAAI,EAAE;IACJC,KAAK,EAAE;MACLC,IAAI,EAAEC,KAAK;MACXC,OAAO,EAAE,MAAM;IACjB,CAAC;IACDC,OAAO,EAAE;MACPH,IAAI,EAAEI,OAAO;MACbF,OAAO,EAAE;IACX,CAAC;IACDG,QAAQ,EAAE;MACRL,IAAI,EAAEI,OAAO;MACbF,OAAO,EAAE;IACX,CAAC;IACDI,IAAI,EAAE;MACJN,IAAI,EAAEI,OAAO;MACbF,OAAO,EAAE;IACX;EACF,CAAC;EACD;EACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAsCAK,IAAI,GAAG;IACL,OAAO;MACLC,UAAU,EAAE,EAAE;MACdC,MAAM,EAAE,IAAI,CAACV,KAAK;MAClBW,aAAa,EAAE,EAAE;MACjBC,aAAa,EAAE,IAAI,CAACC;IACtB,CAAC;EACH,CAAC;EACDC,OAAO,GAAG;IACRjB,QAAQ,EAAE,CAACkB,IAAI,CAAEC,GAAG,IAAK;MACvB,IAAI,CAACP,UAAS,GAAIO,GAAG,CAACR,IAAI;IAC5B,CAAC,CAAC;EACJ,CAAC;EACDS,OAAO,EAAE;IACP;IACAC,MAAM,CAACC,IAAI,EAAE;MACX,IAAI,CAACR,aAAY,GAAIQ,IAAI;MACzB,IAAI,CAACC,KAAK,CAAC,eAAe,EAAED,IAAI,CAAC;IACnC,CAAC;IACD;IACAE,aAAa,GAAG;MACd,IAAIC,GAAE,GAAI,IAAI,CAACX,aAAa;MAC5B,IAAI,CAACD,MAAK,GAAIY,GAAG;MACjB,IAAI,CAACF,KAAK,CAAC,iBAAiB,EAAE,mBAAmB,EAAEE,GAAG,CAAC;IACzD,CAAC;IACD;IACAC,YAAY,GAAG;MACb,IAAI,CAACH,KAAK,CAAC,gBAAgB,CAAC;IAC9B;EACF,CAAC;EACDI,KAAK,EAAE;IACLC,aAAa,GAAG;MACd,IAAI,CAACC,SAAS,CAAC,MAAM;QACnB,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,cAAc,EAAE;QACxC,IAAI,CAAClB,aAAa,CAACmB,OAAO,CAAEC,IAAI,IAAK;UACnC,IAAI,CAACtB,UAAU,CAACqB,OAAO,CAAEE,OAAO,IAAK;YACnC,IAAID,IAAI,CAACE,EAAC,KAAMD,OAAO,CAACC,EAAE,EAAE;cAC1B,IAAI,CAACN,KAAK,CAACC,YAAY,CAACM,kBAAkB,CAACF,OAAO,EAAE,IAAI,CAAC;YAC3D;UACF,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF,CAAC;EACDG,QAAQ,EAAE;IACR/B,OAAO,EAAE;MACPgC,GAAG,GAAG;QACJ,OAAO,IAAI,CAAC7B,IAAI;MAClB,CAAC;MACD8B,GAAG,CAACf,GAAG,EAAE;QACP,IAAI,CAACF,KAAK,CAAC,eAAe,EAAEE,GAAG,CAAC;MAClC;IACF;EACF;AACF,CAAC","names":["userList","name","prop","value","type","Array","default","visible","Boolean","isSingel","show","data","memberList","search","checkedDetail","dialogVisible","memberDialog","mounted","then","res","methods","select","rows","$emit","confirmButton","val","cancelButton","watch","multipleTable","$nextTick","$refs","memberTables","clearSelection","forEach","item","subItem","id","toggleRowSelection","computed","get","set"],"sourceRoot":"","sources":["/Users/elmo/Documents/GitHub/meetings_vue3/src/components/memberDialog.vue"],"sourcesContent":["<template>\n  <!--<el-dialog title=\"選擇人員\" draggable>\n    <div class=\"flax space-x-4\">\n      <div class=\"\"></div>\n      <el-table :data=\"memberList\" ref=\"multipleTable\" @selection-change=\"select\">\n        <el-table-column type=\"selection\" width=\"50\"></el-table-column>\n        <el-table-column label=\"編號\" prop=\"id\"></el-table-column>\n        <el-table-column label=\"姓名\" prop=\"name\"></el-table-column>\n        <el-table-column label=\"部門\" prop=\"department\"></el-table-column>\n      </el-table>\n    </div>\n\n    &lt;!&ndash;    <el-input v-model=\"searchText\"></el-input>&ndash;&gt;\n    <el-button @click=\"confirmButton\">確定</el-button>\n  </el-dialog>-->\n\n  <el-dialog title=\"選擇人員\" draggable :show-close=\"false\" v-model=\"visible\">\n    <div class=\"flax mb-5 space-x-4\">\n      <el-table ref=\"memberTables\" :data=\"memberList\" @selection-change=\"select\">\n        <el-table-column type=\"selection\" width=\"50\"></el-table-column>\n        <el-table-column label=\"編號\" prop=\"id\"></el-table-column>\n        <el-table-column label=\"姓名\" prop=\"name\"></el-table-column>\n        <el-table-column label=\"部門\" prop=\"department\"></el-table-column>\n      </el-table>\n    </div>\n\n    <div class=\"flex w-full items-center justify-center space-x-2\">\n      <a-button status=\"primary\" @click=\"cancelButton\">取消</a-button>\n      <a-button type=\"primary\" @click=\"confirmButton\">確定</a-button>\n    </div>\n  </el-dialog>\n</template>\n\n<script>\nimport { userList } from \"@/views/config/api\";\n\nexport default {\n  name: \"memberDialog\",\n  prop: {\n    value: {\n      type: Array,\n      default: () => [],\n    },\n    visible: {\n      type: Boolean,\n      default: false,\n    },\n    isSingel: {\n      type: Boolean,\n      default: false,\n    },\n    show: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  // emits: [\"selected-user\"],\n  /*setup(props, { emit }) {\n    // 选择用户\n    const setSelectRows = (selection) => {\n      // 单选\n      if (props.isSingel) {\n        if (selection.length > 1) {\n          const del_row = selection.shift();\n          state.table.toggleRowSelection(del_row, false); //设置这一行取消选中\n        }\n      }\n      // 多选\n      state.selectRows = selection;\n    };\n\n    // 打开弹框\n    const showModel = () => {\n      state.dialogFormVisible = true;\n    };\n\n    // 关闭弹框\n    const close = () => {\n      state.dialogFormVisible = false;\n    };\n\n    // 保存选择的用户\n    const save = () => {\n      emit(\"selected-user\", state.selectRows); // 派发事件，具体逻辑在父组件中实现\n      close();\n    };\n\n    return {\n      ...toRefs(state),\n      setSelectRows,\n      showModel,\n      close,\n      save,\n    };\n  },*/\n  data() {\n    return {\n      memberList: [],\n      search: this.value,\n      checkedDetail: [],\n      dialogVisible: this.memberDialog,\n    };\n  },\n  mounted() {\n    userList().then((res) => {\n      this.memberList = res.data;\n    });\n  },\n  methods: {\n    // table選擇框\n    select(rows) {\n      this.checkedDetail = rows;\n      this.$emit(\"selected-user\", rows);\n    },\n    // 確認按鈕\n    confirmButton() {\n      let val = this.checkedDetail;\n      this.search = val;\n      this.$emit(\"submitPopupData\", \"update:modelValue\", val);\n    },\n    // 取消按鈕\n    cancelButton() {\n      this.$emit(\"resetPopupData\");\n    },\n  },\n  watch: {\n    multipleTable() {\n      this.$nextTick(() => {\n        this.$refs.memberTables.clearSelection();\n        this.checkedDetail.forEach((item) => {\n          this.memberList.forEach((subItem) => {\n            if (item.id === subItem.id) {\n              this.$refs.memberTables.toggleRowSelection(subItem, true);\n            }\n          });\n        });\n      });\n    },\n  },\n  computed: {\n    visible: {\n      get() {\n        return this.show;\n      },\n      set(val) {\n        this.$emit(\"updateVisible\", val);\n      },\n    },\n  },\n};\n</script>\n\n<style scoped></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}