{"ast":null,"code":"import { toHsvaString, toRgbaString, toHslaString, toHexaString, toHexString, toHsvString, toRgbString, toHslString } from 'seemly';\nimport { h, defineComponent } from 'vue';\nimport { NInputGroup } from '../../input';\nimport ColorInputUnit from './ColorInputUnit';\nexport default defineComponent({\n  name: 'ColorInput',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    mode: {\n      type: String,\n      required: true\n    },\n    modes: {\n      type: Array,\n      required: true\n    },\n    showAlpha: {\n      type: Boolean,\n      required: true\n    },\n    value: {\n      // for hex to get percise value\n      type: String,\n      default: null\n    },\n    valueArr: {\n      type: Array,\n      default: null\n    },\n    onUpdateValue: {\n      type: Function,\n      required: true\n    },\n    onUpdateMode: {\n      type: Function,\n      required: true\n    }\n  },\n  setup(props) {\n    return {\n      handleUnitUpdateValue(index, value) {\n        const {\n          showAlpha\n        } = props;\n        if (props.mode === 'hex') {\n          props.onUpdateValue((showAlpha ? toHexaString : toHexString)(value));\n          return;\n        }\n        let nextValueArr;\n        if (props.valueArr === null) {\n          nextValueArr = [0, 0, 0, 0];\n        } else {\n          nextValueArr = Array.from(props.valueArr);\n        }\n        switch (props.mode) {\n          case 'hsv':\n            nextValueArr[index] = value;\n            props.onUpdateValue((showAlpha ? toHsvaString : toHsvString)(nextValueArr));\n            break;\n          case 'rgb':\n            nextValueArr[index] = value;\n            props.onUpdateValue((showAlpha ? toRgbaString : toRgbString)(nextValueArr));\n            break;\n          case 'hsl':\n            nextValueArr[index] = value;\n            props.onUpdateValue((showAlpha ? toHslaString : toHslString)(nextValueArr));\n            break;\n        }\n      }\n    };\n  },\n  render() {\n    const {\n      clsPrefix,\n      modes\n    } = this;\n    return h(\"div\", {\n      class: `${clsPrefix}-color-picker-input`\n    }, h(\"div\", {\n      class: `${clsPrefix}-color-picker-input__mode`,\n      onClick: this.onUpdateMode,\n      style: {\n        cursor: modes.length === 1 ? '' : 'pointer'\n      }\n    }, this.mode.toUpperCase() + (this.showAlpha ? 'A' : '')), h(NInputGroup, null, {\n      default: () => {\n        const {\n          mode,\n          valueArr,\n          showAlpha\n        } = this;\n        if (mode === 'hex') {\n          // hex and rgba shares the same value arr\n          let hexValue = null;\n          try {\n            hexValue = valueArr === null ? null : (showAlpha ? toHexaString : toHexString)(valueArr);\n          } catch (_a) {}\n          return h(ColorInputUnit, {\n            label: 'HEX',\n            showAlpha: showAlpha,\n            value: hexValue,\n            onUpdateValue: unitValue => {\n              this.handleUnitUpdateValue(0, unitValue);\n            }\n          });\n        }\n        return (mode + (showAlpha ? 'a' : '')).split('').map((v, i) => h(ColorInputUnit, {\n          label: v.toUpperCase(),\n          value: valueArr === null ? null : valueArr[i],\n          onUpdateValue: unitValue => {\n            this.handleUnitUpdateValue(i, unitValue);\n          }\n        }));\n      }\n    }));\n  }\n});","map":{"version":3,"names":["toHsvaString","toRgbaString","toHslaString","toHexaString","toHexString","toHsvString","toRgbString","toHslString","h","defineComponent","NInputGroup","ColorInputUnit","name","props","clsPrefix","type","String","required","mode","modes","Array","showAlpha","Boolean","value","default","valueArr","onUpdateValue","Function","onUpdateMode","setup","handleUnitUpdateValue","index","nextValueArr","from","render","class","onClick","style","cursor","length","toUpperCase","hexValue","_a","label","unitValue","split","map","v","i"],"sources":["/Users/elmo/Documents/GitHub/meetings_vue3/node_modules/naive-ui/es/color-picker/src/ColorInput.js"],"sourcesContent":["import { toHsvaString, toRgbaString, toHslaString, toHexaString, toHexString, toHsvString, toRgbString, toHslString } from 'seemly';\nimport { h, defineComponent } from 'vue';\nimport { NInputGroup } from '../../input';\nimport ColorInputUnit from './ColorInputUnit';\nexport default defineComponent({\n    name: 'ColorInput',\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        mode: {\n            type: String,\n            required: true\n        },\n        modes: {\n            type: Array,\n            required: true\n        },\n        showAlpha: {\n            type: Boolean,\n            required: true\n        },\n        value: {\n            // for hex to get percise value\n            type: String,\n            default: null\n        },\n        valueArr: {\n            type: Array,\n            default: null\n        },\n        onUpdateValue: {\n            type: Function,\n            required: true\n        },\n        onUpdateMode: {\n            type: Function,\n            required: true\n        }\n    },\n    setup(props) {\n        return {\n            handleUnitUpdateValue(index, value) {\n                const { showAlpha } = props;\n                if (props.mode === 'hex') {\n                    props.onUpdateValue((showAlpha ? toHexaString : toHexString)(value));\n                    return;\n                }\n                let nextValueArr;\n                if (props.valueArr === null) {\n                    nextValueArr = [0, 0, 0, 0];\n                }\n                else {\n                    nextValueArr = Array.from(props.valueArr);\n                }\n                switch (props.mode) {\n                    case 'hsv':\n                        nextValueArr[index] = value;\n                        props.onUpdateValue((showAlpha ? toHsvaString : toHsvString)(nextValueArr));\n                        break;\n                    case 'rgb':\n                        nextValueArr[index] = value;\n                        props.onUpdateValue((showAlpha ? toRgbaString : toRgbString)(nextValueArr));\n                        break;\n                    case 'hsl':\n                        nextValueArr[index] = value;\n                        props.onUpdateValue((showAlpha ? toHslaString : toHslString)(nextValueArr));\n                        break;\n                }\n            }\n        };\n    },\n    render() {\n        const { clsPrefix, modes } = this;\n        return (h(\"div\", { class: `${clsPrefix}-color-picker-input` },\n            h(\"div\", { class: `${clsPrefix}-color-picker-input__mode`, onClick: this.onUpdateMode, style: {\n                    cursor: modes.length === 1 ? '' : 'pointer'\n                } }, this.mode.toUpperCase() + (this.showAlpha ? 'A' : '')),\n            h(NInputGroup, null, {\n                default: () => {\n                    const { mode, valueArr, showAlpha } = this;\n                    if (mode === 'hex') {\n                        // hex and rgba shares the same value arr\n                        let hexValue = null;\n                        try {\n                            hexValue =\n                                valueArr === null\n                                    ? null\n                                    : (showAlpha ? toHexaString : toHexString)(valueArr);\n                        }\n                        catch (_a) { }\n                        return (h(ColorInputUnit, { label: 'HEX', showAlpha: showAlpha, value: hexValue, onUpdateValue: (unitValue) => {\n                                this.handleUnitUpdateValue(0, unitValue);\n                            } }));\n                    }\n                    return (mode + (showAlpha ? 'a' : '')).split('').map((v, i) => (h(ColorInputUnit, { label: v.toUpperCase(), value: valueArr === null ? null : valueArr[i], onUpdateValue: (unitValue) => {\n                            this.handleUnitUpdateValue(i, unitValue);\n                        } })));\n                }\n            })));\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}