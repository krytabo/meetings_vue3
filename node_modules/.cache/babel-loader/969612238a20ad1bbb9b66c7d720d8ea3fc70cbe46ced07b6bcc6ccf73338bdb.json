{"ast":null,"code":"import { h, defineComponent, provide, computed } from 'vue';\nimport { avatarGroupInjectionKey } from '../../avatar/src/context';\nimport NAvatar from '../../avatar/src/Avatar';\nimport { useConfig, useTheme } from '../../_mixins';\nimport style from './styles/avatar-group.cssr';\nimport { useRtl } from '../../_mixins/use-rtl';\nimport { avatarGroupLight } from '../styles';\nexport const avatarGroupProps = Object.assign(Object.assign({}, useTheme.props), {\n  max: Number,\n  maxStyle: [Object, String],\n  options: {\n    type: Array,\n    default: () => []\n  },\n  vertical: Boolean,\n  size: [String, Number]\n});\nexport default defineComponent({\n  name: 'AvatarGroup',\n  props: avatarGroupProps,\n  setup(props) {\n    const {\n      mergedClsPrefixRef,\n      mergedRtlRef\n    } = useConfig(props);\n    const mergedThemeRef = useTheme('AvatarGroup', '-avatar-group', style, avatarGroupLight, props, mergedClsPrefixRef);\n    provide(avatarGroupInjectionKey, props);\n    const rtlEnabledRef = useRtl('AvatarGroup', mergedRtlRef, mergedClsPrefixRef);\n    const restOptionsRef = computed(() => {\n      const {\n        max\n      } = props;\n      if (max === undefined) return undefined;\n      const {\n        options\n      } = props;\n      if (options.length > max) return options.slice(max - 1, options.length);\n      return [];\n    });\n    const displayedOptionsRef = computed(() => {\n      const {\n        options,\n        max\n      } = props;\n      if (max === undefined) return options;\n      if (options.length > max) return options.slice(0, max - 1);\n      if (options.length === max) return options.slice(0, max);\n      return options;\n    });\n    return {\n      mergedTheme: mergedThemeRef,\n      rtlEnabled: rtlEnabledRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      restOptions: restOptionsRef,\n      displayedOptions: displayedOptionsRef,\n      cssVars: computed(() => {\n        return {\n          '--n-gap': mergedThemeRef.value.self.gap\n        };\n      })\n    };\n  },\n  render() {\n    const {\n      mergedClsPrefix,\n      displayedOptions,\n      restOptions,\n      mergedTheme,\n      $slots\n    } = this;\n    return h(\"div\", {\n      class: [`${mergedClsPrefix}-avatar-group`, this.rtlEnabled && `${mergedClsPrefix}-avatar-group--rtl`, this.vertical && `${mergedClsPrefix}-avatar-group--vertical`],\n      style: this.cssVars,\n      role: \"group\"\n    }, displayedOptions.map(option => {\n      return $slots.avatar ? $slots.avatar({\n        option\n      }) : h(NAvatar, {\n        src: option.src,\n        theme: mergedTheme.peers.Avatar,\n        themeOverrides: mergedTheme.peerOverrides.Avatar\n      });\n    }), restOptions !== undefined && restOptions.length > 0 && ($slots.rest ? $slots.rest({\n      options: restOptions,\n      rest: restOptions.length\n    }) : h(NAvatar, {\n      style: this.maxStyle,\n      theme: mergedTheme.peers.Avatar,\n      themeOverrides: mergedTheme.peerOverrides.Avatar\n    }, {\n      default: () => `+${restOptions.length}`\n    })));\n  }\n});","map":{"version":3,"names":["h","defineComponent","provide","computed","avatarGroupInjectionKey","NAvatar","useConfig","useTheme","style","useRtl","avatarGroupLight","avatarGroupProps","Object","assign","props","max","Number","maxStyle","String","options","type","Array","default","vertical","Boolean","size","name","setup","mergedClsPrefixRef","mergedRtlRef","mergedThemeRef","rtlEnabledRef","restOptionsRef","undefined","length","slice","displayedOptionsRef","mergedTheme","rtlEnabled","mergedClsPrefix","restOptions","displayedOptions","cssVars","value","self","gap","render","$slots","class","role","map","option","avatar","src","theme","peers","Avatar","themeOverrides","peerOverrides","rest"],"sources":["/Users/elmo/Documents/GitHub/meetings_vue3/node_modules/naive-ui/es/avatar-group/src/AvatarGroup.js"],"sourcesContent":["import { h, defineComponent, provide, computed } from 'vue';\nimport { avatarGroupInjectionKey } from '../../avatar/src/context';\nimport NAvatar from '../../avatar/src/Avatar';\nimport { useConfig, useTheme } from '../../_mixins';\nimport style from './styles/avatar-group.cssr';\nimport { useRtl } from '../../_mixins/use-rtl';\nimport { avatarGroupLight } from '../styles';\nexport const avatarGroupProps = Object.assign(Object.assign({}, useTheme.props), { max: Number, maxStyle: [Object, String], options: {\n        type: Array,\n        default: () => []\n    }, vertical: Boolean, size: [String, Number] });\nexport default defineComponent({\n    name: 'AvatarGroup',\n    props: avatarGroupProps,\n    setup(props) {\n        const { mergedClsPrefixRef, mergedRtlRef } = useConfig(props);\n        const mergedThemeRef = useTheme('AvatarGroup', '-avatar-group', style, avatarGroupLight, props, mergedClsPrefixRef);\n        provide(avatarGroupInjectionKey, props);\n        const rtlEnabledRef = useRtl('AvatarGroup', mergedRtlRef, mergedClsPrefixRef);\n        const restOptionsRef = computed(() => {\n            const { max } = props;\n            if (max === undefined)\n                return undefined;\n            const { options } = props;\n            if (options.length > max)\n                return options.slice(max - 1, options.length);\n            return [];\n        });\n        const displayedOptionsRef = computed(() => {\n            const { options, max } = props;\n            if (max === undefined)\n                return options;\n            if (options.length > max)\n                return options.slice(0, max - 1);\n            if (options.length === max)\n                return options.slice(0, max);\n            return options;\n        });\n        return {\n            mergedTheme: mergedThemeRef,\n            rtlEnabled: rtlEnabledRef,\n            mergedClsPrefix: mergedClsPrefixRef,\n            restOptions: restOptionsRef,\n            displayedOptions: displayedOptionsRef,\n            cssVars: computed(() => {\n                return {\n                    '--n-gap': mergedThemeRef.value.self.gap\n                };\n            })\n        };\n    },\n    render() {\n        const { mergedClsPrefix, displayedOptions, restOptions, mergedTheme, $slots } = this;\n        return (h(\"div\", { class: [\n                `${mergedClsPrefix}-avatar-group`,\n                this.rtlEnabled && `${mergedClsPrefix}-avatar-group--rtl`,\n                this.vertical && `${mergedClsPrefix}-avatar-group--vertical`\n            ], style: this.cssVars, role: \"group\" },\n            displayedOptions.map((option) => {\n                return $slots.avatar ? ($slots.avatar({ option })) : (h(NAvatar, { src: option.src, theme: mergedTheme.peers.Avatar, themeOverrides: mergedTheme.peerOverrides.Avatar }));\n            }),\n            restOptions !== undefined &&\n                restOptions.length > 0 &&\n                ($slots.rest ? ($slots.rest({ options: restOptions, rest: restOptions.length })) : (h(NAvatar, { style: this.maxStyle, theme: mergedTheme.peers.Avatar, themeOverrides: mergedTheme.peerOverrides.Avatar }, {\n                    default: () => `+${restOptions.length}`\n                })))));\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}