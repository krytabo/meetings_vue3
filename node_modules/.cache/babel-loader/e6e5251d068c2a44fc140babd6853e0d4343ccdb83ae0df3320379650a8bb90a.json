{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable @typescript-eslint/no-dynamic-delete */\nimport { Fragment, h, reactive, ref, Teleport, defineComponent, provide } from 'vue';\nimport { createId } from 'seemly';\nimport { useConfig, useTheme } from '../../_mixins';\nimport { omit, createInjectionKey } from '../../_utils';\nimport { notificationLight } from '../styles';\nimport { NotificationContainer } from './NotificationContainer';\nimport { NotificationEnvironment } from './NotificationEnvironment';\nimport { notificationProviderInjectionKey } from './context';\nimport style from './styles/index.cssr';\nexport const notificationApiInjectionKey = createInjectionKey('n-notification-api');\nexport const notificationProviderProps = Object.assign(Object.assign({}, useTheme.props), {\n  containerStyle: [String, Object],\n  to: [String, Object],\n  scrollable: {\n    type: Boolean,\n    default: true\n  },\n  max: Number,\n  placement: {\n    type: String,\n    default: 'top-right'\n  },\n  keepAliveOnHover: Boolean\n});\nexport default defineComponent({\n  name: 'NotificationProvider',\n  props: notificationProviderProps,\n  setup(props) {\n    const {\n      mergedClsPrefixRef\n    } = useConfig(props);\n    const notificationListRef = ref([]);\n    const notificationRefs = {};\n    const leavingKeySet = new Set();\n    function create(options) {\n      const key = createId();\n      const destroy = () => {\n        leavingKeySet.add(key);\n        // If you push n + 1 message when max is n, notificationRefs[key] maybe not be set\n        if (notificationRefs[key]) {\n          notificationRefs[key].hide();\n        }\n      };\n      const notificationReactive = reactive(Object.assign(Object.assign({}, options), {\n        key,\n        destroy,\n        hide: destroy,\n        deactivate: destroy\n      }));\n      const {\n        max\n      } = props;\n      if (max && notificationListRef.value.length - leavingKeySet.size >= max) {\n        let someoneMountedRemoved = false;\n        let index = 0;\n        for (const notification of notificationListRef.value) {\n          if (!leavingKeySet.has(notification.key)) {\n            if (notificationRefs[notification.key]) {\n              notification.destroy();\n              someoneMountedRemoved = true;\n            }\n            break;\n          }\n          index++;\n        }\n        if (!someoneMountedRemoved) {\n          notificationListRef.value.splice(index, 1);\n        }\n      }\n      notificationListRef.value.push(notificationReactive);\n      return notificationReactive;\n    }\n    const apis = ['info', 'success', 'warning', 'error'].map(type => {\n      return options => create(Object.assign(Object.assign({}, options), {\n        type\n      }));\n    });\n    function handleAfterLeave(key) {\n      leavingKeySet.delete(key);\n      notificationListRef.value.splice(notificationListRef.value.findIndex(notification => notification.key === key), 1);\n    }\n    const themeRef = useTheme('Notification', '-notification', style, notificationLight, props, mergedClsPrefixRef);\n    const api = {\n      create,\n      info: apis[0],\n      success: apis[1],\n      warning: apis[2],\n      error: apis[3],\n      open,\n      destroyAll\n    };\n    const wipTransitionCountRef = ref(0);\n    provide(notificationApiInjectionKey, api);\n    provide(notificationProviderInjectionKey, {\n      props,\n      mergedClsPrefixRef,\n      mergedThemeRef: themeRef,\n      wipTransitionCountRef\n    });\n    // deprecated\n    function open(options) {\n      return create(options);\n    }\n    function destroyAll() {\n      Object.values(notificationListRef.value).forEach(notification => {\n        notification.hide();\n      });\n    }\n    return Object.assign({\n      mergedClsPrefix: mergedClsPrefixRef,\n      notificationList: notificationListRef,\n      notificationRefs,\n      handleAfterLeave\n    }, api);\n  },\n  render() {\n    var _a, _b, _c;\n    const {\n      placement\n    } = this;\n    return h(Fragment, null, (_b = (_a = this.$slots).default) === null || _b === void 0 ? void 0 : _b.call(_a), this.notificationList.length ? h(Teleport, {\n      to: (_c = this.to) !== null && _c !== void 0 ? _c : 'body'\n    }, h(NotificationContainer, {\n      style: this.containerStyle,\n      scrollable: this.scrollable && placement !== 'top' && placement !== 'bottom',\n      placement: placement\n    }, {\n      default: () => {\n        return this.notificationList.map(notification => {\n          return h(NotificationEnvironment, Object.assign({\n            ref: inst => {\n              const refKey = notification.key;\n              if (inst === null) {\n                delete this.notificationRefs[refKey];\n              } else this.notificationRefs[refKey] = inst;\n            }\n          }, omit(notification, ['destroy', 'hide', 'deactivate']), {\n            internalKey: notification.key,\n            onInternalAfterLeave: this.handleAfterLeave,\n            keepAliveOnHover: notification.keepAliveOnHover === undefined ? this.keepAliveOnHover : notification.keepAliveOnHover\n          }));\n        });\n      }\n    })) : null);\n  }\n});","map":{"version":3,"names":["Fragment","h","reactive","ref","Teleport","defineComponent","provide","createId","useConfig","useTheme","omit","createInjectionKey","notificationLight","NotificationContainer","NotificationEnvironment","notificationProviderInjectionKey","style","notificationApiInjectionKey","notificationProviderProps","Object","assign","props","containerStyle","String","to","scrollable","type","Boolean","default","max","Number","placement","keepAliveOnHover","name","setup","mergedClsPrefixRef","notificationListRef","notificationRefs","leavingKeySet","Set","create","options","key","destroy","add","hide","notificationReactive","deactivate","value","length","size","someoneMountedRemoved","index","notification","has","splice","push","apis","map","handleAfterLeave","delete","findIndex","themeRef","api","info","success","warning","error","open","destroyAll","wipTransitionCountRef","mergedThemeRef","values","forEach","mergedClsPrefix","notificationList","render","_a","_b","_c","$slots","call","inst","refKey","internalKey","onInternalAfterLeave","undefined"],"sources":["/Users/krystal/Documents/GitHub/meetings_vue3/node_modules/naive-ui/es/notification/src/NotificationProvider.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-dynamic-delete */\nimport { Fragment, h, reactive, ref, Teleport, defineComponent, provide } from 'vue';\nimport { createId } from 'seemly';\nimport { useConfig, useTheme } from '../../_mixins';\nimport { omit, createInjectionKey } from '../../_utils';\nimport { notificationLight } from '../styles';\nimport { NotificationContainer } from './NotificationContainer';\nimport { NotificationEnvironment } from './NotificationEnvironment';\nimport { notificationProviderInjectionKey } from './context';\nimport style from './styles/index.cssr';\nexport const notificationApiInjectionKey = createInjectionKey('n-notification-api');\nexport const notificationProviderProps = Object.assign(Object.assign({}, useTheme.props), { containerStyle: [String, Object], to: [String, Object], scrollable: {\n        type: Boolean,\n        default: true\n    }, max: Number, placement: {\n        type: String,\n        default: 'top-right'\n    }, keepAliveOnHover: Boolean });\nexport default defineComponent({\n    name: 'NotificationProvider',\n    props: notificationProviderProps,\n    setup(props) {\n        const { mergedClsPrefixRef } = useConfig(props);\n        const notificationListRef = ref([]);\n        const notificationRefs = {};\n        const leavingKeySet = new Set();\n        function create(options) {\n            const key = createId();\n            const destroy = () => {\n                leavingKeySet.add(key);\n                // If you push n + 1 message when max is n, notificationRefs[key] maybe not be set\n                if (notificationRefs[key]) {\n                    notificationRefs[key].hide();\n                }\n            };\n            const notificationReactive = reactive(Object.assign(Object.assign({}, options), { key,\n                destroy, hide: destroy, deactivate: destroy }));\n            const { max } = props;\n            if (max && notificationListRef.value.length - leavingKeySet.size >= max) {\n                let someoneMountedRemoved = false;\n                let index = 0;\n                for (const notification of notificationListRef.value) {\n                    if (!leavingKeySet.has(notification.key)) {\n                        if (notificationRefs[notification.key]) {\n                            notification.destroy();\n                            someoneMountedRemoved = true;\n                        }\n                        break;\n                    }\n                    index++;\n                }\n                if (!someoneMountedRemoved) {\n                    notificationListRef.value.splice(index, 1);\n                }\n            }\n            notificationListRef.value.push(notificationReactive);\n            return notificationReactive;\n        }\n        const apis = ['info', 'success', 'warning', 'error'].map((type) => {\n            return (options) => create(Object.assign(Object.assign({}, options), { type }));\n        });\n        function handleAfterLeave(key) {\n            leavingKeySet.delete(key);\n            notificationListRef.value.splice(notificationListRef.value.findIndex((notification) => notification.key === key), 1);\n        }\n        const themeRef = useTheme('Notification', '-notification', style, notificationLight, props, mergedClsPrefixRef);\n        const api = {\n            create,\n            info: apis[0],\n            success: apis[1],\n            warning: apis[2],\n            error: apis[3],\n            open,\n            destroyAll\n        };\n        const wipTransitionCountRef = ref(0);\n        provide(notificationApiInjectionKey, api);\n        provide(notificationProviderInjectionKey, {\n            props,\n            mergedClsPrefixRef,\n            mergedThemeRef: themeRef,\n            wipTransitionCountRef\n        });\n        // deprecated\n        function open(options) {\n            return create(options);\n        }\n        function destroyAll() {\n            Object.values(notificationListRef.value).forEach((notification) => {\n                notification.hide();\n            });\n        }\n        return Object.assign({\n            mergedClsPrefix: mergedClsPrefixRef,\n            notificationList: notificationListRef,\n            notificationRefs,\n            handleAfterLeave\n        }, api);\n    },\n    render() {\n        var _a, _b, _c;\n        const { placement } = this;\n        return (h(Fragment, null, (_b = (_a = this.$slots).default) === null || _b === void 0 ? void 0 :\n            _b.call(_a),\n            this.notificationList.length ? (h(Teleport, { to: (_c = this.to) !== null && _c !== void 0 ? _c : 'body' },\n                h(NotificationContainer, { style: this.containerStyle, scrollable: this.scrollable && placement !== 'top' && placement !== 'bottom', placement: placement }, {\n                    default: () => {\n                        return this.notificationList.map((notification) => {\n                            return (h(NotificationEnvironment, Object.assign({ ref: ((inst) => {\n                                    const refKey = notification.key;\n                                    if (inst === null) {\n                                        delete this.notificationRefs[refKey];\n                                    }\n                                    else\n                                        this.notificationRefs[refKey] = inst;\n                                }) }, omit(notification, [\n                                'destroy',\n                                'hide',\n                                'deactivate'\n                            ]), { internalKey: notification.key, onInternalAfterLeave: this.handleAfterLeave, keepAliveOnHover: notification.keepAliveOnHover === undefined\n                                    ? this.keepAliveOnHover\n                                    : notification.keepAliveOnHover })));\n                        });\n                    }\n                }))) : null));\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}