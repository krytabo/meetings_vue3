{"ast":null,"code":"import { defineComponent, inject, h, computed } from 'vue';\nimport { resolveSlotWithProps } from '../../_utils';\nimport { inputInjectionKey } from './interface';\nimport { len } from './utils';\nexport default defineComponent({\n  name: 'InputWordCount',\n  setup(_, {\n    slots\n  }) {\n    const {\n      mergedValueRef,\n      maxlengthRef,\n      mergedClsPrefixRef\n    } =\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    inject(inputInjectionKey);\n    const wordCountRef = computed(() => {\n      const {\n        value: mergedValue\n      } = mergedValueRef;\n      if (mergedValue === null || Array.isArray(mergedValue)) return 0;\n      return len(mergedValue);\n    });\n    return () => {\n      const {\n        value: maxlength\n      } = maxlengthRef;\n      const {\n        value: mergedValue\n      } = mergedValueRef;\n      return h(\"span\", {\n        class: `${mergedClsPrefixRef.value}-input-word-count`\n      }, resolveSlotWithProps(slots.default, {\n        value: mergedValue === null || Array.isArray(mergedValue) ? '' : mergedValue\n      }, () => [maxlength === undefined ? wordCountRef.value : `${wordCountRef.value} / ${maxlength}`]));\n    };\n  }\n});","map":{"version":3,"names":["defineComponent","inject","h","computed","resolveSlotWithProps","inputInjectionKey","len","name","setup","_","slots","mergedValueRef","maxlengthRef","mergedClsPrefixRef","wordCountRef","value","mergedValue","Array","isArray","maxlength","class","default","undefined"],"sources":["/Users/elmo/GitHub/meetings_vue3/node_modules/naive-ui/es/input/src/WordCount.js"],"sourcesContent":["import { defineComponent, inject, h, computed } from 'vue';\nimport { resolveSlotWithProps } from '../../_utils';\nimport { inputInjectionKey } from './interface';\nimport { len } from './utils';\nexport default defineComponent({\n    name: 'InputWordCount',\n    setup(_, { slots }) {\n        const { mergedValueRef, maxlengthRef, mergedClsPrefixRef } = \n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        inject(inputInjectionKey);\n        const wordCountRef = computed(() => {\n            const { value: mergedValue } = mergedValueRef;\n            if (mergedValue === null || Array.isArray(mergedValue))\n                return 0;\n            return len(mergedValue);\n        });\n        return () => {\n            const { value: maxlength } = maxlengthRef;\n            const { value: mergedValue } = mergedValueRef;\n            return (h(\"span\", { class: `${mergedClsPrefixRef.value}-input-word-count` }, resolveSlotWithProps(slots.default, {\n                value: mergedValue === null || Array.isArray(mergedValue)\n                    ? ''\n                    : mergedValue\n            }, () => [\n                maxlength === undefined\n                    ? wordCountRef.value\n                    : `${wordCountRef.value} / ${maxlength}`\n            ])));\n        };\n    }\n});\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,MAAM,EAAEC,CAAC,EAAEC,QAAQ,QAAQ,KAAK;AAC1D,SAASC,oBAAoB,QAAQ,cAAc;AACnD,SAASC,iBAAiB,QAAQ,aAAa;AAC/C,SAASC,GAAG,QAAQ,SAAS;AAC7B,eAAeN,eAAe,CAAC;EAC3BO,IAAI,EAAE,gBAAgB;EACtBC,KAAK,CAACC,CAAC,EAAE;IAAEC;EAAM,CAAC,EAAE;IAChB,MAAM;MAAEC,cAAc;MAAEC,YAAY;MAAEC;IAAmB,CAAC;IAC1D;IACAZ,MAAM,CAACI,iBAAiB,CAAC;IACzB,MAAMS,YAAY,GAAGX,QAAQ,CAAC,MAAM;MAChC,MAAM;QAAEY,KAAK,EAAEC;MAAY,CAAC,GAAGL,cAAc;MAC7C,IAAIK,WAAW,KAAK,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACF,WAAW,CAAC,EAClD,OAAO,CAAC;MACZ,OAAOV,GAAG,CAACU,WAAW,CAAC;IAC3B,CAAC,CAAC;IACF,OAAO,MAAM;MACT,MAAM;QAAED,KAAK,EAAEI;MAAU,CAAC,GAAGP,YAAY;MACzC,MAAM;QAAEG,KAAK,EAAEC;MAAY,CAAC,GAAGL,cAAc;MAC7C,OAAQT,CAAC,CAAC,MAAM,EAAE;QAAEkB,KAAK,EAAG,GAAEP,kBAAkB,CAACE,KAAM;MAAmB,CAAC,EAAEX,oBAAoB,CAACM,KAAK,CAACW,OAAO,EAAE;QAC7GN,KAAK,EAAEC,WAAW,KAAK,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACF,WAAW,CAAC,GACnD,EAAE,GACFA;MACV,CAAC,EAAE,MAAM,CACLG,SAAS,KAAKG,SAAS,GACjBR,YAAY,CAACC,KAAK,GACjB,GAAED,YAAY,CAACC,KAAM,MAAKI,SAAU,EAAC,CAC/C,CAAC,CAAC;IACP,CAAC;EACL;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}