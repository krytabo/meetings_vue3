{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { computed, defineComponent, h, nextTick, onBeforeUnmount, onMounted, provide, ref, toRef, watch } from 'vue';\nimport { throttle } from 'lodash-es';\nimport { unwrapElement } from 'seemly';\nimport { onFontsReady } from 'vooks';\nimport { NScrollbar } from '../../_internal';\nimport { keysOf } from '../../_utils';\nimport { anchorInjectionKey } from './Link';\nimport { getOffset } from './utils';\nexport const baseAnchorProps = {\n  type: {\n    type: String,\n    default: 'rail'\n  },\n  showRail: {\n    type: Boolean,\n    default: true\n  },\n  showBackground: {\n    type: Boolean,\n    default: true\n  },\n  bound: {\n    type: Number,\n    default: 12\n  },\n  internalScrollable: Boolean,\n  ignoreGap: Boolean,\n  offsetTarget: [String, Object, Function]\n};\nexport const baseAnchorPropKeys = keysOf(baseAnchorProps);\nexport default defineComponent({\n  name: 'BaseAnchor',\n  props: Object.assign(Object.assign({}, baseAnchorProps), {\n    mergedClsPrefix: {\n      type: String,\n      required: true\n    }\n  }),\n  setup(props) {\n    const collectedLinkHrefs = [];\n    const titleEls = [];\n    const activeHrefRef = ref(null);\n    const slotRef = ref(null);\n    const barRef = ref(null);\n    const selfRef = ref(null);\n    const isBlockTypeRef = computed(() => {\n      return props.type === 'block';\n    });\n    const mergedShowRailRef = computed(() => {\n      return !isBlockTypeRef.value && props.showRail;\n    });\n    function disableTransitionOneTick() {\n      const {\n        value: barEl\n      } = barRef;\n      const {\n        value: slotEl\n      } = slotRef;\n      if (barEl) {\n        barEl.style.transition = 'none';\n      }\n      if (slotEl) {\n        slotEl.style.transition = 'none';\n      }\n      if (titleEls) {\n        titleEls.forEach(titleEl => {\n          titleEl.style.transition = 'none';\n        });\n      }\n      void nextTick(() => {\n        const {\n          value: nextBarEl\n        } = barRef;\n        const {\n          value: nextSlotEl\n        } = slotRef;\n        if (nextBarEl) {\n          void nextBarEl.offsetWidth;\n          nextBarEl.style.transition = '';\n        }\n        if (nextSlotEl) {\n          void nextSlotEl.offsetWidth;\n          nextSlotEl.style.transition = '';\n        }\n        if (titleEls) {\n          titleEls.forEach(titleEl => {\n            void titleEl.offsetWidth;\n            titleEl.style.transition = '';\n          });\n        }\n      });\n    }\n    function updateBarPosition(linkTitleEl, transition = true) {\n      const {\n        value: barEl\n      } = barRef;\n      const {\n        value: slotEl\n      } = slotRef;\n      const {\n        value: selfEl\n      } = selfRef;\n      if (!selfEl || !barEl) return;\n      if (!transition) {\n        barEl.style.transition = 'none';\n        if (slotEl) slotEl.style.transition = 'none';\n      }\n      const {\n        offsetHeight,\n        offsetWidth\n      } = linkTitleEl;\n      const {\n        top: linkTitleClientTop,\n        left: linkTitleClientLeft\n      } = linkTitleEl.getBoundingClientRect();\n      const {\n        top: anchorClientTop,\n        left: anchorClientLeft\n      } = selfEl.getBoundingClientRect();\n      const offsetTop = linkTitleClientTop - anchorClientTop;\n      const offsetLeft = linkTitleClientLeft - anchorClientLeft;\n      barEl.style.top = `${offsetTop}px`;\n      barEl.style.height = `${offsetHeight}px`;\n      if (slotEl) {\n        slotEl.style.top = `${offsetTop}px`;\n        slotEl.style.height = `${offsetHeight}px`;\n        slotEl.style.maxWidth = `${offsetWidth + offsetLeft}px`;\n      }\n      void barEl.offsetHeight;\n      if (slotEl) void slotEl.offsetHeight;\n      if (!transition) {\n        barEl.style.transition = '';\n        if (slotEl) slotEl.style.transition = '';\n      }\n    }\n    function setActiveHref(href, transition = true) {\n      const idMatchResult = /^#([^#]+)$/.exec(href);\n      if (!idMatchResult) return;\n      const linkEl = document.getElementById(idMatchResult[1]);\n      if (!linkEl) return;\n      activeHrefRef.value = href;\n      linkEl.scrollIntoView();\n      if (!transition) {\n        disableTransitionOneTick();\n      }\n      handleScroll();\n    }\n    const handleScroll = throttle(() => _handleScroll(true), 128);\n    function _handleScroll(transition = true) {\n      var _a;\n      const links = [];\n      const offsetTarget = unwrapElement((_a = props.offsetTarget) !== null && _a !== void 0 ? _a : document);\n      collectedLinkHrefs.forEach(href => {\n        const idMatchResult = /#([^#]+)$/.exec(href);\n        if (!idMatchResult) return;\n        const linkEl = document.getElementById(idMatchResult[1]);\n        if (linkEl && offsetTarget) {\n          const {\n            top,\n            height\n          } = getOffset(linkEl, offsetTarget);\n          links.push({\n            top,\n            height,\n            href\n          });\n        }\n      });\n      links.sort((a, b) => {\n        // ascend top\n        if (a.top > b.top) {\n          return 1;\n          // descend height\n        } else if (a.top === b.top && a.height < b.height) {\n          return -1;\n        }\n        return -1;\n      });\n      const currentActiveHref = activeHrefRef.value;\n      const {\n        bound,\n        ignoreGap\n      } = props;\n      const activeLink = links.reduce((prevLink, link) => {\n        if (link.top + link.height < 0) {\n          if (ignoreGap) {\n            return link;\n          } else {\n            return prevLink;\n          }\n        }\n        if (link.top <= bound) {\n          if (prevLink === null) {\n            return link;\n          } else if (link.top === prevLink.top) {\n            if (link.href === currentActiveHref) {\n              return link;\n            } else return prevLink;\n          } else if (link.top > prevLink.top) {\n            return link;\n          } else {\n            return prevLink;\n          }\n        }\n        return prevLink;\n      }, null);\n      if (!transition) disableTransitionOneTick();\n      if (activeLink) {\n        activeHrefRef.value = activeLink.href;\n      } else {\n        activeHrefRef.value = null;\n      }\n    }\n    provide(anchorInjectionKey, {\n      activeHref: activeHrefRef,\n      mergedClsPrefix: toRef(props, 'mergedClsPrefix'),\n      updateBarPosition,\n      setActiveHref,\n      collectedLinkHrefs,\n      titleEls\n    });\n    onMounted(() => {\n      document.addEventListener('scroll', handleScroll, true);\n      setActiveHref(window.location.hash);\n      _handleScroll(false);\n    });\n    onFontsReady(() => {\n      setActiveHref(window.location.hash);\n      _handleScroll(false);\n    });\n    onBeforeUnmount(() => {\n      document.removeEventListener('scroll', handleScroll, true);\n    });\n    watch(activeHrefRef, value => {\n      if (value === null) {\n        const {\n          value: slotEl\n        } = slotRef;\n        if (slotEl && !isBlockTypeRef.value) {\n          slotEl.style.maxWidth = '0';\n        }\n      }\n    });\n    return {\n      selfRef,\n      barRef,\n      slotRef,\n      setActiveHref,\n      activeHref: activeHrefRef,\n      isBlockType: isBlockTypeRef,\n      mergedShowRail: mergedShowRailRef\n    };\n  },\n  render() {\n    var _a;\n    const {\n      mergedClsPrefix,\n      mergedShowRail,\n      isBlockType,\n      $slots\n    } = this;\n    const Anchor = h(\"div\", {\n      class: [`${mergedClsPrefix}-anchor`, isBlockType && `${mergedClsPrefix}-anchor--block`, mergedShowRail && `${mergedClsPrefix}-anchor--show-rail`],\n      ref: \"selfRef\"\n    }, mergedShowRail && this.showBackground ? h(\"div\", {\n      ref: \"slotRef\",\n      class: `${mergedClsPrefix}-anchor-link-background`\n    }) : null, mergedShowRail ? h(\"div\", {\n      class: `${mergedClsPrefix}-anchor-rail`\n    }, h(\"div\", {\n      ref: \"barRef\",\n      class: [`${mergedClsPrefix}-anchor-rail__bar`, this.activeHref !== null && `${mergedClsPrefix}-anchor-rail__bar--active`]\n    })) : null, (_a = $slots.default) === null || _a === void 0 ? void 0 : _a.call($slots));\n    return this.internalScrollable ? h(NScrollbar, null, {\n      default: () => Anchor\n    }) : Anchor;\n  }\n});","map":{"version":3,"names":["computed","defineComponent","h","nextTick","onBeforeUnmount","onMounted","provide","ref","toRef","watch","throttle","unwrapElement","onFontsReady","NScrollbar","keysOf","anchorInjectionKey","getOffset","baseAnchorProps","type","String","default","showRail","Boolean","showBackground","bound","Number","internalScrollable","ignoreGap","offsetTarget","Object","Function","baseAnchorPropKeys","name","props","assign","mergedClsPrefix","required","setup","collectedLinkHrefs","titleEls","activeHrefRef","slotRef","barRef","selfRef","isBlockTypeRef","mergedShowRailRef","value","disableTransitionOneTick","barEl","slotEl","style","transition","forEach","titleEl","nextBarEl","nextSlotEl","offsetWidth","updateBarPosition","linkTitleEl","selfEl","offsetHeight","top","linkTitleClientTop","left","linkTitleClientLeft","getBoundingClientRect","anchorClientTop","anchorClientLeft","offsetTop","offsetLeft","height","maxWidth","setActiveHref","href","idMatchResult","exec","linkEl","document","getElementById","scrollIntoView","handleScroll","_handleScroll","_a","links","push","sort","a","b","currentActiveHref","activeLink","reduce","prevLink","link","activeHref","addEventListener","window","location","hash","removeEventListener","isBlockType","mergedShowRail","render","$slots","Anchor","class","call"],"sources":["/Users/krystal/Documents/GitHub/meetings_vue3/node_modules/naive-ui/es/anchor/src/BaseAnchor.js"],"sourcesContent":["import { computed, defineComponent, h, nextTick, onBeforeUnmount, onMounted, provide, ref, toRef, watch } from 'vue';\nimport { throttle } from 'lodash-es';\nimport { unwrapElement } from 'seemly';\nimport { onFontsReady } from 'vooks';\nimport { NScrollbar } from '../../_internal';\nimport { keysOf } from '../../_utils';\nimport { anchorInjectionKey } from './Link';\nimport { getOffset } from './utils';\nexport const baseAnchorProps = {\n    type: {\n        type: String,\n        default: 'rail'\n    },\n    showRail: {\n        type: Boolean,\n        default: true\n    },\n    showBackground: {\n        type: Boolean,\n        default: true\n    },\n    bound: {\n        type: Number,\n        default: 12\n    },\n    internalScrollable: Boolean,\n    ignoreGap: Boolean,\n    offsetTarget: [String, Object, Function]\n};\nexport const baseAnchorPropKeys = keysOf(baseAnchorProps);\nexport default defineComponent({\n    name: 'BaseAnchor',\n    props: Object.assign(Object.assign({}, baseAnchorProps), { mergedClsPrefix: {\n            type: String,\n            required: true\n        } }),\n    setup(props) {\n        const collectedLinkHrefs = [];\n        const titleEls = [];\n        const activeHrefRef = ref(null);\n        const slotRef = ref(null);\n        const barRef = ref(null);\n        const selfRef = ref(null);\n        const isBlockTypeRef = computed(() => {\n            return props.type === 'block';\n        });\n        const mergedShowRailRef = computed(() => {\n            return !isBlockTypeRef.value && props.showRail;\n        });\n        function disableTransitionOneTick() {\n            const { value: barEl } = barRef;\n            const { value: slotEl } = slotRef;\n            if (barEl) {\n                barEl.style.transition = 'none';\n            }\n            if (slotEl) {\n                slotEl.style.transition = 'none';\n            }\n            if (titleEls) {\n                titleEls.forEach((titleEl) => {\n                    titleEl.style.transition = 'none';\n                });\n            }\n            void nextTick(() => {\n                const { value: nextBarEl } = barRef;\n                const { value: nextSlotEl } = slotRef;\n                if (nextBarEl) {\n                    void nextBarEl.offsetWidth;\n                    nextBarEl.style.transition = '';\n                }\n                if (nextSlotEl) {\n                    void nextSlotEl.offsetWidth;\n                    nextSlotEl.style.transition = '';\n                }\n                if (titleEls) {\n                    titleEls.forEach((titleEl) => {\n                        void titleEl.offsetWidth;\n                        titleEl.style.transition = '';\n                    });\n                }\n            });\n        }\n        function updateBarPosition(linkTitleEl, transition = true) {\n            const { value: barEl } = barRef;\n            const { value: slotEl } = slotRef;\n            const { value: selfEl } = selfRef;\n            if (!selfEl || !barEl)\n                return;\n            if (!transition) {\n                barEl.style.transition = 'none';\n                if (slotEl)\n                    slotEl.style.transition = 'none';\n            }\n            const { offsetHeight, offsetWidth } = linkTitleEl;\n            const { top: linkTitleClientTop, left: linkTitleClientLeft } = linkTitleEl.getBoundingClientRect();\n            const { top: anchorClientTop, left: anchorClientLeft } = selfEl.getBoundingClientRect();\n            const offsetTop = linkTitleClientTop - anchorClientTop;\n            const offsetLeft = linkTitleClientLeft - anchorClientLeft;\n            barEl.style.top = `${offsetTop}px`;\n            barEl.style.height = `${offsetHeight}px`;\n            if (slotEl) {\n                slotEl.style.top = `${offsetTop}px`;\n                slotEl.style.height = `${offsetHeight}px`;\n                slotEl.style.maxWidth = `${offsetWidth + offsetLeft}px`;\n            }\n            void barEl.offsetHeight;\n            if (slotEl)\n                void slotEl.offsetHeight;\n            if (!transition) {\n                barEl.style.transition = '';\n                if (slotEl)\n                    slotEl.style.transition = '';\n            }\n        }\n        function setActiveHref(href, transition = true) {\n            const idMatchResult = /^#([^#]+)$/.exec(href);\n            if (!idMatchResult)\n                return;\n            const linkEl = document.getElementById(idMatchResult[1]);\n            if (!linkEl)\n                return;\n            activeHrefRef.value = href;\n            linkEl.scrollIntoView();\n            if (!transition) {\n                disableTransitionOneTick();\n            }\n            handleScroll();\n        }\n        const handleScroll = throttle(() => _handleScroll(true), 128);\n        function _handleScroll(transition = true) {\n            var _a;\n            const links = [];\n            const offsetTarget = unwrapElement((_a = props.offsetTarget) !== null && _a !== void 0 ? _a : document);\n            collectedLinkHrefs.forEach((href) => {\n                const idMatchResult = /#([^#]+)$/.exec(href);\n                if (!idMatchResult)\n                    return;\n                const linkEl = document.getElementById(idMatchResult[1]);\n                if (linkEl && offsetTarget) {\n                    const { top, height } = getOffset(linkEl, offsetTarget);\n                    links.push({\n                        top,\n                        height,\n                        href\n                    });\n                }\n            });\n            links.sort((a, b) => {\n                // ascend top\n                if (a.top > b.top) {\n                    return 1;\n                    // descend height\n                }\n                else if (a.top === b.top && a.height < b.height) {\n                    return -1;\n                }\n                return -1;\n            });\n            const currentActiveHref = activeHrefRef.value;\n            const { bound, ignoreGap } = props;\n            const activeLink = links.reduce((prevLink, link) => {\n                if (link.top + link.height < 0) {\n                    if (ignoreGap) {\n                        return link;\n                    }\n                    else {\n                        return prevLink;\n                    }\n                }\n                if (link.top <= bound) {\n                    if (prevLink === null) {\n                        return link;\n                    }\n                    else if (link.top === prevLink.top) {\n                        if (link.href === currentActiveHref) {\n                            return link;\n                        }\n                        else\n                            return prevLink;\n                    }\n                    else if (link.top > prevLink.top) {\n                        return link;\n                    }\n                    else {\n                        return prevLink;\n                    }\n                }\n                return prevLink;\n            }, null);\n            if (!transition)\n                disableTransitionOneTick();\n            if (activeLink) {\n                activeHrefRef.value = activeLink.href;\n            }\n            else {\n                activeHrefRef.value = null;\n            }\n        }\n        provide(anchorInjectionKey, {\n            activeHref: activeHrefRef,\n            mergedClsPrefix: toRef(props, 'mergedClsPrefix'),\n            updateBarPosition,\n            setActiveHref,\n            collectedLinkHrefs,\n            titleEls\n        });\n        onMounted(() => {\n            document.addEventListener('scroll', handleScroll, true);\n            setActiveHref(window.location.hash);\n            _handleScroll(false);\n        });\n        onFontsReady(() => {\n            setActiveHref(window.location.hash);\n            _handleScroll(false);\n        });\n        onBeforeUnmount(() => {\n            document.removeEventListener('scroll', handleScroll, true);\n        });\n        watch(activeHrefRef, (value) => {\n            if (value === null) {\n                const { value: slotEl } = slotRef;\n                if (slotEl && !isBlockTypeRef.value) {\n                    slotEl.style.maxWidth = '0';\n                }\n            }\n        });\n        return {\n            selfRef,\n            barRef,\n            slotRef,\n            setActiveHref,\n            activeHref: activeHrefRef,\n            isBlockType: isBlockTypeRef,\n            mergedShowRail: mergedShowRailRef\n        };\n    },\n    render() {\n        var _a;\n        const { mergedClsPrefix, mergedShowRail, isBlockType, $slots } = this;\n        const Anchor = (h(\"div\", { class: [\n                `${mergedClsPrefix}-anchor`,\n                isBlockType && `${mergedClsPrefix}-anchor--block`,\n                mergedShowRail && `${mergedClsPrefix}-anchor--show-rail`\n            ], ref: \"selfRef\" },\n            mergedShowRail && this.showBackground ? (h(\"div\", { ref: \"slotRef\", class: `${mergedClsPrefix}-anchor-link-background` })) : null,\n            mergedShowRail ? (h(\"div\", { class: `${mergedClsPrefix}-anchor-rail` },\n                h(\"div\", { ref: \"barRef\", class: [\n                        `${mergedClsPrefix}-anchor-rail__bar`,\n                        this.activeHref !== null &&\n                            `${mergedClsPrefix}-anchor-rail__bar--active`\n                    ] }))) : null, (_a = $slots.default) === null || _a === void 0 ? void 0 :\n            _a.call($slots)));\n        return this.internalScrollable ? (h(NScrollbar, null, {\n            default: () => Anchor\n        })) : (Anchor);\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}