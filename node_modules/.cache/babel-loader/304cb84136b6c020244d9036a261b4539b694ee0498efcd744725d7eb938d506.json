{"ast":null,"code":"export function depx(value) {\n  if (typeof value === 'string') {\n    if (value.endsWith('px')) {\n      return Number(value.slice(0, value.length - 2));\n    }\n    return Number(value);\n  }\n  return value;\n}\nfunction pxfy(value) {\n  if (value === undefined || value === null) return undefined;\n  if (typeof value === 'number') return `${value}px`;\n  if (value.endsWith('px')) return value;\n  return `${value}px`;\n}\nexport { pxfy };\nfunction getMargin(value, position) {\n  const parts = value.trim().split(/\\s+/g);\n  const margin = {\n    top: parts[0]\n  };\n  switch (parts.length) {\n    case 1:\n      margin.right = parts[0];\n      margin.bottom = parts[0];\n      margin.left = parts[0];\n      break;\n    case 2:\n      margin.right = parts[1];\n      margin.left = parts[1];\n      margin.bottom = parts[0];\n      break;\n    case 3:\n      margin.right = parts[1];\n      margin.bottom = parts[2];\n      margin.left = parts[1];\n      break;\n    case 4:\n      margin.right = parts[1];\n      margin.bottom = parts[2];\n      margin.left = parts[3];\n      break;\n    default:\n      throw new Error('[seemly/getMargin]:' + value + ' is not a valid value.');\n  }\n  if (position === undefined) return margin;\n  return margin[position];\n}\nfunction getGap(value, orient) {\n  const [rowGap, colGap] = value.split(' ');\n  if (!orient) return {\n    row: rowGap,\n    col: colGap || rowGap\n  };\n  return orient === 'row' ? rowGap : colGap;\n}\nexport { getMargin, getMargin as getPadding, getGap };\nexport { parseResponsiveProp, parseResponsivePropValue } from './responsive';","map":{"version":3,"names":["depx","value","endsWith","Number","slice","length","pxfy","undefined","getMargin","position","parts","trim","split","margin","top","right","bottom","left","Error","getGap","orient","rowGap","colGap","row","col","getPadding","parseResponsiveProp","parseResponsivePropValue"],"sources":["/Users/elmo/GitHub/meetings_vue3/node_modules/seemly/es/css/index.js"],"sourcesContent":["export function depx(value) {\n    if (typeof value === 'string') {\n        if (value.endsWith('px')) {\n            return Number(value.slice(0, value.length - 2));\n        }\n        return Number(value);\n    }\n    return value;\n}\nfunction pxfy(value) {\n    if (value === undefined || value === null)\n        return undefined;\n    if (typeof value === 'number')\n        return `${value}px`;\n    if (value.endsWith('px'))\n        return value;\n    return `${value}px`;\n}\nexport { pxfy };\nfunction getMargin(value, position) {\n    const parts = value.trim().split(/\\s+/g);\n    const margin = {\n        top: parts[0]\n    };\n    switch (parts.length) {\n        case 1:\n            margin.right = parts[0];\n            margin.bottom = parts[0];\n            margin.left = parts[0];\n            break;\n        case 2:\n            margin.right = parts[1];\n            margin.left = parts[1];\n            margin.bottom = parts[0];\n            break;\n        case 3:\n            margin.right = parts[1];\n            margin.bottom = parts[2];\n            margin.left = parts[1];\n            break;\n        case 4:\n            margin.right = parts[1];\n            margin.bottom = parts[2];\n            margin.left = parts[3];\n            break;\n        default:\n            throw new Error('[seemly/getMargin]:' + value + ' is not a valid value.');\n    }\n    if (position === undefined)\n        return margin;\n    return margin[position];\n}\nfunction getGap(value, orient) {\n    const [rowGap, colGap] = value.split(' ');\n    if (!orient)\n        return {\n            row: rowGap,\n            col: colGap || rowGap\n        };\n    return orient === 'row' ? rowGap : colGap;\n}\nexport { getMargin, getMargin as getPadding, getGap };\nexport { parseResponsiveProp, parseResponsivePropValue } from './responsive';\n"],"mappings":"AAAA,OAAO,SAASA,IAAI,CAACC,KAAK,EAAE;EACxB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC3B,IAAIA,KAAK,CAACC,QAAQ,CAAC,IAAI,CAAC,EAAE;MACtB,OAAOC,MAAM,CAACF,KAAK,CAACG,KAAK,CAAC,CAAC,EAAEH,KAAK,CAACI,MAAM,GAAG,CAAC,CAAC,CAAC;IACnD;IACA,OAAOF,MAAM,CAACF,KAAK,CAAC;EACxB;EACA,OAAOA,KAAK;AAChB;AACA,SAASK,IAAI,CAACL,KAAK,EAAE;EACjB,IAAIA,KAAK,KAAKM,SAAS,IAAIN,KAAK,KAAK,IAAI,EACrC,OAAOM,SAAS;EACpB,IAAI,OAAON,KAAK,KAAK,QAAQ,EACzB,OAAQ,GAAEA,KAAM,IAAG;EACvB,IAAIA,KAAK,CAACC,QAAQ,CAAC,IAAI,CAAC,EACpB,OAAOD,KAAK;EAChB,OAAQ,GAAEA,KAAM,IAAG;AACvB;AACA,SAASK,IAAI;AACb,SAASE,SAAS,CAACP,KAAK,EAAEQ,QAAQ,EAAE;EAChC,MAAMC,KAAK,GAAGT,KAAK,CAACU,IAAI,EAAE,CAACC,KAAK,CAAC,MAAM,CAAC;EACxC,MAAMC,MAAM,GAAG;IACXC,GAAG,EAAEJ,KAAK,CAAC,CAAC;EAChB,CAAC;EACD,QAAQA,KAAK,CAACL,MAAM;IAChB,KAAK,CAAC;MACFQ,MAAM,CAACE,KAAK,GAAGL,KAAK,CAAC,CAAC,CAAC;MACvBG,MAAM,CAACG,MAAM,GAAGN,KAAK,CAAC,CAAC,CAAC;MACxBG,MAAM,CAACI,IAAI,GAAGP,KAAK,CAAC,CAAC,CAAC;MACtB;IACJ,KAAK,CAAC;MACFG,MAAM,CAACE,KAAK,GAAGL,KAAK,CAAC,CAAC,CAAC;MACvBG,MAAM,CAACI,IAAI,GAAGP,KAAK,CAAC,CAAC,CAAC;MACtBG,MAAM,CAACG,MAAM,GAAGN,KAAK,CAAC,CAAC,CAAC;MACxB;IACJ,KAAK,CAAC;MACFG,MAAM,CAACE,KAAK,GAAGL,KAAK,CAAC,CAAC,CAAC;MACvBG,MAAM,CAACG,MAAM,GAAGN,KAAK,CAAC,CAAC,CAAC;MACxBG,MAAM,CAACI,IAAI,GAAGP,KAAK,CAAC,CAAC,CAAC;MACtB;IACJ,KAAK,CAAC;MACFG,MAAM,CAACE,KAAK,GAAGL,KAAK,CAAC,CAAC,CAAC;MACvBG,MAAM,CAACG,MAAM,GAAGN,KAAK,CAAC,CAAC,CAAC;MACxBG,MAAM,CAACI,IAAI,GAAGP,KAAK,CAAC,CAAC,CAAC;MACtB;IACJ;MACI,MAAM,IAAIQ,KAAK,CAAC,qBAAqB,GAAGjB,KAAK,GAAG,wBAAwB,CAAC;EAAC;EAElF,IAAIQ,QAAQ,KAAKF,SAAS,EACtB,OAAOM,MAAM;EACjB,OAAOA,MAAM,CAACJ,QAAQ,CAAC;AAC3B;AACA,SAASU,MAAM,CAAClB,KAAK,EAAEmB,MAAM,EAAE;EAC3B,MAAM,CAACC,MAAM,EAAEC,MAAM,CAAC,GAAGrB,KAAK,CAACW,KAAK,CAAC,GAAG,CAAC;EACzC,IAAI,CAACQ,MAAM,EACP,OAAO;IACHG,GAAG,EAAEF,MAAM;IACXG,GAAG,EAAEF,MAAM,IAAID;EACnB,CAAC;EACL,OAAOD,MAAM,KAAK,KAAK,GAAGC,MAAM,GAAGC,MAAM;AAC7C;AACA,SAASd,SAAS,EAAEA,SAAS,IAAIiB,UAAU,EAAEN,MAAM;AACnD,SAASO,mBAAmB,EAAEC,wBAAwB,QAAQ,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}