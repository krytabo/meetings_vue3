{"ast":null,"code":"import { inject, ref, toRef, watchEffect } from 'vue';\nimport { useMemo, useMergedState } from 'vooks';\nimport { useConfig, useFormItem } from '../../_mixins';\nimport { call, createInjectionKey, warnOnce } from '../../_utils';\nexport const radioProps = {\n  name: String,\n  value: {\n    type: [String, Number, Boolean],\n    default: 'on'\n  },\n  checked: {\n    type: Boolean,\n    default: undefined\n  },\n  defaultChecked: Boolean,\n  disabled: {\n    type: Boolean,\n    default: undefined\n  },\n  label: String,\n  size: String,\n  onUpdateChecked: [Function, Array],\n  'onUpdate:checked': [Function, Array],\n  // deprecated\n  checkedValue: {\n    type: Boolean,\n    default: undefined\n  }\n};\nexport const radioGroupInjectionKey = createInjectionKey('n-radio-group');\nfunction setup(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    watchEffect(() => {\n      if (props.checkedValue !== undefined) {\n        warnOnce('radio', '`checked-value` is deprecated, please use `checked` instead.');\n      }\n    });\n  }\n  const formItem = useFormItem(props, {\n    mergedSize(NFormItem) {\n      const {\n        size\n      } = props;\n      if (size !== undefined) return size;\n      if (NRadioGroup) {\n        const {\n          mergedSizeRef: {\n            value: mergedSize\n          }\n        } = NRadioGroup;\n        if (mergedSize !== undefined) {\n          return mergedSize;\n        }\n      }\n      if (NFormItem) {\n        return NFormItem.mergedSize.value;\n      }\n      return 'medium';\n    },\n    mergedDisabled(NFormItem) {\n      if (props.disabled) return true;\n      if (NRadioGroup === null || NRadioGroup === void 0 ? void 0 : NRadioGroup.disabledRef.value) return true;\n      if (NFormItem === null || NFormItem === void 0 ? void 0 : NFormItem.disabled.value) return true;\n      return false;\n    }\n  });\n  const {\n    mergedSizeRef,\n    mergedDisabledRef\n  } = formItem;\n  const inputRef = ref(null);\n  const labelRef = ref(null);\n  const NRadioGroup = inject(radioGroupInjectionKey, null);\n  const uncontrolledCheckedRef = ref(props.defaultChecked);\n  const controlledCheckedRef = toRef(props, 'checked');\n  const mergedCheckedRef = useMergedState(controlledCheckedRef, uncontrolledCheckedRef);\n  const renderSafeCheckedRef = useMemo(() => {\n    if (NRadioGroup) return NRadioGroup.valueRef.value === props.value;\n    return mergedCheckedRef.value;\n  });\n  const mergedNameRef = useMemo(() => {\n    const {\n      name\n    } = props;\n    if (name !== undefined) return name;\n    if (NRadioGroup) return NRadioGroup.nameRef.value;\n  });\n  const focusRef = ref(false);\n  function doUpdateChecked() {\n    if (NRadioGroup) {\n      const {\n        doUpdateValue\n      } = NRadioGroup;\n      const {\n        value\n      } = props;\n      call(doUpdateValue, value);\n    } else {\n      const {\n        onUpdateChecked,\n        'onUpdate:checked': _onUpdateChecked\n      } = props;\n      const {\n        nTriggerFormInput,\n        nTriggerFormChange\n      } = formItem;\n      if (onUpdateChecked) call(onUpdateChecked, true);\n      if (_onUpdateChecked) call(_onUpdateChecked, true);\n      nTriggerFormInput();\n      nTriggerFormChange();\n      uncontrolledCheckedRef.value = true;\n    }\n  }\n  function toggle() {\n    if (mergedDisabledRef.value) return;\n    if (!renderSafeCheckedRef.value) {\n      doUpdateChecked();\n    }\n  }\n  function handleRadioInputChange() {\n    toggle();\n  }\n  function handleRadioInputBlur() {\n    focusRef.value = false;\n  }\n  function handleRadioInputFocus() {\n    focusRef.value = true;\n  }\n  return {\n    mergedClsPrefix: NRadioGroup ? NRadioGroup.mergedClsPrefixRef : useConfig(props).mergedClsPrefixRef,\n    inputRef,\n    labelRef,\n    mergedName: mergedNameRef,\n    mergedDisabled: mergedDisabledRef,\n    uncontrolledChecked: uncontrolledCheckedRef,\n    renderSafeChecked: renderSafeCheckedRef,\n    focus: focusRef,\n    mergedSize: mergedSizeRef,\n    handleRadioInputChange,\n    handleRadioInputBlur,\n    handleRadioInputFocus\n  };\n}\nexport { setup };","map":{"version":3,"names":["inject","ref","toRef","watchEffect","useMemo","useMergedState","useConfig","useFormItem","call","createInjectionKey","warnOnce","radioProps","name","String","value","type","Number","Boolean","default","checked","undefined","defaultChecked","disabled","label","size","onUpdateChecked","Function","Array","checkedValue","radioGroupInjectionKey","setup","props","process","env","NODE_ENV","formItem","mergedSize","NFormItem","NRadioGroup","mergedSizeRef","mergedDisabled","disabledRef","mergedDisabledRef","inputRef","labelRef","uncontrolledCheckedRef","controlledCheckedRef","mergedCheckedRef","renderSafeCheckedRef","valueRef","mergedNameRef","nameRef","focusRef","doUpdateChecked","doUpdateValue","_onUpdateChecked","nTriggerFormInput","nTriggerFormChange","toggle","handleRadioInputChange","handleRadioInputBlur","handleRadioInputFocus","mergedClsPrefix","mergedClsPrefixRef","mergedName","uncontrolledChecked","renderSafeChecked","focus"],"sources":["/Users/elmo/Documents/GitHub/meetings_vue3/node_modules/naive-ui/es/radio/src/use-radio.js"],"sourcesContent":["import { inject, ref, toRef, watchEffect } from 'vue';\nimport { useMemo, useMergedState } from 'vooks';\nimport { useConfig, useFormItem } from '../../_mixins';\nimport { call, createInjectionKey, warnOnce } from '../../_utils';\nexport const radioProps = {\n    name: String,\n    value: {\n        type: [String, Number, Boolean],\n        default: 'on'\n    },\n    checked: {\n        type: Boolean,\n        default: undefined\n    },\n    defaultChecked: Boolean,\n    disabled: {\n        type: Boolean,\n        default: undefined\n    },\n    label: String,\n    size: String,\n    onUpdateChecked: [Function, Array],\n    'onUpdate:checked': [Function, Array],\n    // deprecated\n    checkedValue: {\n        type: Boolean,\n        default: undefined\n    }\n};\nexport const radioGroupInjectionKey = createInjectionKey('n-radio-group');\nfunction setup(props) {\n    if (process.env.NODE_ENV !== 'production') {\n        watchEffect(() => {\n            if (props.checkedValue !== undefined) {\n                warnOnce('radio', '`checked-value` is deprecated, please use `checked` instead.');\n            }\n        });\n    }\n    const formItem = useFormItem(props, {\n        mergedSize(NFormItem) {\n            const { size } = props;\n            if (size !== undefined)\n                return size;\n            if (NRadioGroup) {\n                const { mergedSizeRef: { value: mergedSize } } = NRadioGroup;\n                if (mergedSize !== undefined) {\n                    return mergedSize;\n                }\n            }\n            if (NFormItem) {\n                return NFormItem.mergedSize.value;\n            }\n            return 'medium';\n        },\n        mergedDisabled(NFormItem) {\n            if (props.disabled)\n                return true;\n            if (NRadioGroup === null || NRadioGroup === void 0 ? void 0 : NRadioGroup.disabledRef.value)\n                return true;\n            if (NFormItem === null || NFormItem === void 0 ? void 0 : NFormItem.disabled.value)\n                return true;\n            return false;\n        }\n    });\n    const { mergedSizeRef, mergedDisabledRef } = formItem;\n    const inputRef = ref(null);\n    const labelRef = ref(null);\n    const NRadioGroup = inject(radioGroupInjectionKey, null);\n    const uncontrolledCheckedRef = ref(props.defaultChecked);\n    const controlledCheckedRef = toRef(props, 'checked');\n    const mergedCheckedRef = useMergedState(controlledCheckedRef, uncontrolledCheckedRef);\n    const renderSafeCheckedRef = useMemo(() => {\n        if (NRadioGroup)\n            return NRadioGroup.valueRef.value === props.value;\n        return mergedCheckedRef.value;\n    });\n    const mergedNameRef = useMemo(() => {\n        const { name } = props;\n        if (name !== undefined)\n            return name;\n        if (NRadioGroup)\n            return NRadioGroup.nameRef.value;\n    });\n    const focusRef = ref(false);\n    function doUpdateChecked() {\n        if (NRadioGroup) {\n            const { doUpdateValue } = NRadioGroup;\n            const { value } = props;\n            call(doUpdateValue, value);\n        }\n        else {\n            const { onUpdateChecked, 'onUpdate:checked': _onUpdateChecked } = props;\n            const { nTriggerFormInput, nTriggerFormChange } = formItem;\n            if (onUpdateChecked)\n                call(onUpdateChecked, true);\n            if (_onUpdateChecked)\n                call(_onUpdateChecked, true);\n            nTriggerFormInput();\n            nTriggerFormChange();\n            uncontrolledCheckedRef.value = true;\n        }\n    }\n    function toggle() {\n        if (mergedDisabledRef.value)\n            return;\n        if (!renderSafeCheckedRef.value) {\n            doUpdateChecked();\n        }\n    }\n    function handleRadioInputChange() {\n        toggle();\n    }\n    function handleRadioInputBlur() {\n        focusRef.value = false;\n    }\n    function handleRadioInputFocus() {\n        focusRef.value = true;\n    }\n    return {\n        mergedClsPrefix: NRadioGroup\n            ? NRadioGroup.mergedClsPrefixRef\n            : useConfig(props).mergedClsPrefixRef,\n        inputRef,\n        labelRef,\n        mergedName: mergedNameRef,\n        mergedDisabled: mergedDisabledRef,\n        uncontrolledChecked: uncontrolledCheckedRef,\n        renderSafeChecked: renderSafeCheckedRef,\n        focus: focusRef,\n        mergedSize: mergedSizeRef,\n        handleRadioInputChange,\n        handleRadioInputBlur,\n        handleRadioInputFocus\n    };\n}\nexport { setup };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}