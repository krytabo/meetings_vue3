{"ast":null,"code":"import { onBeforeUnmount, onMounted } from 'vue';\nimport { resizeObserverManager } from 'vueuc';\nexport function useOnResize(elRef, onResize) {\n  // it needn't be reactive since it's for internal usage\n  if (onResize) {\n    onMounted(() => {\n      const {\n        value: el\n      } = elRef;\n      if (el) {\n        resizeObserverManager.registerHandler(el, onResize);\n      }\n    });\n    onBeforeUnmount(() => {\n      const {\n        value: el\n      } = elRef;\n      if (el) {\n        resizeObserverManager.unregisterHandler(el);\n      }\n    });\n  }\n}","map":{"version":3,"names":["onBeforeUnmount","onMounted","resizeObserverManager","useOnResize","elRef","onResize","value","el","registerHandler","unregisterHandler"],"sources":["/Users/elmo/GitHub/meetings_vue3/node_modules/naive-ui/es/_utils/composable/use-resize.js"],"sourcesContent":["import { onBeforeUnmount, onMounted } from 'vue';\nimport { resizeObserverManager } from 'vueuc';\nexport function useOnResize(elRef, onResize) {\n    // it needn't be reactive since it's for internal usage\n    if (onResize) {\n        onMounted(() => {\n            const { value: el } = elRef;\n            if (el) {\n                resizeObserverManager.registerHandler(el, onResize);\n            }\n        });\n        onBeforeUnmount(() => {\n            const { value: el } = elRef;\n            if (el) {\n                resizeObserverManager.unregisterHandler(el);\n            }\n        });\n    }\n}\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,SAAS,QAAQ,KAAK;AAChD,SAASC,qBAAqB,QAAQ,OAAO;AAC7C,OAAO,SAASC,WAAW,CAACC,KAAK,EAAEC,QAAQ,EAAE;EACzC;EACA,IAAIA,QAAQ,EAAE;IACVJ,SAAS,CAAC,MAAM;MACZ,MAAM;QAAEK,KAAK,EAAEC;MAAG,CAAC,GAAGH,KAAK;MAC3B,IAAIG,EAAE,EAAE;QACJL,qBAAqB,CAACM,eAAe,CAACD,EAAE,EAAEF,QAAQ,CAAC;MACvD;IACJ,CAAC,CAAC;IACFL,eAAe,CAAC,MAAM;MAClB,MAAM;QAAEM,KAAK,EAAEC;MAAG,CAAC,GAAGH,KAAK;MAC3B,IAAIG,EAAE,EAAE;QACJL,qBAAqB,CAACO,iBAAiB,CAACF,EAAE,CAAC;MAC/C;IACJ,CAAC,CAAC;EACN;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}