{"ast":null,"code":"function lowBit(n) {\n  return n & -n;\n}\nexport class FinweckTree {\n  /**\n   * @param l length of the array\n   * @param min min value of the array\n   */\n  constructor(l, min) {\n    this.l = l;\n    this.min = min;\n    const ft = new Array(l + 1);\n    for (let i = 0; i < l + 1; ++i) {\n      ft[i] = 0;\n    }\n    this.ft = ft;\n  }\n  /**\n   * Add arr[i] by n, start from 0\n   * @param i the index of the element to be added\n   * @param n the value to be added\n   */\n  add(i, n) {\n    if (n === 0) return;\n    const {\n      l,\n      ft\n    } = this;\n    i += 1;\n    while (i <= l) {\n      ft[i] += n;\n      i += lowBit(i);\n    }\n  }\n  /**\n   * Get the value of index i\n   * @param i index\n   * @returns value of the index\n   */\n  get(i) {\n    return this.sum(i + 1) - this.sum(i);\n  }\n  /**\n   * Get the sum of first i elements\n   * @param i count of head elements to be added\n   * @returns the sum of first i elements\n   */\n  sum(i) {\n    if (i === undefined) i = this.l;\n    if (i <= 0) return 0;\n    const {\n      ft,\n      min,\n      l\n    } = this;\n    if (i > l) throw new Error('[FinweckTree.sum]: `i` is larger than length.');\n    let ret = i * min;\n    while (i > 0) {\n      ret += ft[i];\n      i -= lowBit(i);\n    }\n    return ret;\n  }\n  /**\n   * Get the largest count of head elements whose sum are <= threshold\n   * @param threshold\n   * @returns the largest count of head elements whose sum are <= threshold\n   */\n  getBound(threshold) {\n    let l = 0;\n    let r = this.l;\n    while (r > l) {\n      const m = Math.floor((l + r) / 2);\n      const sumM = this.sum(m);\n      if (sumM > threshold) {\n        r = m;\n        continue;\n      } else if (sumM < threshold) {\n        if (l === m) {\n          if (this.sum(l + 1) <= threshold) return l + 1;\n          return m;\n        }\n        l = m;\n      } else {\n        return m;\n      }\n    }\n    return l;\n  }\n}","map":{"version":3,"names":["lowBit","n","FinweckTree","constructor","l","min","ft","Array","i","add","get","sum","undefined","Error","ret","getBound","threshold","r","m","Math","floor","sumM"],"sources":["/Users/elmo/GitHub/meetings_vue3/node_modules/vueuc/es/shared/finweck-tree.js"],"sourcesContent":["function lowBit(n) {\n    return n & -n;\n}\nexport class FinweckTree {\n    /**\n     * @param l length of the array\n     * @param min min value of the array\n     */\n    constructor(l, min) {\n        this.l = l;\n        this.min = min;\n        const ft = new Array(l + 1);\n        for (let i = 0; i < l + 1; ++i) {\n            ft[i] = 0;\n        }\n        this.ft = ft;\n    }\n    /**\n     * Add arr[i] by n, start from 0\n     * @param i the index of the element to be added\n     * @param n the value to be added\n     */\n    add(i, n) {\n        if (n === 0)\n            return;\n        const { l, ft } = this;\n        i += 1;\n        while (i <= l) {\n            ft[i] += n;\n            i += lowBit(i);\n        }\n    }\n    /**\n     * Get the value of index i\n     * @param i index\n     * @returns value of the index\n     */\n    get(i) {\n        return this.sum(i + 1) - this.sum(i);\n    }\n    /**\n     * Get the sum of first i elements\n     * @param i count of head elements to be added\n     * @returns the sum of first i elements\n     */\n    sum(i) {\n        if (i === undefined)\n            i = this.l;\n        if (i <= 0)\n            return 0;\n        const { ft, min, l } = this;\n        if (i > l)\n            throw new Error('[FinweckTree.sum]: `i` is larger than length.');\n        let ret = i * min;\n        while (i > 0) {\n            ret += ft[i];\n            i -= lowBit(i);\n        }\n        return ret;\n    }\n    /**\n     * Get the largest count of head elements whose sum are <= threshold\n     * @param threshold\n     * @returns the largest count of head elements whose sum are <= threshold\n     */\n    getBound(threshold) {\n        let l = 0;\n        let r = this.l;\n        while (r > l) {\n            const m = Math.floor((l + r) / 2);\n            const sumM = this.sum(m);\n            if (sumM > threshold) {\n                r = m;\n                continue;\n            }\n            else if (sumM < threshold) {\n                if (l === m) {\n                    if (this.sum(l + 1) <= threshold)\n                        return l + 1;\n                    return m;\n                }\n                l = m;\n            }\n            else {\n                return m;\n            }\n        }\n        return l;\n    }\n}\n"],"mappings":"AAAA,SAASA,MAAM,CAACC,CAAC,EAAE;EACf,OAAOA,CAAC,GAAG,CAACA,CAAC;AACjB;AACA,OAAO,MAAMC,WAAW,CAAC;EACrB;AACJ;AACA;AACA;EACIC,WAAW,CAACC,CAAC,EAAEC,GAAG,EAAE;IAChB,IAAI,CAACD,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,MAAMC,EAAE,GAAG,IAAIC,KAAK,CAACH,CAAC,GAAG,CAAC,CAAC;IAC3B,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,CAAC,GAAG,CAAC,EAAE,EAAEI,CAAC,EAAE;MAC5BF,EAAE,CAACE,CAAC,CAAC,GAAG,CAAC;IACb;IACA,IAAI,CAACF,EAAE,GAAGA,EAAE;EAChB;EACA;AACJ;AACA;AACA;AACA;EACIG,GAAG,CAACD,CAAC,EAAEP,CAAC,EAAE;IACN,IAAIA,CAAC,KAAK,CAAC,EACP;IACJ,MAAM;MAAEG,CAAC;MAAEE;IAAG,CAAC,GAAG,IAAI;IACtBE,CAAC,IAAI,CAAC;IACN,OAAOA,CAAC,IAAIJ,CAAC,EAAE;MACXE,EAAE,CAACE,CAAC,CAAC,IAAIP,CAAC;MACVO,CAAC,IAAIR,MAAM,CAACQ,CAAC,CAAC;IAClB;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIE,GAAG,CAACF,CAAC,EAAE;IACH,OAAO,IAAI,CAACG,GAAG,CAACH,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACG,GAAG,CAACH,CAAC,CAAC;EACxC;EACA;AACJ;AACA;AACA;AACA;EACIG,GAAG,CAACH,CAAC,EAAE;IACH,IAAIA,CAAC,KAAKI,SAAS,EACfJ,CAAC,GAAG,IAAI,CAACJ,CAAC;IACd,IAAII,CAAC,IAAI,CAAC,EACN,OAAO,CAAC;IACZ,MAAM;MAAEF,EAAE;MAAED,GAAG;MAAED;IAAE,CAAC,GAAG,IAAI;IAC3B,IAAII,CAAC,GAAGJ,CAAC,EACL,MAAM,IAAIS,KAAK,CAAC,+CAA+C,CAAC;IACpE,IAAIC,GAAG,GAAGN,CAAC,GAAGH,GAAG;IACjB,OAAOG,CAAC,GAAG,CAAC,EAAE;MACVM,GAAG,IAAIR,EAAE,CAACE,CAAC,CAAC;MACZA,CAAC,IAAIR,MAAM,CAACQ,CAAC,CAAC;IAClB;IACA,OAAOM,GAAG;EACd;EACA;AACJ;AACA;AACA;AACA;EACIC,QAAQ,CAACC,SAAS,EAAE;IAChB,IAAIZ,CAAC,GAAG,CAAC;IACT,IAAIa,CAAC,GAAG,IAAI,CAACb,CAAC;IACd,OAAOa,CAAC,GAAGb,CAAC,EAAE;MACV,MAAMc,CAAC,GAAGC,IAAI,CAACC,KAAK,CAAC,CAAChB,CAAC,GAAGa,CAAC,IAAI,CAAC,CAAC;MACjC,MAAMI,IAAI,GAAG,IAAI,CAACV,GAAG,CAACO,CAAC,CAAC;MACxB,IAAIG,IAAI,GAAGL,SAAS,EAAE;QAClBC,CAAC,GAAGC,CAAC;QACL;MACJ,CAAC,MACI,IAAIG,IAAI,GAAGL,SAAS,EAAE;QACvB,IAAIZ,CAAC,KAAKc,CAAC,EAAE;UACT,IAAI,IAAI,CAACP,GAAG,CAACP,CAAC,GAAG,CAAC,CAAC,IAAIY,SAAS,EAC5B,OAAOZ,CAAC,GAAG,CAAC;UAChB,OAAOc,CAAC;QACZ;QACAd,CAAC,GAAGc,CAAC;MACT,CAAC,MACI;QACD,OAAOA,CAAC;MACZ;IACJ;IACA,OAAOd,CAAC;EACZ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}